{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/extra/ast.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/passes/findusedlocals.ts","webpack://assemblyscript/./src/passes/pass.ts","webpack://assemblyscript/./src/passes/rtrace.ts","webpack://assemblyscript/./src/passes/shadowstack.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/terminal.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/vector.ts","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/webpack/runtime/global","webpack://assemblyscript/webpack/startup"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__911__","Long","wasm","WebAssembly","Instance","Module","Uint8Array","e","low","high","unsigned","isLong","obj","prototype","__isLong__","Object","defineProperty","value","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","kind","range","name","TypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","parameterKind","type","initializer","ParameterNode","args","DecoratorNode","fromNode","commentKind","text","CommentNode","isQuoted","IdentifierExpression","elementExpressions","ArrayLiteralExpression","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","elementExpression","ElementAccessExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","typeName","NewExpression","NullExpression","names","values","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","property","PropertyAccessExpression","pattern","patternFlags","RegexpLiteralExpression","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","decorators","flags","typeParameters","implementsTypes","members","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","ExportDefaultStatement","externalName","ExportImportStatement","localName","exportedName","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","declarations","ImportStatement","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","variable","iterable","ForOfStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureNode","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","literalKind","LITERAL","changetype","FLOAT","INTEGER","STRING","NULL","TRUE","FALSE","node","CALL","PROPERTYACCESS","isAccessOn","THIS","SUPER","TypeNode","super","typeParameterNodes","NAMEDTYPE","namedTypeNode","next","typeArgumentNodes","k","hasGenericComponent","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","assert","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","CommonFlags","NONE","flag","nameNode","IDENTIFIER","nameStr","charCodeAt","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","numTypeArguments","Range","join","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","OMITTED","PARENTHESIZED","REGEXP","TERNARY","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","sourceKind","normalizedPath","SOURCE","Array","debugInfoIndex","exportPaths","lineCache","lineColumn","internalPath","mangleInternalPath","pos","lastIndexOf","PATH_DELIMITER","simplePath","source","LIBRARY_SUBST","LIBRARY","LIBRARY_ENTRY","off","end","push","l","r","m","s","unchecked","DeclarationStatement","INDEXSIGNATURE","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","indexSignature","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","startsWith","resolvePath","LIBRARY_PREFIX","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","ArrowKind","FUNCTIONDECLARATION","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","len","cur","isTrivialAlphanum","decorator","BuiltinNames","start","started","argumentsLength","setArgumentsLength","abort","trace","seed","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","clz","ctz","popcnt","rotl","rotr","abs","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","call_indirect","instantiate","idof","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_add","i64_add","f32_add","f64_add","i32_sub","i64_sub","f32_sub","f64_sub","i32_mul","i64_mul","f32_mul","f64_mul","i32_div_s","i32_div_u","i64_div_s","i64_div_u","f32_div","f64_div","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_load8x8_s","v128_load8x8_u","v128_load16x4_s","v128_load16x4_u","v128_load32x2_s","v128_load32x2_u","v128_load8_splat","v128_load16_splat","v128_load32_splat","v128_load64_splat","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_sat","v128_sub_sat","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_ceil","v128_floor","v128_trunc","v128_nearest","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_extend_low","v128_extend_high","i8x16","i16x8","i32x4","i64x2","f32x4","f64x2","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_sat_s","i8x16_add_sat_u","i8x16_sub_sat_s","i8x16_sub_sat_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i8x16_shuffle","i8x16_swizzle","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_sat_s","i16x8_add_sat_u","i16x8_sub_sat_s","i16x8_sub_sat_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_extend_low_i8x16_s","i16x8_extend_low_i8x16_u","i16x8_extend_high_i8x16_s","i16x8_extend_high_i8x16_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_extend_low_i16x8_s","i32x4_extend_low_i16x8_u","i32x4_extend_high_i16x8_s","i32x4_extend_high_i16x8_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_mul","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_all_true","i64x2_eq","i64x2_ne","i64x2_lt_s","i64x2_lt_u","i64x2_le_s","i64x2_le_u","i64x2_gt_s","i64x2_gt_u","i64x2_ge_s","i64x2_ge_u","i64x2_extend_low_i32x4_s","i64x2_extend_low_i32x4_u","i64x2_extend_high_i32x4_s","i64x2_extend_high_i32x4_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_ceil","f32x4_floor","f32x4_trunc","f32x4_nearest","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_ceil","f64x2_floor","f64x2_trunc","f64x2_nearest","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","i31_new","i31_get","data_end","stack_pointer","heap_base","rtti_base","visit_globals","visit_members","tostack","isFinite","ERROR","WARNING","INFO","Function","memory_size","memory_grow","memory_copy","memory_fill","memory_data","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Int64Array","Uint64Array","Float32Array","Float64Array","wasiAbort","wasiTrace","wasiSeed","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","arg0","compileExpression","operands","Type","currentType","isValue","unary","UnaryOp","ClzI32","options","isWasm64","ClzI64","error","DiagnosticCode","Operation_0_cannot_be_applied_to_type_1","reportNode","typeArgumentsRange","builtin_ctz","CtzI32","CtzI64","builtin_popcnt","PopcntI32","PopcntI64","builtin_rotl","arg1","flow","currentFlow","temp1","getTempLocal","findUsedLocals","setLocalFlag","index","LocalFlags","WRAPPED","temp2","ret","binary","BinaryOp","OrI32","ShlI32","local_tee","AndI32","ShrU32","local_get","NativeType","I32","SubI32","freeTempLocal","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","auto","XorI32","AddI32","ShrI32","usizeType","XorI64","AddI64","ShrI64","nativeSizeType","I64","AbsF32","AbsF64","builtin_max","isNumericLiteral","op","GtI32","GtU32","GtI64","GtU64","MaxF32","MaxF64","nativeType","toNativeType","builtin_min","LtI32","LtU32","LtI64","LtU64","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","isIntegerValue","numOperands","immOffset","immAlign","byteSize","evaluateImmediateOffset","evaluateImmediateAlign","isSignedIntegerValue","builtin_store","void","contextIsExact","inType","convertExpression","builtin_add","isNumericValue","makeAdd","builtin_sub","makeSub","builtin_mul","makeMul","builtin_div","makeDiv","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","AtomicRMWOp","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","arg2","builtin_atomic_wait","builtin_diagnostic","category","checkTypeAbsent","emitDiagnostic","User_defined_0","DiagnosticCategory","nop","builtin_conversion","builtin_i8x16","expr","precomp","runExpression","ExpressionRunnerFlags","PreserveSideeffects","writeI8","getConstValueI32","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","idx","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","SIMDExtractOp","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","SIMDReplaceOp","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","isPowerOf2","mask","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","SIMDLoadOp","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI16x8","MulI32x4","MulI64x2","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_sat","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_sat","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqI64x2","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeI64x2","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtI64x2","LtU64x2","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeI64x2","LeU64x2","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtI64x2","GtU64x2","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeI64x2","GeU64x2","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_ceil","CeilF32x4","CeilF64x2","builtin_v128_floor","FloorF32x4","FloorF64x2","builtin_v128_trunc","TruncF32x4","TruncF64x2","builtin_v128_nearest","NearestF32x4","NearestF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","builtin_v128_extend_low","ExtendLowI8x16ToI16x8","ExtendLowU8x16ToU16x8","ExtendLowI16x8ToI32x4","ExtendLowU16x8ToU32x4","ExtendLowI32x4ToI64x2","ExtendLowU32x4ToU64x2","builtin_v128_extend_high","ExtendHighI8x16ToI16x8","ExtendHighU8x16ToU16x8","ExtendHighI16x8ToI32x4","ExtendHighU16x8ToU32x4","ExtendHighI32x4ToI64x2","ExtendHighU32x4ToU64x2","builtin_v128_shl","simd_shift","SIMDShiftOp","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","ensureVisitMembersOf","instance","visitRef","program","nativeSizeSize","visitInstance","base","call","internalName","None","hasVisitImpl","isDeclaredInLibrary","visitPrototype","lookupInSelf","ElementKind","FUNCTION_PROTOTYPE","resolver","resolveFunction","compileFunction","visitSignature","visitThisType","thisType","parameterTypes","isStrictlyAssignableTo","needsTempValue","_values","Map_values","j","member","FIELD","parent","fieldOffset","memoryOffset","if","addFunction","createType","flatten","typeToRuntimeFlags","alignLog2","is","evaluateConstantType","Expected_0_type_arguments_but_got_1","Expected_0_arguments_but_got_1","argumentsRange","usize64","getConstValueI64High","getConstValueI64Low","usize32","naturalAlign","align","_0_must_be_a_power_of_two","feature","hasFeature","Feature_0_is_not_enabled","featureToString","setCurrentTypeOnError","Type_0_is_not_generic","expected","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","i64_is_i32","i64_low","i64_is_u32","i64_high","thisOperand","builtins","Map","function_builtins","set","isFloatValue","isBooleanValue","classReference","getClass","isAssignableTo","stringInstance","extends","arrayPrototype","isNullableReference","element","lookupExpression","ReportMode","SWALLOW","getExpressionId","ExpressionId","Const","signatureReference","Type_0_has_no_call_signatures","i64_new","getClassOrWrapper","firstOperand","isLiteralKind","String_literal_expected","fieldName","classMembers","has","get","Type_0_has_no_property_1","nextMemoryOffset","resultType","isInternalReference","getSignature","ensureStaticString","id","hasDecorator","DecoratorFlags","maybeDropCondition","LocalGet","NeF32","getLocalGetIndex","F32","temp","NeF64","F64","EqF32","SubF32","EqF64","SubF64","isAny","makeIsTrueish","compileCallDirect","offset","elementType","valuesOperand","Array_literal_expected","numElements","exprs","isStatic","makeZero","buf","writeStaticBuffer","byteLength","addAlignedMemorySegment","i31ref","fromType","isChangeableTo","Type_0_cannot_be_changed_to_type_1","nonNullableType","noAssert","evaled","Default","getExpressionType","getConstValueF32","getConstValueF64","makeAbort","EqzI32","EqzI64","ref_is","RefIsOp","RefIsNull","alreadyUnchecked","unset","indexArg","operandExprs","nativeParamTypes","classInstance","This_expression_is_not_constructable","ctor","ensureConstructor","checkFieldInitialization","compileInstantiate","functionPrototype","ftype","requiredParameters","functionArg","shift","thisArg","_this_cannot_be_referenced_in_current_location","compileCallIndirect","isizeType","writeI16","writeI32","writeF32","writeF64","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","simd_ternary","builtin_v128_bitwise_ternary","SIMDTernaryOp","Bitselect","AnyTrueI8x16","runtimeFeatures","elementsByName","global","COMPILED","INLINED","constantIntegerValue","global_get","block","managedClasses","nextId","_keys","Map_keys","instanceId","isPointerfree","return","current","switch","SubI64","count","data","abvInstance","arrayBufferViewInstance","abvPrototype","setPrototype","mapPrototype","staticArrayPrototype","lastId","getArrayValueType","getTypeArgumentsTo","rttiFlags","segment","addGlobal","instanceofInstance","stmts","instances","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","funcref","externref","anyref","eqref","dataref","u8x16","u16x8","u32x4","u64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_EXPORT_RUNTIME","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","ASC_FEATURE_GC","ASC_FEATURE_MEMORY64","I8","I16","Isize","U8","U16","U32","U64","Usize","Bool","V128","Funcref","Externref","Anyref","Eqref","I31ref","Dataref","String","StaticArray","Set","ArrayBufferView","ArrayBuffer","Mathf","NativeMath","NativeMathf","ipow32","ipow64","alloc","realloc","free","new_","renew","link","collect","typeinfo","instanceof_","visit","newBuffer","newArray","Feature","Target","Typeinfo","TypeinfoFlags","ExportNames","target","WASM32","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","importTable","exportTable","sourceMap","explicitStart","memoryBase","tableBase","globalAliases","features","noUnsafe","pedantic","lowMemoryLimit","exportRuntime","stackSize","optimizeLevelHint","shrinkLevelHint","WASM64","isize64","isize32","Constraints","RuntimeFeatures","memory","table","runtimeFunctions","runtimeGlobals","Compiler","DiagnosticEmitter","diagnostics","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","inlineStack","lazyFunctions","pendingClassInstanceOf","virtualCalls","pendingElements","doneModuleExports","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","i32PowInstance","i64PowInstance","create","setLowMemoryUnused","featureFlags","FeatureFlags","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","GC","Memory64","setFeatures","startFunctionInstance","makeNativeFunction","Signature","currentBody","shadowStack","ShadowStackPass","compile","hasShadowStack","initialize","actualFunction","startFunctionBody","files","filesByName","file","USER_ENTRY","compileFile","compileExports","ensureModuleExports","requireFunction","hasExport","addFunctionExport","requireGlobal","compileGlobal","addGlobalExport","functionsToCompile","Set_values","clear","compileClassInstanceOf","VIRTUAL","INSTANCE","ensureVirtualStub","finalizeVirtualStub","ensureVarargsStub","delete","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","UNLIMITED_MEMORY","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","functionTableNames","setFunctionTable","UNLIMITED_TABLE","global_set","ensureArgumentsLength","startIsEmpty","isWasi","unshift","funcRef","nativeParams","nativeResults","typesToNativeTypes","additionalLocals","finalize","setStart","walkModule","lookup","RtraceMemory","elementName","ensureModuleExport","exportsStar","prefix","functionInstances","instanceName","GENERIC","fullName","warning","Exported_generic_function_or_class_has_no_concrete_instances","identifierNode","CLASS_PROTOTYPE","classPrototype","classInstances","PROPERTY_PROTOTYPE","propertyInstance","CONST","STATIC","READONLY","exportName","Cannot_export_a_mutable_global","ENUMVALUE","enumValue","isImmutable","functionInstance","hasManagedOperands","noteExport","getManagedOperandIndices","PROPERTY","getterInstance","setterInstance","fieldInstance","getterExportName","compileFieldGetter","internalGetterName","internalGetterSignature","setterExportName","compileFieldSetter","internalSetterName","internalSetterSignature","isUnmanaged","ENUM","INTERFACE_PROTOTYPE","NAMESPACE","TYPEDEFINITION","subPrefix","implicitExport","SCOPED","memberName","PRIVATE","compileMembers","compileEnum","resolveClass","compileClass","resolveProperty","compileProperty","compileElement","exportStar","normalizedPathWithoutExtension","pathWithIndex","File_0_not_found","startFunction","startSignature","previousBody","previousFlow","compileTopLevelStatement","locals","localsByIndex","numLocals","varTypes","ERRORED","initExpr","typeNode","initializerNode","RESOLVED","resolvedType","resolveType","Type_expected","setType","checkTypeSupported","atEnd","Type_0_is_not_assignable_to_type_1","AMBIENT","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","GlobalGet","fromName","getGlobalGetName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","constantValueKind","constantFloatValue","compileInlineConstant","Decorator_0_is_not_valid_here","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","setConstantIntegerValue","MODULE_EXPORT","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","addFunctionImport","getFunction","ABSTRACT","INTERFACE","Function_implementation_is_missing_or_not_immediately_following_the_declaration","thisLocal","lookupLocal","bodyStartIndex","compileStatements","GET","SET","canOverflow","isNonnull","allocStmts","makeConditionalAllocation","makeFieldInitializationInConstructor","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","staticMembers","instanceMembers","compileField","getterRef","nativeValueType","nativeThisType","setterRef","bodyExpr","linkInstance","compilePropertyGetter","compilePropertySetter","buffer","alignment","MemorySegment","computeBlockStart64","stringValue","stringSegment","totalOverhead","segments","createBuffer","addRuntimeMemorySegment","ptr","writeI64","arrayBufferInstance","OBJECTInstance","writeField","bufferSegment","arrayInstance","bufferLength","readI32","arrayLength","bufferAddress","STUB","memorySegment","rtInstance","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","Nop","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","Not_implemented_0","addDebugLocation","isBody","numStatements","Block","getBlockName","getBlockChildCount","getBlockChildAt","needsExplicitUnreachable","outerFlow","innerFlow","fork","freeScopedLocals","inherit","labelNode","breakLabel","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","drop","tcond","local_set","Flow","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritNonnullIfTrue","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritNonnullIfFalse","inheritMutual","valueExpression","constraints","inlineReturnLabel","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","message","newArgs","numDeclarations","initializers","uniqueMap","contextualTypeArguments","dummy","addScopedDummyLocal","freeScopedDummyLocal","isConst","local","Local","parentFunction","setConstantFloatValue","scopedLocals","existing","errorRelated","Duplicate_identifier_0","_const_declarations_must_be_initialized","LET","existingLocal","getScopedLocal","isNative","addScopedLocal","CONSTANT","addLocal","makeLocalAssignment","isShortIntegerValue","doCompileWhileStatement","computeSmallIntegerShift","computeSmallIntegerMask","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","ensureSmallIntegerWrap","explicit","makeRuntimeNonNullCheck","isExternalReference","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","saturating","isLongIntegerValue","TruncF32ToI64Sat","TruncF32ToI64","TruncF32ToI32Sat","TruncF32ToI32","TruncF32ToU64Sat","TruncF32ToU64","TruncF32ToU32Sat","TruncF32ToU32","TruncF64ToI64Sat","TruncF64ToI64","TruncF64ToI32Sat","TruncF64ToI32","TruncF64ToU64Sat","TruncF64ToU64","TruncF64ToU32Sat","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","isVaryingIntegerValue","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","PREFIX","AS","NONNULL","exceptVoid","info","Expression_is_never_null","leftExpr","leftType","rightExpr","rightType","commonType","compound","Token","LESSTHAN","overload","lookupOverload","OperatorKind","LT","compileBinaryOverload","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","makeLt","GREATERTHAN","GT","makeGt","LESSTHAN_EQUALS","LE","makeLe","GREATERTHAN_EQUALS","GE","makeGe","EQUALS_EQUALS_EQUALS","EQUALS_EQUALS","EQ","operatorTokenToString","makeEq","EXCLAMATION_EQUALS_EQUALS","EXCLAMATION_EQUALS","NE","makeNe","EQUALS","compileAssignment","PLUS_EQUALS","PLUS","ADD","The_0_operator_cannot_be_applied_to_type_1","MINUS_EQUALS","MINUS","SUB","ASTERISK_EQUALS","ASTERISK","MUL","ASTERISK_ASTERISK_EQUALS","ASTERISK_ASTERISK","POW","makePow","SLASH_EQUALS","SLASH","DIV","PERCENT_EQUALS","PERCENT","REM","makeRem","LESSTHAN_LESSTHAN_EQUALS","LESSTHAN_LESSTHAN","intType","BITWISE_SHL","makeShl","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN","BITWISE_SHR","makeShr","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","BITWISE_SHR_U","makeShru","AMPERSAND_EQUALS","AMPERSAND","BITWISE_AND","makeAnd","BAR_EQUALS","BAR","BITWISE_OR","makeOr","CARET_EQUALS","CARET","BITWISE_XOR","makeXor","AMPERSAND_AMPERSAND","rightFlow","cloneExpression","BAR_BAR","targetType","getTypeOfElement","makeAssignment","currentThisExpression","currentElementExpression","LtF32","LtF64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","ref_eq","NeI32","AddF32","AddF64","MulI32","MulI64","MulF32","MulF64","Cannot_find_name_0","makeCallDirect","namespace","namespaceMembers","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI64","ShrU64","AndI64","OrI64","operatorInstance","valueExpr","thisExpression","LOCAL","Variable_0_used_before_its_declaration","checkUnsafe","propertyPrototype","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","INDEXED_SET","INDEXED_GET","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","Indexed_access_may_involve_bounds_checking","indexExpression","tee","isLocalFlag","isConstructor","setThisFieldFlag","FieldFlags","INITIALIZED","fieldParent","makeFieldAssignment","thisExpr","nativeReturnType","tempThis","elementExpr","tempTarget","tempElement","localIndex","unsetLocalFlag","field","fieldType","nativeFieldType","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","_super_can_only_be_referenced_in_a_derived_class","baseCtorInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","compileCallExpressionBuiltin","maybeInferCall","inlinedValue","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","Expression_cannot_be_represented_by_a_type","resolveTypeArguments","callee","BuiltinContext","fn","methodName","hasThis","The_this_types_of_each_signature_are_incompatible","hasRest","minimum","maximum","relatedReportNode","isLibrary","Operation_is_unsafe","argumentExpressions","checkCallSignature","isAccessOnThis","isAccessOnSuper","includes","makeCallInline","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","paramType","paramExpr","immediatelyDropped","numParameters","createInline","usedLocals","argumentLocal","getParameterName","addScopedAlias","initType","checkFieldInitializationInFlow","original","stub","varargsStub","originalSignature","originalParameterTypes","originalParameterDeclarations","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","numNames","ofN","Optional_parameter_must_have_an_initializer","virtualStub","ref","overloadPrototypes","overloads","tempIndex","builder","SwitchBuilder","unboundOverloadPrototype","isBound","unboundOverloadParent","isProperty","propertyParent","overloadInstance","boundProperty","boundPropertyInstance","boundPrototype","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","n","needsVarargsStub","calledName","addCase","extendees","getAllExtendees","a","b","extendee","removeFunction","render","isConstZero","Function_0_is_virtual_and_will_not_be_inlined","theOperands","slice","allOptionalsAreConstant","compilesToConst","resolved","lastOperand","getSideEffects","SideEffects","WritesGlobal","lastOperandType","operandsTostack","makeCallIndirect","numExpressions","targetExpression","resolveExpression","indexedGet","clone","isNamed","isSemanticallyAnonymous","FunctionPrototype","nextAnonymousId","contextualSignature","signatureNode","numPresentParameters","parameterNode","isTypeOmitted","thisTypeNode","outer","worked","ensureRuntimeFunction","fname","asNullable","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","lookupIdentifierExpression","localType","globalType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime","namedType","hasTypeArguments","resolveTypeName","makeInstanceofClass","expectedType","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","intValue","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","contextualClass","compileStaticArrayLiteral","arrayType","tempDataStart","addStaticBuffer","arraySegment","addStaticArrayHeader","arrayAddress","newArrayInstance","nativeArrayType","dataStartMember","bufferSize","newBufferInstance","classType","Cannot_create_an_instance_of_an_abstract_class","ctorPrototype","constructorPrototype","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_does_not_exist_on_type_1","Property_0_is_private_and_only_accessible_within_class_1","PROTECTED","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","resolveClassInclTypeArguments","constructorInstance","baseClass","baseCtor","makeNativeFunctionDeclaration","setResolvedInstance","relatedNode","didCheckFieldInitialization","isThisFieldFlag","DEFINITELY_ASSIGNED","Property_0_is_always_assigned_before_being_used","Unnecessary_definite_assignment","Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned","ctorInstance","ctxType","parentEnum","Property_0_is_used_before_being_assigned","Object_is_possibly_null","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","Unreachable","PLUS_PLUS","POSTFIX_INC","getLocalSetValue","compileUnaryOverload","makeOne","MINUS_MINUS","POSTFIX_DEC","setValue","NegF32","NegF64","PREFIX_INC","PREFIX_DEC","EXCLAMATION","NOT","TILDE","BITWISE_NOT","makeNegOne","TYPEOF","compileTypeof","typeString","REPORT","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","debugInfoRef","debugLocations","supported","parameterReportNode","v128_zero","ref_null","allocInstance","newInstance","thisIndex","makeAllocation","thisLocalIndex","fieldPrototype","codeLocation","abortInstance","messageArg","makeStaticAbort","messageExpr","filenameExpr","lineAt","columnAt","mangleInternalName","arg","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","sb","indentLevel","build","indent","typeToString","originalName","walk","TSDBuilder","remainingMembers","isInterface","extendsNode","code","diagnosticCategoryToString","PEDANTIC","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_CYAN","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","DiagnosticMessage","relatedRange","replace","thisRange","otherRange","thisRelatedRange","otherRelatedRange","formatDiagnosticContext","isLineBreak","isColorsEnabled","COLOR_RESET","useColors","showContext","wasColorsEnabled","setColorsEnabled","relatedSource","withRange","seenInSource","seenMessagesAtPos","ASTBuilder","visitNode","finish","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","elements","visitArguments","numArgs","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","quote","last","lastCharPos","isDefault","serializeExternalModifiers","numImplementsTypes","numMembers","numValues","serializeAccessModifiers","numTypeParameters","firstDeclaration","REST","OPTIONAL","DECLARE","PUBLIC","FlowFlags","ConditionKind","localFlags","thisFieldFlags","inlineFunction","initThisFieldFlags","nextInlineId","resetBreakContext","branch","except","temps","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempFuncrefs","tempExternrefs","tempAnyrefs","tempEqrefs","tempI31refs","tempDatarefs","resetTemporaryName","scopedLocal","setTemporaryName","scopedDummy","scopedAlias","scope","localsByName","defaultIfInlined","actualParent","actualClass","fieldFlags","nextBreakId","stack","breakStack","otherFlags","conditionKind","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","leftFieldFlags","newFieldFlags","rightFieldFlags","key","before","after","LocalSet","isLocalTee","getLocalSetIndex","iff","If","getIfFalse","getIfCondition","getIfTrue","Unary","getUnaryOp","getUnaryValue","Binary","getBinaryOp","getBinaryLeft","getBinaryRight","exprType","canConversionOverflow","Load","signed","isLoadSigned","getLoadBytes","Select","getSelectThen","getSelectElse","Call","instancesByName","getCallTarget","levels","formatDiagnosticMessage","Options","alias","DEFAULT_STACK_SIZE","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","FEATURE_GC","FEATURE_MEMORY64","optimizeLevel","shrinkLevel","Program","diagnosticsOffset","getSource","isEntry","parser","parseFile","nextFile","getDependee","util","Auto","ExternalKind","SIMDLoadStoreLaneOp","SIMDWidenOp","RefAsOp","BrOnOp","useShadowStack","hasTemporaryFunction","cachedStringsToPointers","cachedPointersToStrings","lit","binaryen","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","_BinaryenRefEq","_BinaryenUnary","_BinaryenBinary","_BinaryenMemorySize","_BinaryenMemoryGrow","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","cStr","allocStringCached","_BinaryenGlobalGet","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","replacement","_BinaryenAtomicCmpxchg","timeout","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","allocPtrArray","_BinaryenBlock","single","Return","Throw","singleType","_BinaryenBreak","_BinaryenDrop","ReadsLocal","ReadsGlobal","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","_BinaryenUnreachable","dest","_BinaryenMemoryCopy","_BinaryenMemoryFill","eventName","_BinaryenThrow","_BinaryenRethrow","_BinaryenPop","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","vec","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","_BinaryenSIMDShuffle","c","_BinaryenSIMDTernary","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIs","_BinaryenRefAs","_BinaryenRefFunc","_BinaryenI31New","_BinaryenI31Get","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","func","_BinaryenSetStart","cStr1","cStr2","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","_BinaryenGetExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetFastMath","_BinaryenSetFastMath","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenGetAllowInliningFunctionsWithLoops","enabled","_BinaryenSetAllowInliningFunctionsWithLoops","_BinaryenModuleGetFeatures","_BinaryenModuleSetFeatures","pass","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","debugInfo","setOptimizeLevel","setShrinkLevel","setDebugInfo","setFastMath","clearPassArguments","setAlwaysInlineMaxSize","setFlexibleInlineMaxSize","setOneCallerInlineMaxSize","setAllowInliningFunctionsWithLoops","getLowMemoryUnused","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","__i32_load8_u","readBuffer","watFormat","cached","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenLocalGetGetIndex","globalName","_BinaryenGlobalGetGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChildAt","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperandAt","_BinaryenMemoryGrowGetDelta","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","All","_BinaryenExpressionGetSideEffects","u8s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","arr","ch","fromCharCodes","labelPostfix","labels","defaultLabel","lastCase","output","Break","numChildren","Dependee","Parser","sources","backlog","seenlog","donelog","onComment","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","dependee","Source","USER","tn","Tokenizer","skip","ENDOFFILE","parseTopLevelStatement","skipStatement","startPos","AT","tokenPos","parseDecorator","exportStart","exportEnd","defaultStart","defaultEnd","DEFAULT","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","nextTokenPos","parseEnum","parseVariable","VAR","parseFunction","state","mark","abstractStart","abstractEnd","nextTokenOnNewLine","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","IdentifierHandling","PREFER","parseNamespace","parseExportImport","parseImport","TYPE","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","DOT","Identifier_expected","acceptParenthesized","suppressErrors","token","OPENPAREN","isNullableSignature","tryParseFunctionType","CLOSEPAREN","_0_expected","Unexpected_token","innerType","parseType","createNamedType","STRINGLITERAL","parseTypeName","parameter","notNullStart","notNull","OPENBRACKET","bracketStart","CLOSEBRACKET","bracketRange","nullable","isSignature","firstParamNameNoType","firstParamKind","paramStart","DOT_DOT_DOT","COLON","QUESTION","A_rest_parameter_cannot_be_optional","param","createParameter","createOmittedType","EQUALS_GREATERTHAN","createFunctionType","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","SEMICOLON","parentFlags","parentDecorators","isIllegalVariableIdentifier","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","createVariableDeclaration","OPENBRACE","CLOSEBRACE","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","nextToken","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","EXTENDS","createTypeParameter","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createFunctionDeclaration","createEmptyIdentifierExpression","parseFunctionExpressionCommon","explicitThis","bodyExpression","createExpressionStatement","createFunctionExpression","IMPLEMENTS","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","isGetter","getStart","getEnd","setEnd","isGetterOrSetter","createConstructorExpression","retIndex","parseIndexSignature","ALWAYS","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","createNamespaceDeclaration","parseExportMember","FROM","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","OF","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","ELSE","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","CASE","createSwitchCase","_case_or_default_expected","createThrowStatement","CATCH","FINALLY","createTryStatement","createTypeDeclaration","createVoidStatement","createWhileStatement","YIELD","DELETE","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createOmittedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","INTEGERLITERAL","readInteger","checkForIdentifierStartAfterNumericLiteral","createIntegerLiteralExpression","FLOATLITERAL","readFloat","createFloatLiteralExpression","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Unexpected_end_of_text","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","potentiallyGeneric","createCallExpression","skipBlock","depth","IN","Precedence","FindUsedLocalsVisitor","Visitor","used","localGet","localSet","singleton","visitor","_currentExpression","currentExpression","previousExpression","visitLabel","visitBlock","visitIf","Loop","visitLoop","_BinaryenBreakGetValue","visitBreak","Switch","_BinaryenSwitchGetDefaultName","_BinaryenSwitchGetNumNames","_BinaryenSwitchGetNameAt","_BinaryenSwitchGetCondition","_BinaryenSwitchGetValue","visitSwitch","visitCallPre","visitName","visitCall","CallIndirect","visitCallIndirectPre","_BinaryenCallIndirectGetTarget","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperandAt","visitCallIndirect","visitIndex","visitLocalGet","visitLocalSet","visitGlobalGet","GlobalSet","_BinaryenGlobalSetGetName","_BinaryenGlobalSetGetValue","visitGlobalSet","visitLoad","Store","visitStore","visitConst","visitUnary","visitBinary","visitSelect","Drop","visitDrop","visitReturn","MemorySize","visitMemorySize","MemoryGrow","visitMemoryGrow","visitNop","visitUnreachable","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","visitAtomicRMW","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","visitAtomicCmpxchg","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","visitAtomicWait","AtomicNotify","_BinaryenAtomicNotifyGetPtr","_BinaryenAtomicNotifyGetNotifyCount","visitAtomicNotify","AtomicFence","visitAtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","visitSIMDExtract","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","visitSIMDReplace","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","visitSIMDShuffle","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","visitSIMDTernary","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","visitSIMDShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","visitSIMDLoad","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","visitMemoryInit","DataDrop","visitDataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","visitMemoryCopy","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","visitMemoryFill","Pop","visitPop","RefNull","visitRefNull","RefIs","_BinaryenRefIsGetValue","visitRefIs","RefFunc","_BinaryenRefFuncGetFunc","visitRefFunc","RefEq","_BinaryenRefEqGetLeft","_BinaryenRefEqGetRight","visitRefEq","Try","_BinaryenTryGetBody","numCatchBodies","_BinaryenTryGetNumCatchBodies","_BinaryenTryGetCatchBodyAt","visitTry","visitEvent","_BinaryenThrowGetEvent","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperandAt","visitThrow","Rethrow","visitRethrow","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperandAt","visitTupleMake","TupleExtract","_BinaryenTupleExtractGetTuple","visitTupleExtract","I31New","_BinaryenI31NewGetValue","visitI31New","I31Get","_BinaryenI31GetGetI31","visitI31Get","CallRef","visitCallRef","RefTest","visitRefTest","RefCast","visitRefCast","BrOn","visitBrOn","RttCanon","visitRttCanon","RttSub","visitRttSub","StructNew","visitStructNew","StructGet","visitStructGet","StructSet","visitStructSet","ArrayNew","visitArrayNew","ArrayGet","visitArrayGet","ArraySet","visitArraySet","ArrayLen","visitArrayLen","RefAs","visitRefAs","replaceChild","search","child","_BinaryenBlockSetChildAt","_BinaryenIfSetCondition","_BinaryenIfSetIfTrue","_BinaryenIfSetIfFalse","_BinaryenLoopSetBody","_BinaryenBreakSetCondition","_BinaryenBreakSetValue","_BinaryenSwitchSetCondition","_BinaryenSwitchSetValue","_BinaryenCallSetOperandAt","_BinaryenCallIndirectSetTarget","_BinaryenCallIndirectSetOperandAt","_BinaryenLocalSetSetValue","_BinaryenGlobalSetSetValue","_BinaryenLoadSetPtr","_BinaryenStoreSetPtr","_BinaryenStoreSetValue","_BinaryenUnarySetValue","_BinaryenBinarySetLeft","_BinaryenBinarySetRight","_BinaryenSelectSetIfTrue","_BinaryenSelectSetIfFalse","_BinaryenSelectSetCondition","_BinaryenDropSetValue","_BinaryenReturnSetValue","_BinaryenMemoryGrowSetDelta","_BinaryenAtomicRMWSetPtr","_BinaryenAtomicRMWSetValue","_BinaryenAtomicCmpxchgSetPtr","_BinaryenAtomicCmpxchgSetExpected","repl","_BinaryenAtomicCmpxchgSetReplacement","_BinaryenAtomicWaitSetPtr","_BinaryenAtomicWaitSetExpected","_BinaryenAtomicWaitSetTimeout","_BinaryenAtomicNotifySetPtr","_BinaryenAtomicNotifySetNotifyCount","_BinaryenSIMDExtractSetVec","_BinaryenSIMDReplaceSetVec","_BinaryenSIMDReplaceSetValue","_BinaryenSIMDShuffleSetLeft","_BinaryenSIMDShuffleSetRight","_BinaryenSIMDTernarySetA","_BinaryenSIMDTernarySetB","_BinaryenSIMDTernarySetC","_BinaryenSIMDShiftSetVec","_BinaryenSIMDShiftSetShift","_BinaryenSIMDLoadSetPtr","_BinaryenMemoryInitSetDest","_BinaryenMemoryInitSetOffset","_BinaryenMemoryInitSetSize","_BinaryenMemoryCopySetDest","_BinaryenMemoryCopySetSource","_BinaryenMemoryCopySetSize","_BinaryenMemoryFillSetDest","_BinaryenMemoryFillSetValue","_BinaryenMemoryFillSetSize","_BinaryenRefIsSetValue","_BinaryenRefEqSetLeft","_BinaryenRefEqSetRight","_BinaryenTrySetBody","catchBody","_BinaryenTrySetCatchBodyAt","_BinaryenThrowSetOperandAt","_BinaryenTupleMakeSetOperandAt","_BinaryenTupleExtractSetTuple","_BinaryenI31NewSetValue","i31Expr","_BinaryenI31GetSetI31","_currentFunction","_currentGlobal","currentFunction","currentGlobal","walkFunctions","walkGlobals","moduleRef","_BinaryenGetNumFunctions","walkFunction","_BinaryenGetFunctionByIndex","_BinaryenGetNumGlobals","walkGlobal","_BinaryenGetGlobalByIndex","init","_BinaryenFunctionSetBody","parentExpressionOrNull","_BinaryenExpressionFinalize","Pass","seenStores","ptrType","readStringCached","checkRT","matchPattern","needsSlot","slotMaps","tempMaps","exportMap","hasStackCheckFunction","callSlotOffset","callSlotStack","slotMap","slotIndex","managedOperandIndices","tempMap","_BinaryenFunctionGetNumLocals","ptrBinaryAdd","ptrBinarySub","ptrConst","makeStackCheck","frameSize","remain","nativeSource","numSlots","match","noteSlot","getSharedTemp","ptrSize","updateCallOperands","callIndirect","replaceCurrent","numVars","vars","exportRef","_BinaryenExportGetKind","internalNameRef","_BinaryenExportGetValue","externalNameRef","_BinaryenExportGetName","expandType","numParams","wrapperName","wrapperNameRef","makeStackOffset","instrumentReturns","InstrumentReturns","makeStackFill","bodyType","updateFunction","updateExport","parentPass","AL_MASK","AL_SIZE","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","fromDecorator","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","INVALID","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","nextClassId","nextSignatureId","initialized","elementsByDeclaration","wrapperClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_functionPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_allocInstance","_reallocInstance","_freeInstance","_newInstance","_renewInstance","_linkInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_newBufferInstance","_newArrayInstance","_BLOCKInstance","_OBJECTInstance","nativeDummySignature","Resolver","nativeFile","File","requireClass","BLOCKInstance","blockOverhead","objectOverhead","currentOffset","payloadSize","blockSize","computeBlockStart","blockMinsize","decoratorFlags","registerNativeType","TypeDefinition","makeNativeTypeDeclaration","registerConstantInteger","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","starExports","foreignFile","lookupForeignFile","ensureExportStar","madeProgress","queuedImport","lookupForeign","splice","asAliasNamespace","Module_0_has_no_exported_member_1","exportNames","queuedExport","ensureExport","globalElement","isDeclaredElement","registerWrapperClass","thisPrototype","baseElement","basePrototype","Class_0_is_final_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","firstChar","markModuleExports","thisInstanceMembers","baseInstanceMembers","thisMember","baseMember","thisMethod","baseMethod","visibilityEquals","Overload_signatures_must_all_be_public_private_or_protected","baseMethodInstances","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","nextPrototype","markModuleExport","className","classElement","wrappedType","isIntegerInclReference","Global","makeNativeVariableDeclaration","merged","tryMerge","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","Duplicate_decorator","ClassPrototype","checkDecorators","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","FieldPrototype","addInstance","checkOperatorOverloads","firstArg","_0_is_not_a_valid_operator","Duplicate_function_implementation","operatorKind","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","InterfacePrototype","initializeFieldAsProperty","Namespace","copyMembers","Element","shadowType","FILE","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isPublic","vis","declaredElements","DeclaredElement","selfProperty","selfGetter","selfSetter","typedElements","TypedElement","aliasNamespaces","ensureGlobal","makeNativeNamespaceDeclaration","ns","copyExportsToNamespace","inSelf","ConstantValueKind","VariableLikeElement","i64_zero","boundPrototypes","bound","instanceKey","nameInclTypeParameters","parameterType","parameterName","createParent","registerConcreteElement","getDefaultParameterName","postfix","setDebugLocation","FIELD_PROTOTYPE","_internalGetterName","_internalSetterName","_internalGetterSignature","_internalSetterSignature","toBound","_isInterface","basePtototype","Class","interfaces","_id","implementers","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","uncheckedOverload","overhead","computeBlockSize","baseOffset","typeKind","i64_is","writeI32AsI64","writeI64AsI32","extendedPrototype","float32ArrayPrototype","float64ArrayPrototype","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","exceptIfMember","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","srcMembers","destMembers","asGlobal","cachedDefaultParameterNames","resolveClassPending","ctxElement","ctxTypes","reportMode","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_cannot_be_nullable","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","parameterTypeNode","returnTypeNode","typeArgument","prev","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","typeParameterNames","argumentNodes","argumentExpression","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","ensureResolvedLazyGlobal","isTypedElement","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","targetNode","propertyName","variableLikeElement","wrapper","baseInstance","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_bool","Type_0_is_illegal_in_this_context","superLocal","fltType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","varType","varElement","thenType","elseType","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","identifierAndSignatureRange","baseMembers","instanceMemberPrototypes","properties","fieldTypeNode","baseField","Field","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","overloadKind","overloadPrototype","IndexSignature","pending","dependsOnInstance","_values2","Property","tokenFromKeyword","ASYNC","AWAIT","DEBUGGER","IS","KEYOF","MODULE","PACKAGE","WITH","tokenIsAlsoIdentifier","identifierHandling","unsafeNext","maxTokenLength","chr","isDecimalDigit","commentStartPos","LINE","TRIPLE","closed","testInteger","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","reusableState","State","Unterminated_string_literal","readEscapeSequence","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","sepEnd","i64_4","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","sepCount","readDecimalFloatPartial","replaceAll","parseFloat","allowLeadingZeroSep","An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","TypeKind","TypeFlags","_nonNullableType","_nullableType","nullableType","signednessIsRelevant","currentClass","targetClass","targetFunction","isVectorValue","signednessIsImportant","validWat","nullablePostfix","numTypes","signatureTypes","numParameterTypes","nativeTypes","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","indices","optionalStart","restIndex","cloneParameterTypes","readI64","i32_as_f32","f32_as_i32","i64_as_f64","valueI64","f64_as_i64","overrides","cloned","v","x","separator","ipos","dirname","origin","COLOR_GRAY","COLOR_GREEN","COLOR_BLUE","COLOR_WHITE","colorsEnabled","isEnabled","color","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","midVal","unmanaged","g","toText","wrapModule","emitStackIR","emitText","toAsmjs","emitAsmjs","keys","i64_one","i64_neg_one","i64_pow","rightLo","rightHi","i64_div","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shr","i64_not","i64_eq","i64_ne","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","minSafeF64","maxSafeF64","i64_is_f64","fround","globalScope","window","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","Infinity","NaN","clz32","round","y","sign","isTrueish","CHUNKSIZE","apply","parts","fromCodePoint","at","charAt","configurable","replacment","split","arraySort","sort","comparator","forEach","Ctr","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","arguments","console","byteOffset","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","globalThis"],"mappings":"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AAQE,IACpBY,GAAG,EAAA/jC,YAAYqtC,UAAW,OAAO,EAGlD,MAEF,KAAK,EAAA/K,YAAY4c,gBAAiB,CAChC,IAAI9P,EAA6BhM,EAAQgM,UACzC,GAAIA,EAEF,IAAK,IAAInM,EAAUC,WAAWkM,GAAYjM,EAAI,EAAG1+B,EAAIw+B,EAAQl2C,OAAQo2C,EAAI1+B,IAAK0+B,EAAG,CAE/E,GADet+B,UAAUo+B,EAAQE,IACpBY,GAAG,EAAA/jC,YAAYqtC,UAAW,OAAO,EAGlD,MAEF,QACE,GAAIjK,EAAOW,GAAG,EAAA/jC,YAAYqtC,WAAaijC,EAAkBltC,GAAS,OAAO,GAMjF,OAAO,EAlTT,gB,2HC7WA,SAAY1b,GACV,+CACA,mDACA,yCACA,6DACA,qGACA,iHACA,iHACA,mHACA,qHACA,uHACA,iMACA,iFACA,2FACA,+DACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,2FACA,uEACA,mDACA,+EACA,mGACA,uKACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,yDACA,uGACA,qHACA,yEACA,yLACA,qIACA,2GACA,+KACA,uIACA,uIACA,+GACA,iGACA,yHACA,2EACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,sJACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA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C,OAGT,a,kgDC7RA,eACA,SACA,SAqBA,IAAiBh2D,EAiBLmvB,EAkBA/R,EA0NA3d,EAgpEAi9C,GA74EZ,SAAiB18C,GACF,EAAAwY,KAAmB,EACnB,EAAA2qC,YAA0B,EAC1B,EAAAljD,IAAkB,EAClB,EAAAkB,IAAkB,EAClB,EAAA2d,IAAkB,EAClB,EAAAG,IAAkB,EAClB,EAAA0K,KAAmB,EACnB,EAAAC,QAAsB,EACtB,EAAAC,UAAwB,EACxB,EAAAC,OAAqB,EACrB,EAAAC,MAAoB,GACpB,EAAAC,OAAqB,GACrB,EAAAC,QAAsB,GACtB,EAAAgsC,MAAoB,EAdnC,CAAiBj2D,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAiB3B,SAAYmvB,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,kBACA,8BACA,4DACA,oBAfF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAkBxB,SAAY/R,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,gCACA,gCACA,kBAEA,kCACA,8BACA,sCACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,8CACA,8BACA,gCACA,4BACA,gCACA,gCACA,kBACA,0BACA,sBACA,0BACA,sBACA,kBACA,sBACA,0BACA,8BACA,oCACA,wBACA,wBACA,0BACA,0BACA,0BACA,oBACA,4BACA,wBACA,8BACA,8BACA,8BACA,4BACA,4BACA,4BACA,4BACA,sBApEF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAuExB,SAAY84C,GACV,2BACA,qBACA,uBACA,uBACA,qBALF,CAAY,EAAAA,eAAA,EAAAA,aAAY,KAQxB,SAAYv4D,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,4BACA,oCACA,oCACA,oCACA,kCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,gEACA,iEACA,iEACA,iEACA,qDACA,qDACA,qDACA,qDACA,mDACA,mDACA,mDACA,mDACA,uDACA,yDACA,uDACA,yDACA,uDACA,yDACA,uDACA,yDACA,uDACA,yDACA,uDACA,yDACA,yDACA,yDACA,6DACA,6DACA,yDACA,yDAxIF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA2InB,SAAY8B,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BAEA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,2CACA,yCACA,2CACA,yCACA,2CACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,yCACA,2CACA,yCACA,2CACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,iDACA,iDACA,iDACA,iDACA,qCAxMF,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KA2MpB,SAAYwG,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAY4C,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAWzB,SAAYW,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KASzB,SAAY+M,GACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4BACA,4BAZF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAevB,SAAY+M,GACV,6BACA,6BACA,6BACA,6BACA,6BACA,yCACA,yCACA,yCACA,yCATF,CAAY,EAAAA,gBAAA,EAAAA,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CrrD,GArKjC,MAAMorD,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBnrD,EAAWsrD,GACrC,GAAItrD,EAAOsrD,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIC,EACAC,EAHAtoI,EAAK,EACLD,EAAKqoI,EAAI7vI,OAINyH,EAAK,EAAID,GAAI,CAIlB,GAHAsoI,EAAMroI,GAAOD,EAAKC,GAAO,IAEzBsoI,EAASF,EADTC,GAAc,EAANA,KAEMvrD,GAAQA,GAAQsrD,EAAIC,EAAM,GACtC,OAAO,EAELvrD,EAAOwrD,EACTvoI,EAAKsoI,EAELroI,EAAKqoI,EAAM,EAGf,OAAO,EAkBT,kBAAuBlsD,EAAc6Y,GACnC,KAAOA,GAAS,GACd7Y,EAAGnsE,KALU,YAMbglF,GAAS,EAEPA,GAAS,IACX7Y,EAAGnsE,KAVU,QAWbglF,GAAS,GAEPA,GACF7Y,EAAGnsE,KAfU,Q,6FC/XJ,EAAAiqE,UAAY,IAAI/jF,WAAW,K,6GCHxC,SAAkBuqD,GAEhB,mBAEA,uCAEA,yCAEA,yCAEA,iCAEA,oBAEA,0BAEA,gDAEA,iCAEA,2CAEA,mCAEA,kBAEA,8BA1BF,CAAkB,EAAAA,UAAA,EAAAA,QAAO,KA8BzB,2BAAgCtQ,GAC9B,OAAQA,GACN,KAAK,EAAwB,MAAO,iBACpC,KAAK,EAAyB,MAAO,kBACrC,KAAK,EAAyB,MAAO,kBACrC,KAAK,EAAqB,MAAO,cACjC,KAAK,GAAc,MAAO,OAC1B,KAAK,GAAiB,MAAO,UAC7B,KAAK,GAA4B,MAAO,qBACxC,KAAK,IAAoB,MAAO,aAChC,KAAK,IAAyB,MAAO,kBACrC,KAAK,IAAqB,MAAO,cACjC,KAAK,KAAY,MAAO,KACxB,KAAK,KAAkB,MAAO,WAGhC,OADAjlC,QAAO,GACA,K,0FC9CT,SAAYw1C,GAEV,eAEA,uBAEA,uBANF,CAAY,EAAAA,SAAA,EAAAA,OAAM,M,mdCalB,IAAaC,EAAb,oBAEE,KAAAh7C,MAAK,EAEL,KAAA2nC,KAAY,IAJDqT,EAAQ,GADpB4nF,WACY5nF,GAAA,EAAAA,WAQb,SAAkBC,GAEhB,mBAEA,yCAEA,qBAEA,iCAEA,iBAEA,kBAEA,kCAEA,sCAEA,uCAEA,uCAEA,uCAEA,wCAEA,sCAEA,oCAEA,0CAEA,yCAEA,qCAEA,qCAEA,sCAEA,sCAEA,sCAEA,qCAEA,mCAEA,yCAEA,uCAlDF,CAAkB,EAAAA,gBAAA,EAAAA,cAAa,M,cCnB/B,MAAMirC,EAAW,EAAA28C,EAAO38C,WAAa,EAAA28C,EAAO38C,SAAW,EAAQ,MAE/Dv2F,EAAOD,QAAUw2F,EAEjB,MAAM,OAAE51F,GAAW,EAAQ,KAE3BA,EAAOQ,UAAUgyI,OAAS,SAAgBlwC,GAAY,GACpD,OAAIA,EAKK1M,EAAS68C,WAAW/yI,KAAKu5E,KAAKy5D,aAAoC,GAElE98C,EAAS68C,WAAW/yI,KAAKu5E,KAAK05D,YAIzC3yI,EAAOQ,UAAUoyI,QAAU,WACzB,OAAOh9C,EAAS68C,WAAW/yI,KAAKu5E,KAAK45D,c,cCnBvC,EAAAN,EAAOnvF,SAAW,SAAkB+uF,GAClC,OAAOr5H,MAAM+uF,KAAKsqC,EAAIW,SAGxB,EAAAP,EAAO95F,WAAa,SAAoB05F,GACtC,OAAOr5H,MAAM+uF,KAAKsqC,EAAIlkI,WAGxB,EAAAskI,EAAO7hF,WAAa,SAAoBrV,GACtC,OAAOviC,MAAM+uF,KAAKxsD,EAAIptC,Y,cCPxB,MAAMgwC,EAAM,IAAItiB,aAAa,GACvBmiB,EAAM,IAAIpiB,aAAauiB,EAAIqf,QAC3Br+B,EAAM,IAAI3D,WAAW2iB,EAAIqf,QAE/B,EAAAi1E,EAAO5B,WAAa,SAAoB/vI,GAEtC,OADAk9C,EAAI,GAAKl9C,EACFq+B,EAAI,IAGb,EAAAszG,EAAO7B,WAAa,SAAoB9vI,GAEtC,OADAq+B,EAAI,GAAKr+B,EACFk9C,EAAI,IAGb,EAAAy0F,EAAOzB,WAAa,SAAoBlwI,GAEtC,OADAq9C,EAAI,GAAKr9C,EACF47C,QAAQvd,EAAI,GAAIA,EAAI,KAG7B,EAAAszG,EAAO3B,WAAa,SAAoBhwI,GAGtC,OAFAq+B,EAAI,GAAK6b,QAAQl6C,GACjBq+B,EAAI,GAAK+b,SAASp6C,GACXq9C,EAAI,K,cCtBb,MAAMr+C,EAAO,EAAA2yI,EAAO3yI,MAAQ,EAAQ,KAEpC,EAAA2yI,EAAO9T,SAAc7+H,EAAK0B,KAC1B,EAAAixI,EAAOQ,QAAcnzI,EAAK6D,IAC1B,EAAA8uI,EAAOS,YAAcpzI,EAAKmB,SAAS,GAEnC,EAAAwxI,EAAO3R,OAAS,SAAgBhgI,GAC9B,OAAOhB,EAAKU,OAAOM,IAGrB,EAAA2xI,EAAO/1F,QAAU,SAAiBzyC,EAAID,GACpC,OAAOlK,EAAKsB,SAAS6I,EAAID,IAG3B,EAAAyoI,EAAOz3F,QAAU,SAAiBl6C,GAChC,OAAOA,EAAMT,KAGf,EAAAoyI,EAAOv3F,SAAW,SAAkBp6C,GAClC,OAAOA,EAAMR,MAGf,EAAAmyI,EAAO5uH,QAAU,SAAiB/W,EAAMC,GACtC,OAAOD,EAAKxJ,IAAIyJ,IAGlB,EAAA0lI,EAAOxuH,QAAU,SAAiBnX,EAAMC,GACtC,OAAOD,EAAKtI,IAAIuI,IAGlB,EAAA0lI,EAAOpuH,QAAU,SAAiBvX,EAAMC,GACtC,OAAOD,EAAKzJ,IAAI0J,IAGlB,EAAA0lI,EAAOU,QAAU,SAAiBrmI,EAAMC,GACtC,IAAIqmI,EAAUrmI,EAAM1M,IAChBgzI,EAAUtmI,EAAMzM,KACpB,GAAI+yI,GAAW,EAAG,CAChB,GAAIA,EAAU,EACZ,OAAIvmI,EAAK1I,GAAG,EAAAquI,EAAOS,aACA,EAAVE,EAActmI,EAAOhN,EAAK6D,IAE5BmJ,EAAK1I,GAAGtE,EAAK6D,KAAOmJ,EAAOhN,EAAK0B,KAEzC,GAAe,GAAX4xI,EAAc,OAAOtzI,EAAK6D,IAC9B,GAAe,GAAXyvI,EAAc,OAAOtmI,EACzB,GAAe,GAAXsmI,EAAc,OAAOtmI,EAAKzJ,IAAIyJ,GAGpC,IADA,IAAI/J,EAASjD,EAAK6D,IACXyvI,EAAUC,GACD,EAAVD,IAAarwI,EAASA,EAAOM,IAAIyJ,IACrCC,EAAQA,EAAM3E,KAAK,GACnB0E,EAAQA,EAAKzJ,IAAIyJ,GACjBsmI,EAAUrmI,EAAM1M,IAChBgzI,EAAUtmI,EAAMzM,KAElB,OAAOyC,GAGT,EAAA0vI,EAAOa,QAAU,SAAiBxmI,EAAMC,GACtC,OAAOD,EAAKxI,IAAIyI,IAGlB,EAAA0lI,EAAO9tH,UAAY,SAAmB7X,EAAMC,GAC1C,OAAOD,EAAK3E,aAAa7D,IAAIyI,EAAM5E,cAAcyB,YAGnD,EAAA6oI,EAAOc,QAAU,SAAiBzmI,EAAMC,GACtC,OAAOD,EAAK3D,IAAI4D,IAGlB,EAAA0lI,EAAOe,UAAY,SAAmB1mI,EAAMC,GAC1C,OAAOD,EAAK3E,aAAagB,IAAI4D,EAAM5E,cAAcyB,YAGnD,EAAA6oI,EAAOgB,QAAU,SAAiB3mI,EAAMC,GACtC,OAAOD,EAAK1D,IAAI2D,IAGlB,EAAA0lI,EAAOiB,OAAS,SAAgB5mI,EAAMC,GACpC,OAAOD,EAAKzD,GAAG0D,IAGjB,EAAA0lI,EAAOkB,QAAU,SAAiB7mI,EAAMC,GACtC,OAAOD,EAAKxD,IAAIyD,IAGlB,EAAA0lI,EAAOnF,QAAU,SAAiBxgI,EAAMC,GACtC,OAAOD,EAAKxE,IAAIyE,IAGlB,EAAA0lI,EAAOmB,QAAU,SAAiB9mI,EAAMC,GACtC,OAAOD,EAAKzE,IAAI0E,IAGlB,EAAA0lI,EAAO1gF,UAAY,SAAmBjlD,EAAMC,GAC1C,OAAOD,EAAK1E,KAAK2E,IAGnB,EAAA0lI,EAAOoB,QAAU,SAAiB/yI,GAChC,OAAOA,EAAM4F,OAGf,EAAA+rI,EAAOqB,OAAS,SAAgBhnI,EAAMC,GACpC,OAAOD,EAAK1I,GAAG2I,IAGjB,EAAA0lI,EAAOsB,OAAS,SAAgBjnI,EAAMC,GACpC,OAAOD,EAAKpH,GAAGqH,IAGjB,EAAA0lI,EAAO9gF,OAAS,SAAgB7kD,EAAMC,GACpC,OAAOD,EAAK5G,GAAG6G,IAGjB,EAAA0lI,EAAOhhF,UAAY,SAAmB3wD,EAAO28D,GAC3CtoD,OAAOsoD,GAA8C,IAAhCA,EAAaA,EAAY,IAC9C,IAAIp0B,EAAOvpC,EAAKmB,QAAQw8D,EAAY,GACpC,OAAO38D,EAAMwC,IAAI+lC,GAAMjgC,IAAIigC,EAAK3iC,QAGlC,EAAA+rI,EAAO7L,UAAY,SAAmB9lI,GACpC,OAAsB,IAAfA,EAAMR,MAAeQ,EAAMT,KAAO,GAAKS,EAAMT,KAAOygB,GAAGjf,YACvC,IAAhBf,EAAMR,MAAgBQ,EAAMT,KAAOygB,GAAGlf,WAAad,EAAMT,IAAM,GAGxE,EAAAoyI,EAAO3L,WAAa,SAAoBhmI,GACtC,OAAsB,IAAfA,EAAMR,MAAeQ,EAAMT,KAAO,GAAKS,EAAMT,KAAO0gB,IAAIlf,YACxC,IAAhBf,EAAMR,MAAgBQ,EAAMT,KAAO0gB,IAAInf,WAAad,EAAMT,IAAM,GAGzE,EAAAoyI,EAAO13F,WAAa,SAAoBj6C,GACtC,OAAuB,IAAfA,EAAMR,MAAcQ,EAAMT,KAAO,IACjB,IAAhBS,EAAMR,MAAeQ,EAAMT,IAAM,GAG3C,EAAAoyI,EAAO5L,UAAY,SAAmB/lI,GACpC,OAAsB,IAAfA,EAAMR,MAAeQ,EAAMT,MAAQ,GAAM8gB,GAAGtf,WAGrD,EAAA4wI,EAAO1L,WAAa,SAAoBjmI,GACtC,OAAsB,IAAfA,EAAMR,MAAeQ,EAAMT,MAAQ,GAAM+gB,IAAIvf,WAGtD,EAAA4wI,EAAOx3F,WAAa,SAAoBn6C,GACtC,OAAsB,IAAfA,EAAMR,MAGf,EAAAmyI,EAAOzL,YAAc,SAAqBlmI,GACxC,OAA2C,IAAnCA,EAAMR,MAAoB,EAAZQ,EAAMT,MAG9B,MAAM2zI,EAAal0I,EAAKuB,WAAWogB,IAAIwyH,kBACjCC,EAAap0I,EAAKuB,WAAWogB,IAAI0yH,kBAEvC,EAAA1B,EAAO2B,WAAa,SAAoBtzI,GACtC,OAAOA,EAAMsF,IAAI4tI,IAAelzI,EAAMiF,IAAImuI,IAG5C,MAAMG,EAAav0I,EAAKuB,WAAWqgB,IAAIuyH,kBACjCK,EAAax0I,EAAKuB,WAAWqgB,IAAIyyH,kBAEvC,EAAA1B,EAAO8B,WAAa,SAAoBzzI,GACtC,OAAOA,EAAMsF,IAAIiuI,IAAevzI,EAAMiF,IAAIuuI,IAG5C,EAAA7B,EAAO5zD,WAAa,SAAoB/9E,GACtC,OAAO,EAAA2xI,EAAOtwI,KAAKqyI,OAAO1zI,EAAMkD,aAGlC,EAAAyuI,EAAO3zD,WAAa,SAAoBh+E,GACtC,OAAOA,EAAMkD,YAGf,EAAAyuI,EAAO5gF,cAAgB,SAAuB/wD,EAAOP,GACnD,OAAOA,EAAWO,EAAMqH,aAAalE,WAAanD,EAAMmD,a,cCpL1D,IAAIwwI,EAAgC,oBAAXC,QAA0BA,aAA4B,IAAX,EAAAjC,GAA0B,EAAAA,GAAU9yI,KAExG80I,EAAY3tF,WAAa,EACzB2tF,EAAYztF,eAAgB,EAC5BytF,EAAYxtF,gBAAkB,EAC9BwtF,EAAYttF,mBAAqB,EACjCstF,EAAYrtF,iBAAmB,EAC/BqtF,EAAYE,4BAA6B,EACzCF,EAAYjtF,4BAA6B,EACzCitF,EAAY9sF,yBAA0B,EACtC8sF,EAAY7sF,kBAAmB,EAC/B6sF,EAAY5sF,qBAAsB,EAElC,IAAI1J,EAAM,IAAItiB,aAAa,GACvB6sB,EAAM,IAAIjtB,YAAY0iB,EAAIqf,QA0J9B,SAASo3E,IACHnyI,MAAMoyI,kBACRpyI,MAAMoyI,kBAAkBj1I,KAAMg1I,GAE9Bh1I,KAAKywF,MAAQzwF,KAAKiL,KAAO,KAAOjL,KAAKklE,QAAU,MAAO,IAAIriE,OAAQ4tF,MAWtE,SAASykD,EAAehwE,GACtBllE,KAAKklE,QAAUA,GAAW,mBACtBriE,MAAMoyI,kBACRpyI,MAAMoyI,kBAAkBj1I,KAAMk1I,GAE9Bl1I,KAAKywF,MAAQzwF,KAAKiL,KAAO,KAAOjL,KAAKklE,QAAU,MAAO,IAAIriE,OAAQ4tF,MAuEtE,SAAS0kD,EAAkBj6D,EAAGC,GAC5B,GAAID,IAAMC,EAAG,CACX,GAAU,IAAND,EAAS,OAAO,EACpBA,EAAI,EAAIA,EAAGC,EAAI,EAAIA,MACd,CACL,IAAIi6D,EAAOl6D,GAAKA,EAAGm6D,EAAOl6D,GAAKA,EAC/B,GAAIi6D,EAAOC,EAAM,OAAOD,EAAOC,EACtB,MAALn6D,IAAWA,EAAI1xB,OAAO0xB,IACjB,MAALC,IAAWA,EAAI3xB,OAAO2xB,IAE5B,OAAOD,EAAIC,EAAI,GAAK,EA7PtBn6E,OAAOs0I,iBACLT,EAAgB,GAAI,SAAY3zI,GAAS,OAAOA,GAAS,IAAM,IAC/D,CACE,UAAa,CAAEA,OAAQ,IAAKq0I,UAAU,GACtC,UAAa,CAAEr0I,MAAQ,IAAKq0I,UAAU,KAI1Cv0I,OAAOs0I,iBACLT,EAAiB,IAAI,SAAa3zI,GAAS,OAAOA,GAAS,IAAM,IACjE,CACE,UAAa,CAAEA,OAAQ,MAAOq0I,UAAU,GACxC,UAAa,CAAEr0I,MAAQ,MAAOq0I,UAAU,KAI5Cv0I,OAAOs0I,iBACLT,EAAiB,IAAIA,EAAmB,MAAI,SAAa3zI,GAAS,OAAe,EAARA,GACzE,CACE,UAAa,CAAEA,OAAQ,WAAYq0I,UAAU,GAC7C,UAAa,CAAEr0I,MAAQ,WAAYq0I,UAAU,KAIjDv0I,OAAOs0I,iBACLT,EAAgB,GAAI,SAAY3zI,GAAS,OAAe,IAARA,GAChD,CACE,UAAa,CAAEA,MAAS,EAAGq0I,UAAU,GACrC,UAAa,CAAEr0I,MAAO,IAAKq0I,UAAU,KAIzCv0I,OAAOs0I,iBACLT,EAAiB,IAAI,SAAa3zI,GAAS,OAAe,MAARA,GAClD,CACE,UAAa,CAAEA,MAAW,EAAGq0I,UAAU,GACvC,UAAa,CAAEr0I,MAAO,MAAOq0I,UAAU,KAI3Cv0I,OAAOs0I,iBACLT,EAAiB,IAAIA,EAAmB,MAAI,SAAa3zI,GAAS,OAAOA,IAAU,GACnF,CACE,UAAa,CAAEA,MAAgB,EAAGq0I,UAAU,GAC5C,UAAa,CAAEr0I,MAAO,WAAYq0I,UAAU,KAIhDv0I,OAAOs0I,iBACLT,EAAkB,KAAI,SAAc3zI,GAAS,QAASA,GACtD,CACE,UAAa,CAAEA,OAAO,EAAOq0I,UAAU,GACvC,UAAa,CAAEr0I,OAAO,EAAOq0I,UAAU,KAI3Cv0I,OAAOs0I,iBACLT,EAAiB,IAAI,SAAa3zI,GAAS,OAAOqB,KAAKqyI,OAAO1zI,IAC9D,CACE,QAAa,CAAEA,MAAO,sBAAwBq0I,UAAU,GACxD,UAAa,CAAEr0I,MAAO,qBAAwBq0I,UAAU,GACxD,UAAa,CAAEr0I,MAAO,qBAAwBq0I,UAAU,GACxD,iBAAqB,CAAEr0I,MAAQ,sBAAwBq0I,UAAU,GACjE,iBAAqB,CAAEr0I,OAAQ,SAAUq0I,UAAU,GACnD,iBAAqB,CAAEr0I,MAAQ,SAAUq0I,UAAU,GACnD,kBAAqB,CAAEr0I,MAAQs0I,IAAUD,UAAU,GACnD,kBAAqB,CAAEr0I,OAAQs0I,IAAUD,UAAU,GACnD,IAAO,CAAEr0I,MAAOu0I,IAAKF,UAAU,KAInCv0I,OAAOs0I,iBACLT,EAAiB,IAAI,SAAa3zI,GAAS,OAAQA,GACnD,CACE,QAAa,CAAEA,MAAO,qBAAyBq0I,UAAU,GACzD,UAAa,CAAEr0I,MAAwB,OAAQq0I,UAAU,GACzD,UAAa,CAAEr0I,MAAO,sBAAyBq0I,UAAU,GACzD,iBAAqB,CAAEr0I,MAAQ,uBAAyBq0I,UAAU,GAClE,iBAAqB,CAAEr0I,OAAQ,iBAAkBq0I,UAAU,GAC3D,iBAAqB,CAAEr0I,MAAQ,iBAAkBq0I,UAAU,GAC3D,kBAAqB,CAAEr0I,MAAQs0I,IAAUD,UAAU,GACnD,kBAAqB,CAAEr0I,OAAQs0I,IAAUD,UAAU,GACnD,IAAO,CAAEr0I,MAAOu0I,IAAKF,UAAU,KAInCV,EAAiB,IAAItyI,KAAKmzI,MAE1Bb,EAAiB,IAAI,SAAa3zI,GAChC,IAAIu6F,EAAIl5F,KAAKmzI,MAAMx0I,GAASA,GAC5B,OAAOA,EAAQ,GAAKu6F,EAAIA,GAG1Bo5C,EAAoB,OAAI,SAAgB3zI,GAGtC,OAAiD,WADjDA,GAAiB,WADjBA,GAASA,IAAU,EAAI,cACSA,IAAU,EAAI,aAC3BA,IAAU,GAAM,aAA8B,IAGnE2zI,EAAkB,KAAI,SAAc3zI,EAAOygD,GAEzC,OAAQzgD,IADRygD,GAAS,IACkBzgD,IAAW,GAAKygD,GAG7CkzF,EAAkB,KAAI,SAAc3zI,EAAOygD,GAEzC,OAAQzgD,KADRygD,GAAS,IACmBzgD,GAAU,GAAKygD,GAG7CkzF,EAAiB,IAAItyI,KAAK6c,IAE1By1H,EAAiB,IAAItyI,KAAKoG,IAE1BksI,EAAiB,IAAItyI,KAAKe,IAE1BuxI,EAAkB,KAAItyI,KAAKuG,KAE3B+rI,EAAmB,MAAItyI,KAAKqG,MAG5BisI,EAAqB,QAAI,SAAiB3zI,GACxC,MAA4C,KAAxCqB,KAAK6c,IAAIle,EAAQqB,KAAKkd,MAAMve,IACvB,EAAMqB,KAAKozI,MAAc,GAARz0I,GAEnBqB,KAAKozI,MAAMz0I,IAGpB2zI,EAAoB,OAAI,SAAgBxjI,EAAQC,EAAStC,GACvD,OAAOA,EAAYqC,EAASC,GAG9BujI,EAAkB,KAAItyI,KAAKid,KAE3Bq1H,EAAmB,MAAItyI,KAAKkd,MAE5Bo1H,EAAsB,SAAI,SAAkBrD,EAAGoE,GAC7C,OAAOrzI,KAAK6c,IAAIoyH,GAAKjvI,KAAKszI,KAAKD,IAGjCf,EAAmB,MAAI,SAAe3zI,GACpC,IAAIg6E,EAAIh6E,GAAS,EAAI,SACjBi6E,GAAa,SAARj6E,IAAuB,EAIhC,OAFAg6E,GADAh6E,EAAQg6E,EAAIC,IACC,GAAK,QAClBA,GAAa,MAARj6E,IAAuB,KAI9B2zI,EAAqB,QAAI,SAAiB3zI,GACxC,OAASA,GAAS,EAAK,MAAYA,GAAS,EAAK,IAAmB,WAARA,GAU9D8zI,EAAiBl0I,UAAYE,OAAOstD,OAAOzrD,MAAM/B,WACjDk0I,EAAiBl0I,UAAUmK,KAAO,mBAClC+pI,EAAiBl0I,UAAUokE,QAAU,cAErC2vE,EAAyB,YAAI,WAC3B,MAAM,IAAIG,GAWZE,EAAep0I,UAAYE,OAAOstD,OAAOzrD,MAAM/B,WAC/Co0I,EAAep0I,UAAUmK,KAAO,iBAEhC4pI,EAAoB,OAAI,SAAgBiB,EAAW5wE,GACjD,GAAI4wE,EAAW,OAAOA,EACtB,MAAM,IAAIZ,EAAehwE,IAG3B2vE,EAAwB,WAAI,SAAoB3zI,GAC9C,OAAOA,GAGTsoD,OAAsB,cAAI,SAAuBggD,GAC/C,MAAMusC,EAAY,KACZz4H,EAAMksF,EAAI5mG,OAChB,GAAI0a,GAAOy4H,EACT,OAAOvsF,OAAOsjF,aAAakJ,MAAMxsF,OAAQggD,GAE3C,IAAI/qE,EAAQ,EACRw3G,EAAQ,GACZ,KAAOx3G,EAAQnhB,GACb24H,GAASzsF,OAAOsjF,aAAakJ,MAC3BxsF,OACAggD,EAAI9tB,MAAMj9C,EAAOl8B,KAAKe,IAAIm7B,EAAQs3G,EAAWz4H,KAE/CmhB,GAASs3G,EAEX,OAAOE,GAGTzsF,OAAuB,eAAI,SAAwBggD,GACjD,MAAMusC,EAAY,KACZz4H,EAAMksF,EAAI5mG,OAChB,GAAI0a,GAAOy4H,EACT,OAAOvsF,OAAO0sF,cAAcF,MAAMxsF,OAAQggD,GAE5C,IAAI/qE,EAAQ,EACRw3G,EAAQ,GACZ,KAAOx3G,EAAQnhB,GACb24H,GAASzsF,OAAO0sF,cAAcF,MAC5BxsF,OACAggD,EAAI9tB,MAAMj9C,EAAOl8B,KAAKe,IAAIm7B,EAAQs3G,EAAWz4H,KAE/CmhB,GAASs3G,EAEX,OAAOE,GAGJzsF,OAAO1oD,UAAUq1I,IACpBn1I,OAAOC,eAAeuoD,OAAO1oD,UAAW,KAAM,CAC5CI,MAAO,SAAYu9B,GACjB,OAAOz+B,KAAKo2I,OAAO33G,GAAS,EAAIA,EAAQA,EAAQz+B,KAAK4C,SAEvDyzI,cAAc,IAIb7sF,OAAO1oD,UAAUytI,YACpBvtI,OAAOC,eAAeuoD,OAAO1oD,UAAW,aAAc,CACpDI,MAAO,SAAoB0nH,EAAQ0tB,GACjC,IAAIluI,EAAMpI,KAAKu2I,MAAM3tB,GAAQ7wG,KAAKu+H,GAElC,OADK1tB,EAAOhmH,SAAQwF,EAAMkuI,EAAaluI,EAAMkuI,GACtCluI,GAETiuI,cAAc,IAiBlB,MAAMG,EAAYp9H,MAAMtY,UAAU21I,KAClCr9H,MAAMtY,UAAU21I,KAAO,SAAcC,GACnC,OAAOF,EAAU5+F,KAAK53C,KAAM02I,GAAcvB,IAG5C,CAAE/7H,MACAqiB,kBACAl7B,WAAYi7B,UACZG,YAAaD,WACbG,YAAaD,WACbI,aAAcC,cACd06G,SAAQC,IACHA,EAAI91I,UAAUq1I,IACjBn1I,OAAOC,eAAe21I,EAAI91I,UAAW,KAAM,CACzCI,MAAO,SAAYu9B,GACjB,OAAOz+B,KAAKy+B,GAAS,EAAIA,EAAQA,EAAQz+B,KAAK4C,SAEhDyzI,cAAc,OAKpBxB,EAAuB,UAAIgC,OAAO34H,UAElC22H,EAAqB,QAAI,SAAiBtvD,GACxC,MAAsB,iBAARA,GAGhBsvD,EAAwB,WAAI,SAAoBtvD,GAC9C,OAAO,GAGTsvD,EAAyB,YAAI,SAAqBtvD,GAChD,MAAsB,iBAARA,GAAmC,iBAARA,GAG3CsvD,EAAwB,WAAI,SAAoBtvD,GAC9C,MAAsB,mBAARA,GAGhBsvD,EAAsB,SAAI,SAAkBtvD,GAC1C,MAAsB,iBAARA,GAAoBA,aAAe/7B,QAGnDqrF,EAAqB,QAAIz7H,MAAMoF,QAC/Bq2H,EAAyB,YAAI,SAAqB9tG,GAChD,OAAOA,GACc,iBAATA,GACgB,iBAAhBA,EAAKnkC,QACZmkC,EAAKnkC,QAAU,GACfL,KAAKkd,MAAMsnB,EAAKnkC,UAAYmkC,EAAKnkC,QAGxCiyI,EAAuB,UAAI,SAAmB9tG,GAC5C,YAAuB,IAATA,GAGhB8tG,EAAwB,WAAI,SAAoB9tG,GAC9C,OAAO,GAGT8tG,EAAuB,UAAI,SAAmB9tG,GAC5C,OAAOA,GAGT8tG,EAAkB,KAAI,SAAcrD,EAAGoE,GACrC,OAAOpE,EAAIoE,GAGbf,EAAmB,MAAI,SAAerD,EAAGoE,GACvC,OAAOrzI,KAAKqyI,OAAOpD,EAAIoE,IAGzBf,EAAoB,OAAItyI,KAExBvB,OAAOs0I,iBAAiBT,EAAoB,OAAG,CAC7CiC,WAAY,CAAE51I,MAAO,EAAKq0I,UAAU,GACpCwB,WAAY,CAAE71I,MAAO,EAAKq0I,UAAU,GACpCyB,QAAS,CACP91I,MAAO,SAAiBswI,GACV,OAAZjzF,EAAI,GAAKizF,EAAUyF,QAAQnuF,EAAI,KAAO,MAG1CouF,OAAQ,CACNh2I,MAAO,SAAgBswI,GACrBxxI,KAAK82I,WAAav0I,KAAK40I,IAAI3F,GAC3BxxI,KAAK+2I,WAAax0I,KAAK60I,IAAI5F,KAG/B6F,KAAM,CACJn2I,MAAO,SAAcswI,GACnB,OAAOjvI,KAAKC,IAAI,EAAGgvI,OAKzBqD,EAAuB,UAAI,aAE3BA,EAAmB,MAAI,SAAS3vE,EAAS0V,GACnCA,IAAG1V,GAAW9rD,MAAMtY,UAAU46E,MAAM9jC,KAAK0/F,UAAW,EAAG,EAAI18D,IAC/D28D,QAAQj6G,MAAM,UAAY4nC,IAG5BlkE,OAAOC,eAAeu6B,UAAW,OAAQ,CACvCt6B,MAAO,SAAc08D,EAAQ45E,EAAY50I,GACvC,OAAO,IAAI44B,UAAUoiC,EAAQ45E,EAAY50I,MAI7C5B,OAAOC,eAAeV,WAAY,OAAQ,CACxCW,MAAO,SAAc08D,EAAQ45E,EAAY50I,GACvC,OAAO,IAAIrC,WAAWq9D,EAAQ45E,EAAY50I,MAI9C5B,OAAOC,eAAew6B,kBAAmB,OAAQ,CAC/Cv6B,MAAO,SAAc08D,EAAQ45E,EAAY50I,GACvC,OAAO,IAAI64B,kBAAkBmiC,EAAQ45E,EAAY50I,MAIrD5B,OAAOC,eAAey6B,WAAY,OAAQ,CACxCx6B,MAAO,SAAc08D,EAAQ45E,EAAY50I,GACvC,OAAO,IAAI84B,WAAWkiC,EAAQ45E,EAAY50I,MAI9C5B,OAAOC,eAAe06B,YAAa,OAAQ,CACzCz6B,MAAO,SAAc08D,EAAQ45E,EAAY50I,GACvC,OAAO,IAAI+4B,YAAYiiC,EAAQ45E,EAAY50I,MAI/C5B,OAAOC,eAAe26B,WAAY,OAAQ,CACxC16B,MAAO,SAAc08D,EAAQ45E,EAAY50I,GACvC,OAAO,IAAIg5B,WAAWgiC,EAAQ45E,EAAY50I,MAI9C5B,OAAOC,eAAe46B,YAAa,OAAQ,CACzC36B,MAAO,SAAc08D,EAAQ45E,EAAY50I,GACvC,OAAO,IAAIi5B,YAAY+hC,EAAQ45E,EAAY50I,MAI/C5B,OAAOC,eAAe+6B,aAAc,OAAQ,CAC1C96B,MAAO,SAAc08D,EAAQ45E,EAAY50I,GACvC,OAAO,IAAIo5B,aAAa4hC,EAAQ45E,EAAY50I,MAIhD5B,OAAOC,eAAeg7B,aAAc,OAAQ,CAC1C/6B,MAAO,SAAc08D,EAAQ45E,EAAY50I,GACvC,OAAO,IAAIq5B,aAAa2hC,EAAQ45E,EAAY50I,O,qBC3ahDjD,EAAOD,QAAUO,ICCbw3I,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUj4I,QAG3C,IAAIC,EAAS83I,EAAyBE,GAAY,CAGjDj4I,QAAS,IAOV,OAHAk4I,EAAoBD,GAAU//F,KAAKj4C,EAAOD,QAASC,EAAQA,EAAOD,QAASg4I,GAGpE/3I,EAAOD,Q,OCpBfg4I,EAAoB7E,EAAI,WACvB,GAA0B,iBAAfgF,WAAyB,OAAOA,WAC3C,IACC,OAAO73I,MAAQ,IAAIk7B,SAAS,cAAb,GACd,MAAO16B,GACR,GAAsB,iBAAXs0I,OAAqB,OAAOA,QALjB,GCExB4C,EAAoB,KAEMA,EAAoB,M","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__911__) {\nreturn ","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  OMITTED,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: Expression[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createOmittedExpression(\n    range: Range\n  ): OmittedExpression {\n    return new OmittedExpression(range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  private isAccessOn(kind: NodeKind): bool {\n    let node = changetype<Node>(this);\n    if (node.kind == NodeKind.CALL) {\n      node = (<CallExpression>node).expression;\n    }\n    if (node.kind == NodeKind.PROPERTYACCESS) {\n      let target = (<PropertyAccessExpression>node).expression;\n      if (target.kind == kind) return true;\n    }\n    return false;\n  }\n\n  /** Checks if this node accesses a method or property on `this`. */\n  get isAccessOnThis(): bool {\n    return this.isAccessOn(NodeKind.THIS);\n  }\n\n  /** Checks if this node accesses a method or property on `super`. */\n  get isAccessOnSuper(): bool {\n    return this.isAccessOn(NodeKind.SUPER);\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents an omitted expression, e.g. within an array literal. */\nexport class OmittedExpression extends Expression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.OMITTED, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, new Range(0, text.length));\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.range.source = this;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Remembered column number. */\n  private lineColumn: i32 = 1;\n\n  /** Determines the line number at the specified position. Starts at `1`. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. Starts at `1`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = normalizedPath;\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  RefIsOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype,\n  Class\n} from \"./program\";\n\nimport {\n  findUsedLocals,\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const add = \"~lib/builtins/add\";\n  export const sub = \"~lib/builtins/sub\";\n  export const mul = \"~lib/builtins/mul\";\n  export const div = \"~lib/builtins/div\";\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_add = \"~lib/builtins/i32.add\";\n  export const i64_add = \"~lib/builtins/i64.add\";\n  export const f32_add = \"~lib/builtins/f32.add\";\n  export const f64_add = \"~lib/builtins/f64.add\";\n  export const i32_sub = \"~lib/builtins/i32.sub\";\n  export const i64_sub = \"~lib/builtins/i64.sub\";\n  export const f32_sub = \"~lib/builtins/f32.sub\";\n  export const f64_sub = \"~lib/builtins/f64.sub\";\n  export const i32_mul = \"~lib/builtins/i32.mul\";\n  export const i64_mul = \"~lib/builtins/i64.mul\";\n  export const f32_mul = \"~lib/builtins/f32.mul\";\n  export const f64_mul = \"~lib/builtins/f64.mul\";\n  export const i32_div_s = \"~lib/builtins/i32.div_s\";\n  export const i32_div_u = \"~lib/builtins/i32.div_u\";\n  export const i64_div_s = \"~lib/builtins/i64.div_s\";\n  export const i64_div_u = \"~lib/builtins/i64.div_u\";\n  export const f32_div = \"~lib/builtins/f32.div\";\n  export const f64_div = \"~lib/builtins/f64.div\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_load8x8_s = \"~lib/builtins/v128.load8x8_s\";\n  export const v128_load8x8_u = \"~lib/builtins/v128.load8x8_u\";\n  export const v128_load16x4_s = \"~lib/builtins/v128.load16x4_s\";\n  export const v128_load16x4_u = \"~lib/builtins/v128.load16x4_u\";\n  export const v128_load32x2_s = \"~lib/builtins/v128.load32x2_s\";\n  export const v128_load32x2_u = \"~lib/builtins/v128.load32x2_u\";\n  export const v128_load8_splat = \"~lib/builtins/v128.load8_splat\";\n  export const v128_load16_splat = \"~lib/builtins/v128.load16_splat\";\n  export const v128_load32_splat = \"~lib/builtins/v128.load32_splat\";\n  export const v128_load64_splat = \"~lib/builtins/v128.load64_splat\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_sat = \"~lib/builtins/v128.add_sat\";\n  export const v128_sub_sat = \"~lib/builtins/v128.sub_sat\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_ceil = \"~lib/builtins/v128.ceil\";\n  export const v128_floor = \"~lib/builtins/v128.floor\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n  export const v128_nearest = \"~lib/builtins/v128.nearest\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_extend_low = \"~lib/builtins/v128.extend_low\";\n  export const v128_extend_high = \"~lib/builtins/v128.extend_high\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_sat_s = \"~lib/builtins/i8x16.add_sat_s\";\n  export const i8x16_add_sat_u = \"~lib/builtins/i8x16.add_sat_u\";\n  export const i8x16_sub_sat_s = \"~lib/builtins/i8x16.sub_sat_s\";\n  export const i8x16_sub_sat_u = \"~lib/builtins/i8x16.sub_sat_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n  export const i8x16_shuffle = \"~lib/builtins/i8x16.shuffle\";\n  export const i8x16_swizzle = \"~lib/builtins/i8x16.swizzle\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_sat_s = \"~lib/builtins/i16x8.add_sat_s\";\n  export const i16x8_add_sat_u = \"~lib/builtins/i16x8.add_sat_u\";\n  export const i16x8_sub_sat_s = \"~lib/builtins/i16x8.sub_sat_s\";\n  export const i16x8_sub_sat_u = \"~lib/builtins/i16x8.sub_sat_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_extend_low_i8x16_s = \"~lib/builtins/i16x8.extend_low_i8x16_s\";\n  export const i16x8_extend_low_i8x16_u = \"~lib/builtins/i16x8.extend_low_i8x16_u\";\n  export const i16x8_extend_high_i8x16_s = \"~lib/builtins/i16x8.extend_high_i8x16_s\";\n  export const i16x8_extend_high_i8x16_u = \"~lib/builtins/i16x8.extend_high_i8x16_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_extend_low_i16x8_s = \"~lib/builtins/i32x4.extend_low_i16x8_s\";\n  export const i32x4_extend_low_i16x8_u = \"~lib/builtins/i32x4.extend_low_i16x8_u\";\n  export const i32x4_extend_high_i16x8_s = \"~lib/builtins/i32x4.extend_high_i16x8_s\";\n  export const i32x4_extend_high_i16x8_u = \"~lib/builtins/i32x4.extend_high_i16x8_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\";\n  export const i64x2_mul = \"~lib/builtins/i64x2.mul\";\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\";\n  export const i64x2_eq = \"~lib/builtins/i64x2.eq\";\n  export const i64x2_ne = \"~lib/builtins/i64x2.ne\";\n  export const i64x2_lt_s = \"~lib/builtins/i64x2.lt_s\";\n  export const i64x2_lt_u = \"~lib/builtins/i64x2.lt_u\";\n  export const i64x2_le_s = \"~lib/builtins/i64x2.le_s\";\n  export const i64x2_le_u = \"~lib/builtins/i64x2.le_u\";\n  export const i64x2_gt_s = \"~lib/builtins/i64x2.gt_s\";\n  export const i64x2_gt_u = \"~lib/builtins/i64x2.gt_u\";\n  export const i64x2_ge_s = \"~lib/builtins/i64x2.ge_s\";\n  export const i64x2_ge_u = \"~lib/builtins/i64x2.ge_u\";\n  export const i64x2_extend_low_i32x4_s = \"~lib/builtins/i64x2.extend_low_i32x4_s\";\n  export const i64x2_extend_low_i32x4_u = \"~lib/builtins/i64x2.extend_low_i32x4_u\";\n  export const i64x2_extend_high_i32x4_s = \"~lib/builtins/i64x2.extend_high_i32x4_s\";\n  export const i64x2_extend_high_i32x4_u = \"~lib/builtins/i64x2.extend_high_i32x4_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n  export const f32x4_floor = \"~lib/builtins/f32x4.floor\";\n  export const f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n  export const f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n  export const f64x2_floor = \"~lib/builtins/f64x2.floor\";\n  export const f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n  export const f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n\n  export const i31_new = \"~lib/builtins/i31.new\";\n  export const i31_get = \"~lib/builtins/i31.get\";\n\n  // internals\n  export const data_end = \"~lib/memory/__data_end\";\n  export const stack_pointer = \"~lib/memory/__stack_pointer\";\n  export const heap_base = \"~lib/memory/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n  export const tostack = \"~lib/rt/__tostack\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/function.ts\n  export const Function = \"~lib/function/Function\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Provided this operand, if any. */\n    public thisOperand: Expression | null,\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n/** Function builtins map. */\nexport const function_builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFloatValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isBooleanValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isSignedIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isAssignableTo(compiler.program.stringInstance)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.extends(compiler.program.arrayPrototype)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isArrayLike\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFunction ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isNullableReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element !== null ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classReference = type.getClassOrWrapper(compiler.program);\n  if (!classReference) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.isIntegerValue && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.isIntegerValue && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classReference.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classReference.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classReference.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.isInternalReference) {\n    let classReference = resultType.getClass();\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      assert(resultType.getSignature());\n      value = \"Function\";\n    }\n  } else {\n    value = resultType.toString();\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  let signatureReference = type.getSignature();\n  if (signatureReference) {\n    return module.i32(signatureReference.id);\n  }\n  let classReference = type.getClassOrWrapper(compiler.program);\n  if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n    return module.i32(classReference.id);\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8: // not wrapped\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value << (shift & mask)) | (value >>> ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_tee(temp1.index, arg0, false), // i32\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1, false), // i32\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_get(temp1.index, NativeType.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, NativeType.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value >>> (shift & mask)) | (value << ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_tee(temp1.index, arg0, false), // i32\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1, false), // i32\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_get(temp1.index, NativeType.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, NativeType.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0, false), // i32\n                module.i32(31)\n              ),\n              false // i32\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0, false), // i32/i64\n                isWasm64 ? module.i64(63) : module.i32(31)\n              ),\n              false // i32/i64\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0, false), // i64\n                module.i64(63)\n              ),\n              false // i64\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0, false), // numeric\n        module.local_tee(temp2.index, arg1, false), // numeric\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0, false), // numeric\n        module.local_tee(temp2.index, arg1, false), // numeric\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0, false), // f32\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0, false), // f64\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0, false), // f32\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0, false), // f64\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.isSignedIntegerValue,\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// add<T?>(left: T, right: T) -> T\nfunction builtin_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeAdd(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"add\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.add, builtin_add);\n\n// sub<T?>(left: T, right: T) -> T\nfunction builtin_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeSub(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"sub\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sub, builtin_sub);\n\n// mul<T?>(left: T, right: T) -> T\nfunction builtin_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeMul(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"mul\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.mul, builtin_mul);\n\n// div<T?>(left: T, right: T) -> T\nfunction builtin_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeDiv(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"div\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.div, builtin_div);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue|| // float to int\n      inType.size < type.size  // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    arg2 = compiler.convertExpression(arg2, inType, type, false, operands[2]);\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType, // ^\n    operands[2]\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.memory_size();\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  return module.memory_grow(compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.CONV_IMPLICIT));\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.isValue) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = compiler.compileExpression(elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType, elementExpression);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addAlignedMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addAlignedMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === GC =====================================================================================\n\nfunction builtin_i31_new(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i31ref;\n  return module.i31_new(arg0);\n}\nbuiltins.set(BuiltinNames.i31_new, builtin_i31_new);\n\nfunction builtin_i31_get(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.i31ref, Constraints.CONV_IMPLICIT);\n  if (ctx.contextualType.is(TypeFlags.UNSIGNED)) {\n    compiler.currentType = Type.u32;\n    return module.i31_get(arg0, false);\n  } else {\n    compiler.currentType = Type.i32;\n    return module.i31_get(arg0, true);\n  }\n}\nbuiltins.set(BuiltinNames.i31_get, builtin_i31_get);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: return module.if(module.ref_is(RefIsOp.RefIsNull, arg0), abort);\n\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0, false), // numeric\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0, false) // i64\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0, type.isManaged)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0, false), // f32\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0, false), // f64\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: {\n        let temp = flow.getTempLocal(type);\n        let ret = module.if(\n          module.ref_is(RefIsOp.RefIsNull,\n            module.local_tee(temp.index, arg0, false) // ref\n          ),\n          abort,\n          module.local_get(temp.index, type.toNativeType())\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// call_indirect<T?>(index: u32, ...args: *[]) -> T\nfunction builtin_call_indirect(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, i32.MAX_VALUE)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var returnType: Type;\n  if (typeArguments) {\n    assert(typeArguments.length);\n    returnType = typeArguments[0];\n  } else {\n    returnType = ctx.contextualType;\n  }\n  var indexArg = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length - 1;\n  var operandExprs = new Array<ExpressionRef>(numOperands);\n  var nativeParamTypes = new Array<NativeType>(numOperands);\n  for (let i = 0; i < numOperands; ++i) {\n    operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.auto);\n    nativeParamTypes[i] = compiler.currentType.toNativeType();\n  }\n  compiler.currentType = returnType;\n  return module.call_indirect(indexArg, operandExprs, createType(nativeParamTypes), returnType.toNativeType());\n}\nbuiltins.set(BuiltinNames.call_indirect, builtin_call_indirect);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.getClass();\n  if (!classInstance) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  var ctor = compiler.ensureConstructor(classInstance, ctx.reportNode);\n  compiler.checkFieldInitialization(classInstance, ctx.reportNode);\n  return compiler.compileInstantiate(ctor, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Function builtins ======================================================================\n\n// Function<T>#call(thisArg: thisof<T> | null, ...args: *[]) -> returnof<T>\nfunction builtin_function_call(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var parent = ctx.prototype.parent;\n  assert(parent.kind == ElementKind.CLASS);\n  var classInstance = <Class>parent;\n  assert(classInstance.prototype == compiler.program.functionPrototype);\n  var typeArguments = assert(classInstance.typeArguments);\n  assert(typeArguments.length == 1);\n  var ftype = typeArguments[0];\n  var signature = assert(ftype.getSignature());\n  var returnType = signature.returnType;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1 + signature.requiredParameters, 1 + signature.parameterTypes.length)\n  ) {\n    compiler.currentType = returnType;\n    return compiler.module.unreachable();\n  }\n  var functionArg = compiler.compileExpression(assert(ctx.thisOperand), ftype, Constraints.CONV_IMPLICIT);\n  var thisOperand = assert(ctx.operands.shift());\n  var thisType = signature.thisType;\n  var thisArg: usize = 0;\n  if (thisType) {\n    thisArg = compiler.compileExpression(thisOperand, thisType, Constraints.CONV_IMPLICIT);\n  } else if (thisOperand.kind != NodeKind.NULL) {\n    compiler.error(\n      DiagnosticCode._this_cannot_be_referenced_in_current_location,\n      thisOperand.range\n    );\n    return compiler.module.unreachable();\n  }\n  return compiler.compileCallIndirect(signature, functionArg, ctx.operands, ctx.reportNode, thisArg, ctx.contextualType == Type.void);\n}\nfunction_builtins.set(\"call\", builtin_function_call);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (type.isValue) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.MulI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.MulI64x2 : BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_sat, builtin_v128_add_sat);\n\n// v128.sub_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_sat, builtin_v128_sub_sat);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.EqI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.EqI64x2 : BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.NeI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.NeI64x2 : BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.LtI64x2, arg0, arg1);\n      case TypeKind.U64: return module.binary(BinaryOp.LtU64x2, arg0, arg1);\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LtI64x2 : BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LtU64x2 : BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.LeI64x2, arg0, arg1);\n      case TypeKind.U64: return module.binary(BinaryOp.LeU64x2, arg0, arg1);\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LeI64x2 : BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LeU64x2 : BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.GtI64x2, arg0, arg1);\n      case TypeKind.U64: return module.binary(BinaryOp.GtU64x2, arg0, arg1);\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GtI64x2 : BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GtU64x2 : BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.GeI64x2, arg0, arg1);\n      case TypeKind.U64: return module.binary(BinaryOp.GeU64x2, arg0, arg1);\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GeI64x2 : BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GeU64x2 : BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.extend_low<T!>(a: v128) -> v128\nfunction builtin_v128_extend_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtendLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtendLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtendLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtendLowU16x8ToU32x4, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ExtendLowI32x4ToI64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ExtendLowU32x4ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extend_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extend_low, builtin_v128_extend_low);\n\n// v128.extend_high<T!>(a: v128) -> v128\nfunction builtin_v128_extend_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtendHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtendHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtendHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtendHighU16x8ToU32x4, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ExtendHighI32x4ToI64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ExtendHighU32x4ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extend_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extend_high, builtin_v128_extend_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(compiler.options.isWasm64 ? UnaryOp.AllTrueI64x2 : UnaryOp.AllTrueI32x4, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.add -> add<i32>\nfunction builtin_i32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_add, builtin_i32_add);\n\n// i64.add -> add<i64>\nfunction builtin_i64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_add, builtin_i64_add);\n\n// f32.add -> add<f32>\nfunction builtin_f32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32_add, builtin_f32_add);\n\n// f64.add -> add<f64>\nfunction builtin_f64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64_add, builtin_f64_add);\n\n// i32.sub -> sub<i32>\nfunction builtin_i32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_sub, builtin_i32_sub);\n\n// i64.sub -> sub<i64>\nfunction builtin_i64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_sub, builtin_i64_sub);\n\n// f32.sub -> sub<f32>\nfunction builtin_f32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sub, builtin_f32_sub);\n\n// f64.sub -> sub<f64>\nfunction builtin_f64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sub, builtin_f64_sub);\n\n// i32.mul -> mul<i32>\nfunction builtin_i32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32_mul, builtin_i32_mul);\n\n// i64.mul -> mul<i64>\nfunction builtin_i64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64_mul, builtin_i64_mul);\n\n// f32.mul -> mul<f32>\nfunction builtin_f32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32_mul, builtin_f32_mul);\n\n// f64.mul -> mul<f64>\nfunction builtin_f64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64_mul, builtin_f64_mul);\n\n// i32.div_s -> div<i32>\nfunction builtin_i32_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_s, builtin_i32_div_s);\n\n// i32.div_u -> div<u32>\nfunction builtin_i32_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.u32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_u, builtin_i32_div_u);\n\n// i64.div_s -> div_s<i64>\nfunction builtin_i64_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_s, builtin_i64_div_s);\n\n// i64.div_u -> div_u<u64>\nfunction builtin_i64_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.u64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_u, builtin_i64_div_u);\n\n// f32.div -> div<f32>\nfunction builtin_f32_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32_div, builtin_f32_div);\n\n// f64.div -> div<f64>\nfunction builtin_f64_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64_div, builtin_f64_div);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.load8x8_s -> v128.load_ext<i8>\nfunction builtin_v128_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8x8_s, builtin_v128_load8x8_s);\n\n// v128.load8x8_u -> v128.load_ext<u8>\nfunction builtin_v128_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8x8_u, builtin_v128_load8x8_u);\n\n// v128.load16x4_s -> v128.load_ext<i16>\nfunction builtin_v128_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16x4_s, builtin_v128_load16x4_s);\n\n// v128.load16x4_u -> v128.load_ext<u16>\nfunction builtin_v128_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16x4_u, builtin_v128_load16x4_u);\n\n// v128.load32x2_s -> v128.load_ext<i32>\nfunction builtin_v128_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32x2_s, builtin_v128_load32x2_s);\n\n// v128.load32x2_u -> v128.load_ext<u32>\nfunction builtin_v128_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32x2_u, builtin_v128_load32x2_u);\n\n// v128.load8_splat -> v128.load_splat<u8>\nfunction builtin_v128_load8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8_splat, builtin_v128_load8_splat);\n\n// v128.load16_splat -> v128.load_splat<u16>\nfunction builtin_v128_load16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16_splat, builtin_v128_load16_splat);\n\n// v128.load32_splat -> v128.load_splat<u32>\nfunction builtin_v128_load32_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_splat, builtin_v128_load32_splat);\n\n// v128.load64_splat -> v128.load_splat<u64>\nfunction builtin_v128_load64_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_splat, builtin_v128_load64_splat);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_sat_s -> v128.add_sat<i8>\nfunction builtin_i8x16_add_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_sat_s, builtin_i8x16_add_sat_s);\n\n// i8x16.add_sat_u -> v128.add_sat<u8>\nfunction builtin_i8x16_add_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_sat_u, builtin_i8x16_add_sat_u);\n\n// i8x16.sub_sat_s -> v128.sub_sat<i8>\nfunction builtin_i8x16_sub_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_sat_s, builtin_i8x16_sub_sat_s);\n\n// i8x16.sub_sat_u -> v128.sub_sat<u8>\nfunction builtin_i8x16_sub_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_sat_u, builtin_i8x16_sub_sat_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_i8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shuffle, builtin_i8x16_shuffle);\n\n// i8x16.swizzle -> v128.swizzle\nfunction builtin_i8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_swizzle, builtin_i8x16_swizzle);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_sat_s -> v128.add_sat<i16>\nfunction builtin_i16x8_add_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_sat_s, builtin_i16x8_add_sat_s);\n\n// i16x8.add_sat_u -> v128.add_sat<u16>\nfunction builtin_i16x8_add_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_sat_u, builtin_i16x8_add_sat_u);\n\n// i16x8.sub_sat_s -> v128.sub_sat<i16>\nfunction builtin_i16x8_sub_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_sat_s, builtin_i16x8_sub_sat_s);\n\n// i16x8.sub_sat_u -> v128.sub_sat<u16>\nfunction builtin_i16x8_sub_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_sat_u, builtin_i16x8_sub_sat_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.extend_low_i8x16_s -> v128.extend_low<i8>\nfunction builtin_i16x8_extend_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_low_i8x16_s, builtin_i16x8_extend_low_i8x16_s);\n\n// i16x8.extend_low_i8x16_u -> v128.extend_low<u8>\nfunction builtin_i16x8_extend_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_low_i8x16_u, builtin_i16x8_extend_low_i8x16_u);\n\n// i16x8.extend_high_i8x16_s -> v128.extend_high<i8>\nfunction builtin_i16x8_extend_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_high_i8x16_s, builtin_i16x8_extend_high_i8x16_s);\n\n// i16x8.extend_high_i8x16_u -> v128.extend_high<u8>\nfunction builtin_i16x8_extend_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_high_i8x16_u, builtin_i16x8_extend_high_i8x16_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.extend_low_i16x8_s -> // v128.extend_low<i16>\nfunction builtin_i32x4_extend_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_low_i16x8_s, builtin_i32x4_extend_low_i16x8_s);\n\n// i32x4.extend_low_i16x8_u -> v128.extend_low<u16>\nfunction builtin_i32x4_extend_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_low_i16x8_u, builtin_i32x4_extend_low_i16x8_u);\n\n// i32x4.extend_high_i16x8_s -> v128.extend_high<i16>\nfunction builtin_i32x4_extend_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_high_i16x8_s, builtin_i32x4_extend_high_i16x8_s);\n\n// i32x4.extend_high_i16x8_u -> v128.extend_high<u16>\nfunction builtin_i32x4_extend_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_high_i16x8_u, builtin_i32x4_extend_high_i16x8_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.mul -> v128.mul<i64>\nfunction builtin_i64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_mul, builtin_i64x2_mul);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.eq -> v128.eq<i64>\nfunction builtin_i64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_eq, builtin_i64x2_eq);\n\n// i64x2.ne -> v128.ne<i64>\nfunction builtin_i64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ne, builtin_i64x2_ne);\n\n// i64x2.lt_s -> v128.lt<i64>\nfunction builtin_i64x2_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_lt_s, builtin_i64x2_lt_s);\n\n// i64x2.lt_u -> v128.lt<u64>\nfunction builtin_i64x2_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_lt_u, builtin_i64x2_lt_u);\n\n// i64x2.le_s -> v128.le<i64>\nfunction builtin_i64x2_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_le_s, builtin_i64x2_le_s);\n\n// i64x2.le_u -> v128.le<u64>\nfunction builtin_i64x2_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_le_u, builtin_i64x2_le_u);\n\n// i64x2.gt_s -> v128.gt<i64>\nfunction builtin_i64x2_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_gt_s, builtin_i64x2_gt_s);\n\n// i64x2.gt_u -> v128.gt<u64>\nfunction builtin_i64x2_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_gt_u, builtin_i64x2_gt_u);\n\n// i64x2.ge_s -> v128.ge<i64>\nfunction builtin_i64x2_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ge_s, builtin_i64x2_ge_s);\n\n// i64x2.ge_u -> v128.ge<u64>\nfunction builtin_i64x2_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ge_u, builtin_i64x2_ge_u);\n\n// i64x2.extend_low_i32x4_s -> // v128.extend_low<i32>\nfunction builtin_i64x2_extend_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_low_i32x4_s, builtin_i64x2_extend_low_i32x4_s);\n\n// i64x2.extend_low_i32x4_u -> v128.extend_low<u32>\nfunction builtin_i64x2_extend_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_low_i32x4_u, builtin_i64x2_extend_low_i32x4_u);\n\n// i64x2.extend_high_i32x4_s -> v128.extend_high<i32>\nfunction builtin_i64x2_extend_high_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_high_i32x4_s, builtin_i64x2_extend_high_i32x4_s);\n\n// i64x2.extend_high_i32x4_u -> v128.extend_high<u32>\nfunction builtin_i64x2_extend_high_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_high_i32x4_u, builtin_i64x2_extend_high_i32x4_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classReference = globalType.getClass();\n    if (\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value)),\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType),\n              false // internal\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Ensures that the visitor function of the specified class is compiled. */\nfunction ensureVisitMembersOf(compiler: Compiler, instance: Class): void {\n  assert(instance.type.isManaged);\n  if (instance.visitRef) return;\n\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var visitInstance = assert(program.visitInstance);\n  var body = new Array<ExpressionRef>();\n\n  // If the class has a base class, call its visitor first\n  var base = instance.base;\n  if (base) {\n    body.push(\n      module.call(base.internalName + \"~visit\", [\n        module.local_get(0, nativeSizeType), // this\n        module.local_get(1, NativeType.I32)  // cookie\n      ], NativeType.None)\n    );\n  }\n\n  // Some standard library components provide a custom visitor implementation,\n  // for example to visit all members of a collection, e.g. arrays and maps.\n  var hasVisitImpl = false;\n  if (instance.isDeclaredInLibrary) {\n    let visitPrototype = instance.lookupInSelf(\"__visit\");\n    if (visitPrototype) {\n      assert(visitPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitInstance = program.resolver.resolveFunction(<FunctionPrototype>visitPrototype, null);\n      if (!visitInstance || !compiler.compileFunction(visitInstance)) {\n        body.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSignature = visitInstance.signature;\n        let visitThisType = assert(visitSignature.thisType);\n        assert(\n          visitSignature.parameterTypes.length == 1 &&\n          visitSignature.parameterTypes[0] == Type.u32 &&\n          visitSignature.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        body.push(\n          module.call(visitInstance.internalName, [\n            module.local_get(0, nativeSizeType), // this\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n      hasVisitImpl = true;\n    }\n  }\n\n  // Otherwise, if there is no custom visitor, generate a visitor function\n  // according to class layout, visiting all _own_ managed members.\n  var needsTempValue = false;\n  if (!hasVisitImpl) {\n    let members = instance.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n        let member = unchecked(_values[j]);\n        if (member.kind == ElementKind.FIELD) {\n          if ((<Field>member).parent === instance) {\n            let fieldType = (<Field>member).type;\n            if (fieldType.isManaged) {\n              let fieldOffset = (<Field>member).memoryOffset;\n              assert(fieldOffset >= 0);\n              needsTempValue = true;\n              body.push(\n                // if ($2 = value) __visit($2, $1)\n                module.if(\n                  module.local_tee(2,\n                    module.load(nativeSizeSize, false,\n                      module.local_get(0, nativeSizeType),\n                      nativeSizeType, fieldOffset\n                    ),\n                    false // internal\n                  ),\n                  module.call(visitInstance.internalName, [\n                    module.local_get(2, nativeSizeType), // value\n                    module.local_get(1, NativeType.I32)  // cookie\n                  ], NativeType.None)\n                )\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Create the visitor function\n  instance.visitRef = module.addFunction(instance.internalName + \"~visit\",\n    createType([nativeSizeType, NativeType.I32]),\n    NativeType.None,\n    needsTempValue ? [ nativeSizeType ] : null,\n    module.flatten(body, NativeType.None)\n  );\n\n  // And make sure the base visitor function exists\n  if (base) ensureVisitMembersOf(compiler, base);\n}\n\n/** Compiles the `__visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  compiler.compileFunction(visitInstance, true); // is lazy, make sure it is compiled\n\n  // Prepare a mapping of class names to visitor calls. Each name corresponds to\n  // the respective sequential (0..N) class id.\n  var names = new Array<string>();\n  var cases = new Array<ExpressionRef>();\n  var nextId = 0;\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    assert(instanceId == nextId++);\n    let instance = assert(managedClasses.get(instanceId));\n    names[i] = instance.internalName;\n    if (instance.isPointerfree) {\n      cases[i] = module.return();\n    } else {\n      cases[i] = module.block(null, [\n        module.call(instance.internalName + \"~visit\", [\n          module.local_get(0, nativeSizeType), // this\n          module.local_get(1, NativeType.I32)  // cookie\n        ], NativeType.None),\n        module.return()\n      ], NativeType.None);\n      ensureVisitMembersOf(compiler, instance);\n    }\n  }\n\n  // Make a br_table of the mapping, calling visitor functions by unique class id\n  var current = module.block(names[0], [\n    module.switch(names, \"invalid\",\n      // load<u32>(changetype<usize>(this) - 8)\n      module.load(4, false,\n        nativeSizeType == NativeType.I64\n          ? module.binary(BinaryOp.SubI64,\n              module.local_get(0, nativeSizeType),\n              module.i64(8)\n            )\n          : module.binary(BinaryOp.SubI32,\n              module.local_get(0, nativeSizeType),\n              module.i32(8) // rtId is at -8\n            ),\n        NativeType.I32, 0\n      )\n    )\n  ], NativeType.None);\n\n  // Wrap blocks in order\n  for (let i = 0, k = names.length - 1; i < k; ++i) {\n    current = module.block(names[i + 1], [\n      current,\n      cases[i]\n    ], NativeType.None);\n  }\n\n  // Wrap the last id in an 'invalid' block to break out of on invalid ids\n  current = module.block(\"invalid\", [\n    current,\n    cases[names.length - 1]\n  ], NativeType.None);\n\n  // Add the function, executing an unreachable if breaking to 'invalid'\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ nativeSizeType, NativeType.I32 ]), // this, cookie\n    NativeType.None, // => void\n    null,\n    module.flatten([\n      current,\n      module.unreachable()\n    ])\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isPointerfree) flags |= TypeinfoFlags.POINTERFREE;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addAlignedMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.isIntegerValue) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITELY_ASSIGNED = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Did error. */\n  ERRORED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a stub. */\n  STUB = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 28,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const funcref = \"funcref\";\n  export const externref = \"externref\";\n  export const anyref = \"anyref\";\n  export const eqref = \"eqref\";\n  export const i31ref = \"i31ref\";\n  export const dataref = \"dataref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_EXPORT_RUNTIME = \"ASC_EXPORT_RUNTIME\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  export const ASC_FEATURE_GC = \"ASC_FEATURE_GC\";\n  export const ASC_FEATURE_MEMORY64 = \"ASC_FEATURE_MEMORY64\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Funcref = \"Funcref\";\n  export const Externref = \"Externref\";\n  export const Anyref = \"Anyref\";\n  export const Eqref = \"Eqref\";\n  export const I31ref = \"I31ref\";\n  export const Dataref = \"Dataref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const Function = \"Function\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const ipow32 = \"ipow32\";\n  export const ipow64 = \"ipow64\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const new_ = \"__new\";\n  export const renew = \"__renew\";\n  export const link = \"__link\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const newBuffer = \"__newBuffer\";\n  export const newArray = \"__newArray\";\n  export const BLOCK = \"~lib/rt/common/BLOCK\";\n  export const OBJECT = \"~lib/rt/common/OBJECT\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  function_builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  RefIsOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChildAt,\n  getBlockName,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags,\n  isConstZero\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  FieldFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  uniqueMap,\n  isPowerOf2,\n  v128_zero,\n  readI32\n} from \"./util\";\n\nimport {\n  RtraceMemory\n} from \"./passes/rtrace\";\n\nimport {\n  ShadowStackPass\n} from \"./passes/shadowstack\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n  /** If true, exports the runtime helpers. */\n  exportRuntime: bool = false;\n  /** Stack size in bytes, if using a stack. */\n  stackSize: i32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 4,\n  /** Indicates that the value will become `this` of a property access or instance call. */\n  IS_THIS = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires data setup. */\n  DATA = 1 << 0,\n  /** Requires a stack. */\n  STACK = 1 << 1,\n  /** Requires heap setup. */\n  HEAP = 1 << 2,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 3,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 4,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 5,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 6\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Functions to export if `--exportRuntime` is set. */\nconst runtimeFunctions = [ \"__new\", \"__pin\", \"__unpin\", \"__collect\" ];\n/** Globals to export if `--exportRuntime` is set. */\nconst runtimeGlobals = [ \"__rtti_base\" ];\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled functions. */\n  lazyFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n  /** Elements currently undergoing compilation. */\n  pendingElements: Set<Element> = new Set();\n  /** Elements, that are module exports, already processed */\n  doneModuleExports: Set<Element> = new Set();\n  /** Shadow stack reference. */\n  shadowStack!: ShadowStackPass;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create(options.stackSize > 0);\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    if (options.hasFeature(Feature.GC)) featureFlags |= FeatureFlags.GC;\n    if (options.hasFeature(Feature.MEMORY64)) featureFlags |= FeatureFlags.Memory64;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n    this.shadowStack = new ShadowStackPass(this);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n    var hasShadowStack = options.stackSize > 0; // implies runtime=incremental\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable data, heap and rtti offset dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.data_end, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.data_end, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // compile and export runtime if requested\n    if (this.options.exportRuntime) {\n      for (let i = 0, k = runtimeFunctions.length; i < k; ++i) {\n        let name = runtimeFunctions[i];\n        let instance = program.requireFunction(name);\n        if (this.compileFunction(instance) && !module.hasExport(name)) {\n          module.addFunctionExport(instance.internalName, name);\n        }\n      }\n      for (let i = 0, k = runtimeGlobals.length; i < k; ++i) {\n        let name = runtimeGlobals[i];\n        let instance = program.requireGlobal(name);\n        if (this.compileGlobal(instance) && !module.hasExport(name)) {\n          module.addGlobalExport(instance.internalName, name);\n        }\n      }\n    }\n\n    // compile lazy functions\n    var lazyFunctions = this.lazyFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    var functionTable = this.functionTable;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // incl. varargs\n        this.finalizeVirtualStub(instance);\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualCalls = this.virtualCalls;\n    while (virtualCalls.size) {\n      // finalizing a stub may discover more virtual calls, so do this in a loop\n      for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        this.finalizeVirtualStub(instance);\n        virtualCalls.delete(instance);\n      }\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    var memoryOffset = i64_align(this.memoryOffset, options.usizeType.byteSize);\n\n    // finalize data\n    module.removeGlobal(BuiltinNames.data_end);\n    if ((this.runtimeFeatures & RuntimeFeatures.DATA) != 0 || hasShadowStack) {\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.data_end, NativeType.I64, false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.data_end, NativeType.I32, false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // finalize stack (grows down from __heap_base to __data_end)\n    module.removeGlobal(BuiltinNames.stack_pointer);\n    if ((this.runtimeFeatures & RuntimeFeatures.STACK) != 0 || hasShadowStack) {\n      memoryOffset = i64_align(\n        i64_add(memoryOffset, i64_new(options.stackSize)),\n        options.usizeType.byteSize\n      );\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.stack_pointer, NativeType.I64, true,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.stack_pointer, NativeType.I32, true,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // finalize heap\n    module.removeGlobal(BuiltinNames.heap_base);\n    if ((this.runtimeFeatures & RuntimeFeatures.HEAP) != 0 || hasShadowStack) {\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.heap_base, NativeType.I64, false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.heap_base, NativeType.I32, false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    this.memoryOffset = memoryOffset;\n\n    // check that we didn't exceed lowMemoryLimit already\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n        module.global_set(this.ensureArgumentsLength(), module.local_get(0, NativeType.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n\n    // NOTE: no more element compiles from here. may go to the start function!\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.global_set(BuiltinNames.started, module.i32(1))\n        );\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return()\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // Run custom passes\n    if (hasShadowStack) {\n      this.shadowStack.walkModule();\n    }\n    if (program.lookup(\"ASC_RTRACE\") != null) {\n      new RtraceMemory(this).walkModule();\n    }\n\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    var module = this.module;\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>element;\n        let functionInstances = functionPrototype.instances;\n        if (functionInstances !== null && functionInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (functionPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            functionPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classPrototype = <ClassPrototype>element;\n        let classInstances = classPrototype.instances;\n        if (classInstances !== null && classInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (classPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            classPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else if (global.is(CommonFlags.COMPILED)) {\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(element.internalName, exportName);\n          }\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else if (enumValue.is(CommonFlags.COMPILED)) {\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(element.internalName, exportName);\n          }\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) {\n            let exportName = prefix + name;\n            if (!module.hasExport(exportName)) {\n              module.addFunctionExport(functionInstance.internalName, exportName);\n              if (signature.hasManagedOperands) {\n                this.shadowStack.noteExport(exportName, signature.getManagedOperandIndices());\n              }\n            }\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let getterExportName = prefix + GETTER_PREFIX + name;\n          if (this.compileFieldGetter(fieldInstance) && !module.hasExport(getterExportName)) {\n            module.addFunctionExport(fieldInstance.internalGetterName, getterExportName);\n            let signature = fieldInstance.internalGetterSignature;\n            if (signature.hasManagedOperands) {\n              this.shadowStack.noteExport(getterExportName, signature.getManagedOperandIndices());\n            }\n          }\n          if (!element.is(CommonFlags.READONLY)) {\n            let setterExportName = prefix + SETTER_PREFIX + name;\n            if (this.compileFieldSetter(fieldInstance) && !module.hasExport(setterExportName)) {\n              module.addFunctionExport(fieldInstance.internalSetterName, setterExportName);\n              let signature = fieldInstance.internalSetterSignature;\n              if (signature.hasManagedOperands) {\n                this.shadowStack.noteExport(setterExportName, signature.getManagedOperandIndices());\n              }\n            }\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n\n          if (!this.doneModuleExports.has(element)) {\n            module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n            this.doneModuleExports.add(element);\n          }\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return !global.is(CommonFlags.ERRORED);\n    global.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(global);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) {\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        global.set(CommonFlags.ERRORED);\n        pendingElements.delete(global);\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      let internalName = global.internalName;\n      if (internalName == BuiltinNames.data_end) this.runtimeFeatures |= RuntimeFeatures.DATA;\n      else if (internalName == BuiltinNames.stack_pointer) this.runtimeFeatures |= RuntimeFeatures.STACK;\n      else if (internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      pendingElements.delete(global);\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        pendingElements.delete(global);\n        return true;\n      }\n\n      // Importing mutable globals is not supported in the MVP\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        global.declaration.range, \"mutable-globals\"\n      );\n      global.set(CommonFlags.ERRORED);\n      pendingElements.delete(global);\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              global.set(CommonFlags.ERRORED);\n              pendingElements.delete(global);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC);\n      } else {\n        initExpr = this.makeZero(type, global.declaration);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type, global.declaration));\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    pendingElements.delete(global);\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return !element.is(CommonFlags.ERRORED);\n    element.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(element);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    pendingElements.delete(element);\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return !instance.is(CommonFlags.ERRORED);\n\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyFunctions.add(instance);\n        return true;\n      }\n    }\n\n    instance.set(CommonFlags.COMPILED);\n    var pendingElements = this.pendingElements;\n    pendingElements.add(instance);\n\n    var previousType = this.currentType;\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      if (!this.compileFunctionBody(instance, stmts)) {\n        stmts.push(module.unreachable());\n      }\n     \n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        module.flatten(stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n      instance.set(CommonFlags.ERRORED);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    pendingElements.delete(instance);\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.signature.thisType\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n    var bodyStartIndex = stmts.length;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          this.makeConditionalAllocation(classInstance, thisLocal.index)\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n\n        // Insert right before the body\n        for (let i = stmts.length - 1; i >= bodyStartIndex; --i) {\n          stmts[i + 1] = stmts[i];\n        }\n        stmts[bodyStartIndex] = module.flatten(allocStmts, NativeType.None);\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        stmts.push(\n          module.local_get(thisLocal.index, this.options.nativeSizeType)\n        );\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    this.checkFieldInitialization(instance);\n\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    if (instance.getterRef) return true;\n    var module = this.module;\n    var valueType = instance.type;\n    var nativeValueType = valueType.toNativeType();\n    var nativeThisType = this.options.nativeSizeType;\n    // return this.field\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null,\n      module.load(valueType.byteSize, valueType.isSignedIntegerValue,\n        module.local_get(0, nativeThisType),\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    // void(this.field = value)\n    var bodyExpr = module.store(type.byteSize,\n      module.local_get(0, nativeThisType),\n      module.local_get(1, nativeValueType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      if ((<Class>parent).type.isManaged) {\n        let linkInstance = this.program.linkInstance;\n        this.compileFunction(linkInstance);\n        bodyExpr = module.block(null, [\n          bodyExpr,\n          module.call(linkInstance.internalName, [\n            module.local_get(0, nativeThisType),\n            module.local_get(1, nativeValueType),\n            module.i32(0)\n          ], NativeType.None)\n        ], NativeType.None);\n      }\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, null,\n      bodyExpr\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addAlignedMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Adds a static memory segment representing a runtime object. */\n  addRuntimeMemorySegment(buffer: Uint8Array): MemorySegment {\n    var memoryOffset = this.program.computeBlockStart64(this.memoryOffset);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var totalOverhead = program.totalOverhead;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let len = stringValue.length;\n      let buf = stringInstance.createBuffer(len << 1);\n      for (let i = 0; i < len; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, totalOverhead + (i << 1));\n      }\n      stringSegment = this.addRuntimeMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var ptr = i64_add(stringSegment.offset, i64_new(totalOverhead));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ptr), i64_high(ptr));\n    } else {\n      assert(i64_is_u32(ptr));\n      return this.module.i32(i64_low(ptr));\n    }\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var arrayBufferInstance = program.arrayBufferInstance;\n    var buf = arrayBufferInstance.createBuffer(values.length * elementType.byteSize);\n    this.program.OBJECTInstance.writeField(\"rtId\", id, buf, 0); // use specified rtId\n    this.writeStaticBuffer(buf, program.totalOverhead, elementType, values);\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var bufferLength = readI32(bufferSegment.buffer, program.OBJECTInstance.offsetof(\"rtSize\"));\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n    var bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n    var buf = arrayInstance.createBuffer();\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf));\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a runtime counterpart of the specified function exists and returns its address. */\n  ensureRuntimeFunction(instance: Function): i64 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var program = this.program;\n    var memorySegment = instance.memorySegment;\n    if (!memorySegment) {\n\n      // Add to the function table\n      let functionTable = this.functionTable;\n      let tableBase = this.options.tableBase;\n      if (!tableBase) tableBase = 1; // leave first elem blank\n      let index = tableBase + functionTable.length;\n      functionTable.push(instance);\n\n      // Create runtime function\n      let rtInstance = assert(this.resolver.resolveClass(program.functionPrototype, [ instance.type ]));\n      let buf = rtInstance.createBuffer();\n      assert(rtInstance.writeField(\"_index\", index, buf));\n      assert(rtInstance.writeField(\"_env\", 0, buf));\n      instance.memorySegment = memorySegment = this.addRuntimeMemorySegment(buf);\n    }\n    return i64_add(memorySegment.offset, i64_new(program.totalOverhead));\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChildAt(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.freeScopedLocals();\n    flow.set(FlowFlags.BREAKS);\n    return module.br(breakLabel);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    flow.freeScopedLocals();\n    return module.br(continueLabel);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //                                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //                                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType,\n        statement.condition\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr, false) // bool\n        );\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations. Note that\n        // this may be necessary multiple times where locals depend on each other.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //                                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //                                │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //                                │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    //                                ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType,\n        condition\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr, false) // bool\n    );\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations. Note that this\n      // may be necessary multiple times where locals depend on each other.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //                   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //                   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      expr = this.compileExpression(valueExpression, returnType, constraints);\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      this.currentType = returnType;\n      return module.unreachable();\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // Handle inline return\n    if (flow.isInline) {\n      return isLastInBody && expr != 0\n        ? expr\n        : module.br(assert(flow.inlineReturnLabel), 0, expr);\n    }\n\n    // Otherwise emit a normal return\n    return isLastInBody && expr != 0\n      ? expr\n      : module.return(expr);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      ),\n      false // u32\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n      ? \"case\" + defaultIndex.toString()\n      : \"break\"\n    ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    flow.freeScopedLocals();\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          let pendingElements = this.pendingElements;\n          let dummy = flow.addScopedDummyLocal(name, type); // pending dummy\n          pendingElements.add(dummy);\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT\n          );\n          pendingElements.delete(dummy);\n          flow.freeScopedDummyLocal(name);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let pendingElements = this.pendingElements;\n        let temp = flow.addScopedDummyLocal(name, Type.auto); // pending dummy\n        pendingElements.add(temp);\n        initExpr = this.compileExpression(initializerNode, Type.auto); // reports\n        pendingElements.delete(temp);\n        flow.freeScopedDummyLocal(name);\n\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp; // always use precomputed initExpr\n            let local: Local | null = null;\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n            }\n            if (local) {\n              // Add as a virtual local that doesn't actually exist in WebAssembly\n              let scopedLocals = flow.scopedLocals;\n              if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n              else if (scopedLocals.has(name)) {\n                let existing = assert(scopedLocals.get(name));\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  declaration.name.range,\n                  existing.declaration.name.range,\n                  name\n                );\n                return this.module.unreachable();\n              }\n              scopedLocals.set(name, local);\n              isStatic = true;\n            }\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.makeLocalAssignment(local, initExpr, type, false)\n          );\n        } else {\n          // no need to assign zero\n          if (local.type.isShortIntegerValue) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    this.currentType = Type.void;\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //                                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //                                │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr, false) // bool\n    );\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations. Note that\n      // this may be necessary multiple times where locals depend on each other.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.isIntegerValue &&\n      contextualType.isIntegerValue &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, expression);\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, expression);\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Converts an expression's result from one type to another. */\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit. */\n    explicit: bool,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.isReference || toType.isReference) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.isNullableReference && !toType.isNullableReference) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(toType.isExternalReference || fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        if (toType.isExternalReference) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            reportNode.range,\n            \"ref.cast\"\n          );\n          this.currentType = toType;\n          return module.unreachable();\n        }\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n    assert(!fromType.isReference && !toType.isReference);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.isFloatValue) {\n\n      // float to float\n      if (toType.isFloatValue) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.isIntegerValue) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f32, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncF32ToI64Sat : UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncF32ToI32Sat : UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncF32ToU64Sat : UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncF32ToU32Sat : UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f64, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncF64ToI64Sat : UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncF64ToI32Sat : UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncF64ToU64Sat : UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncF64ToU32Sat : UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.isIntegerValue && toType.isFloatValue) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.isLongIntegerValue) {\n\n        // i64 to i32 or smaller\n        if (toType.isBooleanValue) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n        } else if (!toType.isLongIntegerValue) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.isLongIntegerValue) {\n        expr = module.unary(\n          fromType.isSignedIntegerValue ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.isShortIntegerValue) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.isVaryingIntegerValue && !toType.isVaryingIntegerValue) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n  private i32PowInstance: Function | null = null;\n  private i64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EQUALS_EQUALS) { // can't overload '==='\n          let classReference = leftType.getClassOrWrapper(this.program);\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeEq(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS) { // can't overload '!=='\n          let classReference = leftType.getClass();\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeNe(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"+\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAdd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeSub(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"*\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeMul(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POW);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"**\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"**\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makePow(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"/\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeDiv(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.REM);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"%\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeRem(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShl(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShr(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShru(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAnd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeOr(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeXor(leftExpr, rightExpr, commonType);\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & Constraints.MUST_WRAP;\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            this.makeIsTrueish(rightExpr, rightType, right),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType, left),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr, leftType.isManaged), leftType, left),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & Constraints.MUST_WRAP;\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType, right)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr, leftType.isManaged), leftType, left),\n              module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  makeLt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeLe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeI64\n            : BinaryOp.LeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeU64\n            : BinaryOp.LeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeI64\n            : BinaryOp.GeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeU64\n            : BinaryOp.GeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeEq(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.EqI64\n            : BinaryOp.EqI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AllTrueI8x16,\n          module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return module.ref_eq(leftExpr, rightExpr);\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeNe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AnyTrueI8x16,\n          module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return module.unary(UnaryOp.EqzI32,\n          module.ref_eq(leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAdd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AddI64\n            : BinaryOp.AddI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeSub(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeMul(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.MulI64\n            : BinaryOp.MulI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makePow(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    let module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: {\n        return module.select(\n          module.i32(1),\n          module.binary(BinaryOp.EqI32, rightExpr, module.i32(0)),\n          leftExpr\n        );\n      }\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let instance = this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        let expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n        if (type.size < 32) {\n          // TODO: this is necessary because i32PowInstance is generic, and deals with 32-bit integers,\n          // so its flow does not indicate whether returned SMIs are wrapped. worth to avoid?\n          expr = this.ensureSmallIntegerWrap(expr, type);\n        }\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let instance = this.i64PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow64);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow64\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let isWasm64 = this.options.isWasm64;\n        let instance = isWasm64 ? this.i64PowInstance : this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(isWasm64 ? CommonNames.ipow64 : CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, isWasm64 ? \"ipow64\" : \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          if (isWasm64) {\n            this.i64PowInstance = instance;\n          } else {\n            this.i32PowInstance = instance;\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      // Math.pow otherwise (result is f64)\n      case TypeKind.F64: {\n        let instance = this.f64PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeDiv(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivI64\n            : BinaryOp.DivI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivU64\n            : BinaryOp.DivU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeRem(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemI64\n            : BinaryOp.RemI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemU64\n            : BinaryOp.RemU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F64: {\n        let instance = this.f64ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShl(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the RHS, but only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr << (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShlI32,\n          leftExpr,\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShlI64\n            : BinaryOp.ShlI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits,\n    // and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        // leftExpr >> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrI32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrI64\n            : BinaryOp.ShrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShru(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAnd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AndI64\n            : BinaryOp.AndI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeOr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.OrI64\n            : BinaryOp.OrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeXor(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.XorI64\n            : BinaryOp.XorI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having local flags that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(\n    expression: Expression,\n    valueExpression: Expression,\n    contextualType: Type\n  ): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (this.pendingElements.has(target)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            target.internalName\n          );\n          return this.module.unreachable();\n        }\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        let isConstructor = flow.actualFunction.is(CommonFlags.CONSTRUCTOR);\n\n        // Cannot assign to readonly fields except in constructors if there's no initializer\n        if (fieldInstance.is(CommonFlags.READONLY)) {\n          if (!isConstructor || initializerNode !== null) {\n            this.error(\n              DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n              valueExpression.range, fieldInstance.internalName\n            );\n            return module.unreachable();\n          }\n        }\n\n        // Mark initialized fields in constructors\n        thisExpression = assert(thisExpression);\n        if (isConstructor && thisExpression.kind == NodeKind.THIS) {\n          flow.setThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED);\n        }\n\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            thisExpression,\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr, returnType.isManaged),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, nativeReturnType)\n            ], valueExpression)\n          ], nativeReturnType);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toNativeType());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let thisType = classInstance.type;\n        let thisExpr = this.compileExpression(\n          assert(thisExpression),\n          thisType,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        let elementType = this.currentType;\n        if (tee) {\n          let tempTarget = flow.getTempLocal(thisType);\n          let tempElement = flow.getTempLocal(elementType);\n          let returnType = getterInstance.signature.returnType;\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr, thisType.isManaged),\n              module.local_tee(tempElement.index, elementExpr, elementType.isManaged),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.isNullableReference) {\n      if (!valueType.isNullableReference || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n    if (type.isShortIntegerValue) {\n      if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n    }\n    if (tee) { // local = value\n      this.currentType = type;\n      return module.local_tee(localIndex, valueExpr, type.isManaged);\n    } else { // void(local = value)\n      this.currentType = Type.void;\n      return module.local_set(localIndex, valueExpr, type.isManaged);\n    }\n  }\n\n  /** Makes an assignment to a global. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n    if (tee) { // (global = value), global\n      this.currentType = type;\n      return module.block(null, [\n        module.global_set(global.internalName, valueExpr),\n        module.global_get(global.internalName, nativeType)\n      ], nativeType);\n    } else { // global = value\n      this.currentType = Type.void;\n      return module.global_set(global.internalName,\n        valueExpr\n      );\n    }\n  }\n\n  /** Makes an assignment to a field. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (tee) {\n      this.compileField(field);\n      let tempThis = flow.getTempLocal(thisType);\n      let expr = module.block(null, [\n        module.call(field.internalSetterName, [ module.local_tee(tempThis.index, thisExpr, thisType.isManaged), valueExpr ], NativeType.None),\n        module.call(field.internalGetterName, [ module.local_get(tempThis.index, thisType.toNativeType()) ], nativeFieldType)\n      ], nativeFieldType);\n      flow.freeTempLocal(tempThis);\n      this.currentType = fieldType;\n      return expr;\n    } else {\n      this.compileFieldSetter(field);\n      let expr = module.call(field.internalSetterName, [ thisExpr, valueExpr ], NativeType.None);\n      this.currentType = Type.void;\n      return expr;\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = classInstance.base;\n      if (!baseClassInstance) {\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.expression.range\n        );\n        return module.unreachable();\n      }\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      let baseCtorInstance = this.ensureConstructor(baseClassInstance, expression);\n      this.checkFieldInitialization(baseClassInstance, expression);\n      let superCall = this.compileCallDirect(\n        baseCtorInstance,\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, nativeSizeType)\n      );\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall, classInstance.type.isManaged);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var functionArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: first-class function (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            let inlinedValue = local.constantIntegerValue;\n            if (this.options.isWasm64) {\n              functionArg = module.i64(i64_low(inlinedValue), i64_high(inlinedValue));\n            } else {\n              assert(!i64_high(inlinedValue));\n              functionArg = module.i32(i64_low(inlinedValue));\n            }\n          } else {\n            functionArg = module.local_get(local.index, this.options.nativeSizeType);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          functionArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          let usizeType = this.options.usizeType;\n          functionArg = module.load(usizeType.byteSize, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n            ),\n            usizeType.toNativeType(),\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        functionArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>target;\n        let typeArguments = classInstance.getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          signature = ftype.getSignature();\n          functionArg = this.compileExpression(expression.expression, ftype, Constraints.CONV_IMPLICIT);\n          break;\n        }\n        // fall-through\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      functionArg,\n      expression.args,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        uniqueMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var callee = expression.expression;\n    var ctx = new BuiltinContext(\n      this,\n      prototype,\n      typeArguments,\n      expression.args,\n      callee.kind == NodeKind.PROPERTYACCESS\n        ? (<PropertyAccessExpression>callee).expression\n        : null,\n      contextualType,\n      expression,\n      false\n    );\n    // global builtins\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    // class builtins\n    var parent = prototype.parent;\n    if (parent.kind == ElementKind.CLASS) {\n      let classPrototype = (<Class>parent).prototype;\n      if (classPrototype == this.program.functionPrototype) {\n        let methodName = prototype.name;\n        if (function_builtins.has(methodName)) {\n          let fn = assert(function_builtins.get(methodName));\n          return fn(ctx);\n        }\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range,\n        \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // handle call on `this` in constructors\n    let actualFunction = this.currentFlow.actualFunction;\n    if (actualFunction.is(CommonFlags.CONSTRUCTOR) && reportNode.isAccessOnThis) {\n      let parent = actualFunction.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitialization(<Class>parent, reportNode);\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE) && (!instance.is(CommonFlags.VIRTUAL) || reportNode.isAccessOnSuper)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i], Constraints.CONV_IMPLICIT);\n        }\n        // make the inlined call\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      let paramType = parameterTypes[i];\n      let paramExpr = this.compileExpression(argumentExpressions[i], paramType, Constraints.CONV_IMPLICIT);\n      operands[index] = paramExpr;\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands, reportNode, (constraints & Constraints.WILL_DROP) != 0);\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr, paramType.isManaged)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg, thisType.isManaged)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), initType);\n      body.push(\n        this.makeLocalAssignment(argumentLocal, initExpr, initType, false)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // If a constructor, perform field init checks on its flow directly\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitializationInFlow(<Class>parent, flow);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    this.currentType = returnType;\n    return module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): string {\n    var name = BuiltinNames.argumentsLength;\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(name, NativeType.I32, true, module.i32(0));\n    }\n    return name;\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n    var stmts = new Array<ExpressionRef>();\n\n    // forward `this` if applicable\n    var module = this.module;\n    var thisType = originalSignature.thisType;\n    if (thisType) {\n      forwardedOperands[0] = module.local_get(0, thisType.toNativeType());\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      let paramType = originalParameterTypes[i];\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, paramType.toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var argumentsLength = this.ensureArgumentsLength();\n    var table = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = this.compileExpression(\n          initializer,\n          type,\n          Constraints.CONV_IMPLICIT\n        );\n        initExpr = module.local_set(operandIndex, initExpr, type.isManaged);\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      table = module.block(names[i + 1], [\n        table,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    stmts.push(\n      table\n    );\n    stmts.push(\n      module.call(original.internalName, forwardedOperands, returnType.toNativeType())\n    );\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      typesToNativeTypes(stub.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      null,\n      module.unreachable()\n    );\n    this.virtualCalls.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    // Wouldn't be here if there wasn't at least one overload\n    var overloadPrototypes = assert(instance.prototype.overloads);\n\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, nativeSizeType),\n          nativeSizeType == NativeType.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        NativeType.I32\n      )\n    );\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved and compiled as\n    // we are going to call them conditionally based on this's class id.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (classInstances) {\n        for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n          let classInstance = _values[j];\n          let overloadInstance: Function | null;\n          if (isProperty) {\n            let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n            assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n            let boundPropertyInstance = this.resolver.resolveProperty(<PropertyPrototype>boundProperty);\n            if (!boundPropertyInstance) continue;\n            if (instance.is(CommonFlags.GET)) {\n              overloadInstance = boundPropertyInstance.getterInstance;\n            } else {\n              assert(instance.is(CommonFlags.SET));\n              overloadInstance = boundPropertyInstance.setterInstance;\n            }\n          } else {\n            let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n            assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            overloadInstance = this.resolver.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n          }\n          if (!overloadInstance || !this.compileFunction(overloadInstance)) continue;\n          let overloadType = overloadInstance.type;\n          let originalType = instance.type;\n          if (!overloadType.isAssignableTo(originalType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n            );\n            continue;\n          }\n          // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n          let overloadSignature = overloadInstance.signature;\n          let overloadParameterTypes = overloadSignature.parameterTypes;\n          let overloadNumParameters = overloadParameterTypes.length;\n          let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n          paramExprs[0] = module.local_get(0, nativeSizeType); // this\n          for (let n = 1; n <= numParameters; ++n) {\n            paramExprs[n] = module.local_get(n, parameterTypes[n - 1].toNativeType());\n          }\n          let needsVarargsStub = false;\n          for (let n = numParameters; n < overloadNumParameters; ++n) {\n            // TODO: inline constant initializers and skip varargs stub\n            paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n], overloadInstance.declaration);\n            needsVarargsStub = true;\n          }\n          let calledName = needsVarargsStub\n            ? this.ensureVarargsStub(overloadInstance).internalName\n            : overloadInstance.internalName;\n          let nativeReturnType = overloadSignature.returnType.toNativeType();\n          let stmts = new Array<ExpressionRef>();\n          if (needsVarargsStub) {\n            // Safe to prepend since paramExprs are local.get's\n            stmts.push(module.global_set(this.ensureArgumentsLength(), module.i32(numParameters)));\n          }\n          if (returnType == Type.void) {\n            stmts.push(\n              module.call(calledName, paramExprs, nativeReturnType)\n            );\n            stmts.push(\n              module.return()\n            );\n          } else {\n            stmts.push(\n              module.return(\n                module.call(calledName, paramExprs, nativeReturnType)\n              )\n            );\n          }\n          builder.addCase(classInstance.id, stmts);\n          // Also alias each extendee inheriting this exact overload\n          let extendees = classInstance.getAllExtendees(\n            isProperty\n              ? unboundOverloadParent.name\n              : instance.prototype.name\n          );\n          for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n            let extendee = _values[a];\n            builder.addCase(extendee.id, stmts);\n          }\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, nativeSizeType); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toNativeType());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toNativeType());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      [ NativeType.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  /** Marks managed call operands for the shadow stack. */\n  private operandsTostack(signature: Signature, operands: ExpressionRef[]): void {\n    if (!this.options.stackSize) return;\n    var module = this.module;\n    var operandIndex = 0;\n    var thisType = signature.thisType;\n    if (thisType) {\n      if (thisType.isManaged) {\n        let operand = operands[0];\n        let precomp = module.runExpression(operand, ExpressionRunnerFlags.Default);\n        if (!isConstZero(precomp)) { // otherwise unnecessary\n          operands[operandIndex] = module.tostack(operand);\n        }\n      }\n      ++operandIndex;\n    }\n    var parameterIndex = 0;\n    var parameterTypes = signature.parameterTypes;\n    assert(parameterTypes.length >= operands.length - operandIndex);\n    while (operandIndex < operands.length) {\n      let paramType = parameterTypes[parameterIndex];\n      if (paramType.isManaged) {\n        let operand = operands[operandIndex];\n        let precomp = module.runExpression(operand, ExpressionRunnerFlags.Default);\n        if (!isConstZero(precomp)) { // otherwise unnecessary\n          operands[operandIndex] = module.tostack(operand);\n        }\n      }\n      ++operandIndex;\n      ++parameterIndex;\n    }\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i], instance.declaration));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant && !instance.is(CommonFlags.MODULE_IMPORT)) {\n        let original = instance;\n        instance = this.ensureVarargsStub(instance);\n        if (!this.compileFunction(instance)) return module.unreachable();\n        instance.flow.flags = original.flow.flags;\n        let nativeReturnType = returnType.toNativeType();\n        // We know the last operand is optional and omitted, so inject setting\n        // ~argumentsLength into that operand, which is always safe.\n        let lastOperand = operands[maxOperands - 1];\n        assert(!(getSideEffects(lastOperand) & SideEffects.WritesGlobal));\n        let lastOperandType = parameterTypes[maxArguments - 1];\n        operands[maxOperands - 1] = module.block(null, [\n          module.global_set(this.ensureArgumentsLength(), module.i32(numArguments)),\n          lastOperand\n        ], lastOperandType.toNativeType());\n        this.operandsTostack(instance.signature, operands);\n        let expr = module.call(instance.internalName, operands, nativeReturnType);\n        if (returnType != Type.void && immediatelyDropped) {\n          expr = module.drop(expr);\n          this.currentType = Type.void;\n        } else {\n          this.currentType = returnType;\n        }\n        return expr;\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isAccessOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    if (operands) this.operandsTostack(instance.signature, operands);\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    return expr;\n  }\n\n  /** Compiles an indirect call to a first-class function. */\n  compileCallIndirect(\n    signature: Signature,\n    functionArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, functionArg, reportNode, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to a first-class function. */\n  makeCallIndirect(\n    signature: Signature,\n    functionArg: ExpressionRef,\n    reportNode: Node,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i], reportNode));\n      }\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    var argumentsLength = this.ensureArgumentsLength();\n    var nativeSizeType = this.options.nativeSizeType;\n    if (getSideEffects(functionArg) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(functionArg));\n      functionArg = module.block(null, [\n        module.local_set(temp.index, functionArg, true), // Function\n        module.global_set(argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      functionArg = module.block(null, [\n        module.global_set(argumentsLength, module.i32(numArguments)),\n        functionArg\n      ], nativeSizeType);\n    }\n    if (operands) this.operandsTostack(signature, operands);\n    var expr = module.call_indirect(\n      module.load(4, false, functionArg, NativeType.I32), // ._index\n      operands,\n      signature.nativeParams,\n      signature.nativeResults\n    );\n    this.currentType = returnType;\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      let classReference = targetType.getClassOrWrapper(this.program);\n      if (classReference) {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (indexedGet) {\n          let thisType = assert(indexedGet.signature.thisType);\n          let thisArg = this.compileExpression(targetExpression, thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!isUnchecked && this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n              expression.range\n            );\n          }\n          return this.compileCallDirect(indexedGet, [\n            expression.elementExpression\n          ], expression, thisArg, constraints);\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var isNamed = declaration.name.text.length > 0;\n    var isSemanticallyAnonymous = !isNamed || contextualType != Type.void;\n    var prototype = new FunctionPrototype(\n      isSemanticallyAnonymous\n        ? (isNamed ? declaration.name.text + \"|\" : \"anonymous|\") + (actualFunction.nextAnonymousId++).toString()\n        : declaration.name.text,\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = uniqueMap(flow.contextualTypeArguments);\n    var module = this.module;\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    var contextualSignature = contextualType.signatureReference;\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      instance.flow.outer = flow;\n      let worked = this.compileFunction(instance);\n      this.currentType = contextualSignature.type;\n      if (!worked) return module.unreachable();\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      instance.flow.outer = flow;\n      let worked = this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n      if (!worked) return module.unreachable();\n    }\n\n    var offset = this.ensureRuntimeFunction(instance); // reports\n    var expr = this.options.isWasm64\n      ? module.i64(i64_low(offset), i64_high(offset))\n      : module.i32(i64_low(offset));\n\n    // add a constant local referring to the function if applicable\n    if (!isSemanticallyAnonymous) {\n      let fname = instance.name;\n      let existingLocal = flow.getScopedLocal(fname);\n      if (existingLocal) {\n        if (!existingLocal.declaration.range.source.isNative) {\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existingLocal.declaration.name.range,\n            fname\n          );\n        } else { // scoped locals are shared temps that don't track declarations\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, fname\n          );\n        }\n      } else {\n        let ftype = instance.type;\n        let local = flow.addScopedLocal(instance.name, ftype);\n        flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        expr = module.local_tee(local.index, expr, ftype.isManaged);\n      }\n    }\n    \n    return expr;\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.isReference) {\n          let classReference = contextualType.getClass();\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.getSignature();\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          return this.makeZero(contextualType, expression);\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        let thisType = actualFunction.signature.thisType;\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n          this.currentType = this.options.usizeType;\n          return module.unreachable();\n        }\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR) && !(constraints & Constraints.IS_THIS)) {\n          let parent = actualFunction.parent;\n          assert(parent.kind == ElementKind.CLASS);\n          this.checkFieldInitialization(<Class>parent, expression);\n        }\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n        flow.set(FlowFlags.ACCESSES_THIS);\n        this.currentType = thisType;\n        return module.local_get(thisLocal.index, thisType.toNativeType());\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.getClass());\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (this.pendingElements.has(local)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            local.internalName\n          );\n          this.currentType = localType;\n          return module.unreachable();\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.isNullableReference && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          uniqueMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.isExternalReference) {\n          this.currentType = Type.funcref;\n          return module.ref_func(functionInstance.internalName, NativeType.Funcref); // TODO\n        }\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    this.error(\n      DiagnosticCode.Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      uniqueMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <value> - must be exact\n    if (expectedType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <value> instanceof <nonValue> - always false\n    if (actualType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.isNullableReference && !expectedType.isNullableReference) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType, expression.expression)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr, actualType.isManaged),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr, actualType.isManaged),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.getClass();\n    if (classReference) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.isNullableReference) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType, expression.expression)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    let contextualClass = contextualType.getClass();\n    if (contextualClass !== null && contextualClass.extends(program.staticArrayPrototype)) {\n      return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(<Expression>elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let totalOverhead = program.totalOverhead;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(totalOverhead));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(totalOverhead));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __newArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.newArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var indexedSet = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!indexedSet) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.newArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], expression),\n        arrayType.isManaged\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        ),\n        true // ArrayBuffer\n      )\n    );\n    for (let i = 0; i < length; ++i) {\n      // this[i] = value\n      stmts.push(\n        module.call(indexedSet.internalName, [\n          module.local_get(tempThis.index, nativeArrayType),\n          module.i32(i),\n          values[i]\n        ], NativeType.None)\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    if (length) this.compileFunction(indexedSet);\n    this.currentType = arrayType;\n    return module.flatten(stmts, nativeArrayType);\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    var arrayInstance = assert(contextualType.getClass());\n    var arrayType = arrayInstance.type;\n    var typeArguments = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype));\n    var elementType = typeArguments[0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __newBuffer(bufferSize, id, buffer)\n        let expr = this.makeCallDirect(program.newBufferInstance, [\n          isWasm64\n            ? module.i64(bufferSize)\n            : module.i32(bufferSize),\n          module.i32(arrayInstance.id),\n          isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var indexedSet = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!indexedSet) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.newBufferInstance, [\n          isWasm64\n            ? module.i64(bufferSize)\n            : module.i32(bufferSize),\n          module.i32(arrayInstance.id)\n        ], expression),\n        arrayType.isManaged\n      )\n    );\n    for (let i = 0; i < length; ++i) {\n      // array[i] = value\n      stmts.push(\n        module.call(indexedSet.internalName, [\n          module.local_get(tempThis.index, nativeArrayType),\n          module.i32(i),\n          values[i]\n        ], NativeType.None)\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    if (length) this.compileFunction(indexedSet);\n    this.currentType = arrayType;\n    return module.flatten(stmts, nativeArrayType);\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.getClass();\n    if (!classReference) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(classType);\n    var nativeClassType = classType.toNativeType();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT);\n      exprs.push(\n        module.call(fieldInstance.internalSetterName, [\n          module.local_get(tempLocal.index, nativeClassType),\n          expr\n        ], NativeType.None)\n      );\n      this.compileFieldSetter(fieldInstance);\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by generated ctor\n      }\n\n      if (fieldType.isReference) {\n        if (!fieldType.isNullableReference) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.call(fieldInstance.internalSetterName, [\n              module.local_get(tempLocal.index, nativeClassType),\n              this.makeZero(fieldType, expression)\n            ], NativeType.None)\n          );\n          this.compileFieldSetter(fieldInstance);\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // generate the default constructor\n    var ctor = this.ensureConstructor(classReference, expression);\n    // note that this is not checking field initialization within the ctor, but\n    // instead checks conditions above with provided fields taken into account.\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(ctor, [], Constraints.NONE, expression),\n        classType.isManaged\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, nativeClassType)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, nativeClassType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.prototype == classPrototype &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      // e.g. `arr: Array<T> = new Array()`\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        uniqueMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        uniqueMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var ctor = this.ensureConstructor(classInstance, expression);\n    if (!ctor.hasDecorator(DecoratorFlags.INLINE)) {\n      // Inlined ctors haven't been compiled yet and are checked upon inline\n      // compilation of their body instead.\n      this.checkFieldInitialization(classInstance, expression);\n    }\n    return this.compileInstantiate(ctor, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(\n    /** Class wanting a constructor. */\n    classInstance: Class,\n    /** Report node. */\n    reportNode: Node\n  ): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // shortcut if already compiled\n      if (instance.is(CommonFlags.COMPILED)) return instance;\n      // do not attempt to compile if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n    } else {\n      // clone base constructor if a derived class. note that we cannot just\n      // call the base ctor since the derived class may have additional fields.\n      let baseClass = classInstance.base;\n      let contextualTypeArguments = uniqueMap(classInstance.contextualTypeArguments);\n      if (baseClass) {\n        let baseCtor = this.ensureConstructor(baseClass, reportNode);\n        this.checkFieldInitialization(baseClass, reportNode);\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance,\n            // declaration is important, i.e. to access optional parameter initializers\n            (<FunctionDeclaration>baseCtor.declaration).clone()\n          ),\n          null,\n          baseCtor.signature,\n          contextualTypeArguments\n        );\n\n      // otherwise make a default constructor\n      } else {\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance, // bound\n            this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n              CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n            )\n          ),\n          null,\n          new Signature(this.program, null, classInstance.type, classInstance.type),\n          contextualTypeArguments\n        );\n      }\n\n      instance.set(CommonFlags.COMPILED);\n      instance.prototype.setResolvedInstance(\"\", instance);\n      if (classInstance.is(CommonFlags.MODULE_EXPORT)) {\n        instance.set(CommonFlags.MODULE_EXPORT);\n      }\n      classInstance.constructorInstance = instance;\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n\n      // generate body\n      let signature = instance.signature;\n      let module = this.module;\n      let nativeSizeType = this.options.nativeSizeType;\n      let stmts = new Array<ExpressionRef>();\n\n      // {\n      //   this = <COND_ALLOC>\n      //   IF_DERIVED: this = super(this, ...args)\n      //   this.a = X\n      //   this.b = Y\n      //   return this\n      // }\n      stmts.push(\n        this.makeConditionalAllocation(classInstance, 0)\n      );\n      if (baseClass) {\n        let parameterTypes = signature.parameterTypes;\n        let numParameters = parameterTypes.length;\n        let operands = new Array<ExpressionRef>(1 + numParameters);\n        operands[0] = module.local_get(0, nativeSizeType);\n        for (let i = 1; i <= numParameters; ++i) {\n          operands[i] = module.local_get(i, parameterTypes[i - 1].toNativeType());\n        }\n        stmts.push(\n          module.local_set(0,\n            this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false),\n            baseClass.type.isManaged\n          )\n        );\n      }\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n      stmts.push(\n        module.local_get(0, nativeSizeType)\n      );\n      flow.freeScopedLocals();\n      this.currentFlow = previousFlow;\n\n      // make the function\n      let locals = instance.localsByIndex;\n      let varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n      let numOperands = 1 + signature.parameterTypes.length;\n      let numLocals = locals.length;\n      if (numLocals > numOperands) {\n        for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n      }\n      let funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        varTypes,\n        module.flatten(stmts, nativeSizeType)\n      );\n      instance.finalize(module, funcRef);\n    }\n\n    return instance;\n  }\n\n  /** Checks that all class fields have been initialized. */\n  checkFieldInitialization(classInstance: Class, relatedNode: Node | null = null): void {\n    if (classInstance.didCheckFieldInitialization) return;\n    classInstance.didCheckFieldInitialization = true;\n    var ctor = assert(classInstance.constructorInstance);\n    this.checkFieldInitializationInFlow(classInstance, ctor.flow, relatedNode);\n  }\n\n  /** Checks that all class fields have been initialized in the specified flow. */\n  checkFieldInitializationInFlow(classInstance: Class, flow: Flow, relatedNode: Node | null = null): void {\n    var members = classInstance.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let element = _values[i];\n        if (element.kind == ElementKind.FIELD && element.parent == classInstance) {\n          let field = <Field>element;\n          if (!field.initializerNode && !flow.isThisFieldFlag(field, FieldFlags.INITIALIZED)) {\n            if (!field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n              if (relatedNode) {\n                this.errorRelated(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  relatedNode.range,\n                  field.internalName\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  field.internalName\n                );\n              }\n            }\n          } else if (field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n            if (field.type.isReference) {\n              this.warning( // involves a runtime check\n                DiagnosticCode.Property_0_is_always_assigned_before_being_used,\n                field.identifierNode.range,\n                field.internalName\n              );\n            } else {\n              this.pedantic( // is a nop anyway\n                DiagnosticCode.Unnecessary_definite_assignment,\n                field.identifierNode.range\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  compileInstantiate(\n    /** Constructor to call. */\n    ctorInstance: Function,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(ctorInstance.is(CommonFlags.CONSTRUCTOR));\n    var parent = ctorInstance.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    var classInstance = <Class>parent;\n    if (classInstance.type.isUnmanaged || ctorInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect(\n      ctorInstance,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType, reportNode),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let thisType = this.currentType;\n        if (\n          flow.actualFunction.is(CommonFlags.CONSTRUCTOR) &&\n          thisExpression.kind == NodeKind.THIS &&\n          !flow.isThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED) &&\n          !fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED)\n        ) {\n          this.errorRelated(\n            DiagnosticCode.Property_0_is_used_before_being_assigned,\n            expression.range,\n            fieldInstance.identifierNode.range,\n            fieldInstance.internalName\n          );\n        }\n        if (thisType.isNullableReference) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        let ret = module.load(\n          fieldType.byteSize,\n          fieldType.isSignedIntegerValue,\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n        if (fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED) && fieldType.isReference && !fieldType.isNullableReference) {\n          ret = this.makeRuntimeNonNullCheck(ret, fieldType, expression);\n        }\n        return ret;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n        if (!functionInstance) return module.unreachable();\n        if (!this.compileFunction(functionInstance)) return module.unreachable();\n        this.currentType = functionInstance.type;\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType,\n      expression.condition\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType);\n    var ifThenType = this.currentType;\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType);\n    var ifElseType = this.currentType;\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(ifThenExpr, ifThenType, commonType, false, ifThen);\n    ifThenType = commonType;\n    ifElseExpr = this.convertExpression(ifElseExpr, ifElseType, commonType, false, ifElse);\n    ifElseType = commonType;\n    this.currentType = commonType;\n\n    ifThenFlow.freeScopedLocals();\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    return module.if(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue,\n        this.currentType.isManaged\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (isInstance) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PLUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MINUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType, expression.operand),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          // fall back to compare by value\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType, expression.operand));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.isFloatValue\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        expr = this.convertExpression(expr, this.currentType, this.currentType.intType, false, expression.operand);\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, operand);\n            if (type.isReference) {\n              let signatureReference = type.getSignature();\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.getClass();\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"externref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isNumericValue) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.GC, reportNode);\n      }\n    }\n    let classReference = type.getClass();\n    if (classReference) {\n      do {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    } else {\n      let signatureReference = type.getSignature();\n      if (signatureReference) {\n        let thisType = signatureReference.thisType;\n        if (thisType) {\n          if (!this.checkTypeSupported(thisType, reportNode)) {\n            return false;\n          }\n        }\n        let parameterTypes = signatureReference.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n          if (!this.checkTypeSupported(parameterTypes[i], reportNode)) {\n            return false;\n          }\n        }\n        let returnType = signatureReference.returnType;\n        if (!this.checkTypeSupported(returnType, reportNode)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    var parameterNodes = reportNode.parameters;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      let parameterReportNode: Node;\n      if (parameterNodes.length > i) parameterReportNode = parameterNodes[i];\n      else parameterReportNode = reportNode;\n      if (!this.checkTypeSupported(parameterTypes[i], parameterReportNode)) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF: return module.ref_null(type.toNativeType());\n      case TypeKind.I31REF: return module.i31_new(module.i32(0));\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n      case TypeKind.I31REF: return module.i31_new(module.i32(1));\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u32>(x) & 0x7FFFFFFF) - 1 <= 0x7F800000 - 1\n        //\n        // and finally:\n        // (reinterpret<u32>(x) << 1) - (1 << 1) <= ((0x7F800000 - 1) << 1)\n        return module.binary(BinaryOp.LeU32,\n          module.binary(BinaryOp.SubI32,\n            module.binary(BinaryOp.ShlI32,\n              module.unary(UnaryOp.ReinterpretF32, expr),\n              module.i32(1)\n            ),\n            module.i32(2) // 1 << 1\n          ),\n          module.i32(0xFEFFFFFE) // (0x7F800000 - 1) << 1\n        );\n      }\n      case TypeKind.F64: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF) - 1 <= 0x7FF0000000000000 - 1\n        //\n        // and finally:\n        // (reinterpret<u64>(x) << 1) - (1 << 1) <= ((0x7FF0000000000000 - 1) << 1)\n        return module.binary(BinaryOp.LeU64,\n          module.binary(BinaryOp.SubI64,\n            module.binary(BinaryOp.ShlI64,\n              module.unary(UnaryOp.ReinterpretF64, expr),\n              module.i64(1)\n            ),\n            module.i64(2) // 1 << 1\n          ),\n          module.i64(0xFFFFFFFE, 0xFFDFFFFF) // (0x7FF0000000000000 - 1) << 1\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: {\n        // Needs to be true (i.e. not zero) when the ref is _not_ null,\n        // which means `ref.is_null` returns false (i.e. zero).\n        return module.unary(UnaryOp.EqzI32, module.ref_is(RefIsOp.RefIsNull, expr));\n\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    if (classInstance.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let allocInstance = program.allocInstance;\n      this.compileFunction(allocInstance);\n      return module.call(allocInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset)\n      ], options.nativeSizeType);\n    } else {\n      let newInstance = program.newInstance;\n      this.compileFunction(newInstance);\n      return module.call(newInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset),\n        module.i32(classInstance.id)\n      ], options.nativeSizeType);\n    }\n  }\n\n  /** Makes a conditional allocation where `this` might not have been initialized yet. */\n  makeConditionalAllocation(\n    classInstance: Class,\n    thisIndex: i32\n  ): ExpressionRef {\n    var module = this.module;\n    var classType = classInstance.type;\n    var nativeClassType = classType.toNativeType();\n    assert(nativeClassType == this.options.nativeSizeType);\n    return module.if(\n      module.unary(nativeClassType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n        module.local_get(thisIndex, nativeClassType)\n      ),\n      module.local_set(thisIndex,\n        this.makeAllocation(classInstance),\n        classInstance.type.isManaged\n      )\n    );\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType, Constraints.CONV_IMPLICIT);\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType, fieldPrototype.declaration);\n      }\n\n      this.compileFieldSetter(field);\n      stmts.push(\n        module.call(field.internalSetterName, [\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr\n        ], NativeType.None)\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return this.module.unreachable();\n\n    var stringInstance = program.stringInstance;\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT);\n    } else {\n      messageArg = this.makeZero(stringInstance.type, codeLocation);\n    }\n\n    return this.makeStaticAbort(messageArg, codeLocation);\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeStaticAbort(\n    /** Message argument of type string. May be zero. */\n    messageExpr: ExpressionRef,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var filenameExpr = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageExpr,\n          filenameExpr,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr, type.isManaged),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected null\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = type.nonNullableType;\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.isReference && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr, type.isManaged),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = toType;\n    return expr;\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n} from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(element.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      sb.push(element.getParameterName(i));\n      if (i >= requiredParameters) sb.push(\"?\");\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    if (!isInterface) {\n      indent(sb, this.indentLevel);\n      sb.push(\"static wrap(ptr: usize): \");\n      sb.push(name);\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"valueOf(): usize;\\n\");\n    }\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      case TypeKind.EQREF: return \"eqref\";\n      case TypeKind.I31REF: return \"i31ref\";\n      case TypeKind.DATAREF: return \"dataref\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = bigint;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = bigint;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = bigint;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = bigint;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = boolean | number;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Exported_generic_function_or_class_has_no_concrete_instances = 232,\n  Property_0_is_always_assigned_before_being_used = 233,\n  Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime = 234,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unnecessary_definite_assignment = 906,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal = 1351,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  Variable_0_used_before_its_declaration = 2448,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned = 2564,\n  Property_0_is_used_before_being_assigned = 2565,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 232: return \"Exported generic function or class has no concrete instances.\";\n    case 233: return \"Property '{0}' is always assigned before being used.\";\n    case 234: return \"Expression refers to a static element that does not compile to a value at runtime.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 906: return \"Unnecessary definite assignment.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 1351: return \"An identifier or keyword cannot immediately follow a numeric literal.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2448: return \"Variable '{0}' used before its declaration.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2564: return \"Property '{0}' has no initializer and is not assigned in the constructor before 'this' is used or returned.\";\n    case 2565: return \"Property '{0}' is used before being assigned.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak,\n  COLOR_CYAN,\n  COLOR_YELLOW,\n  COLOR_RED,\n  COLOR_MAGENTA,\n  COLOR_RESET,\n  isColorsEnabled,\n  setColorsEnabled\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_CYAN;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n  var wasColorsEnabled = setColorsEnabled(useColors);\n\n  // general information\n  var sb: string[] = [];\n  if (isColorsEnabled()) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (isColorsEnabled()) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  setColorsEnabled(wasColorsEnabled);\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nfunction formatDiagnosticContext(range: Range): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (isColorsEnabled()) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (isColorsEnabled()) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string, singleQuoted: bool = false): void {\n    var sb = this.sb;\n    var off = 0;\n    var quote = singleQuoted ? \"'\" : \"\\\"\";\n    sb.push(quote);\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (!singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n    sb.push(quote);\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature !== null || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL && !initializer) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global,\n  Field,\n  Class\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChildAt,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  uniqueMap\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  NONE = 0,\n  INITIALIZED = 1 << 0\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    if (parentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    if (inlineFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Outer flow. Only relevant for first-class functions. */\n  outer: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Field flags on `this`. Constructors only. */\n  thisFieldFlags: Map<Field,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    branch.outer = this.outer;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    if (this.actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let thisFieldFlags = assert(this.thisFieldFlags);\n      branch.thisFieldFlags = uniqueMap<Field,FieldFlags>(thisFieldFlags);\n    } else {\n      assert(!this.thisFieldFlags);\n    }\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Funcref: { temps = parentFunction.tempFuncrefs; break; }\n      case <u32>NativeType.Externref: { temps = parentFunction.tempExternrefs; break; }\n      case <u32>NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case <u32>NativeType.Eqref: { temps = parentFunction.tempEqrefs; break; }\n      case <u32>NativeType.I31ref: { temps = parentFunction.tempI31refs; break; }\n      case <u32>NativeType.Dataref: { temps = parentFunction.tempDatarefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    local.resetTemporaryName();\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Funcref: {\n        let tempFuncrefs = parentFunction.tempFuncrefs;\n        if (tempFuncrefs) temps = tempFuncrefs;\n        else parentFunction.tempFuncrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Externref: {\n        let tempExternrefs = parentFunction.tempExternrefs;\n        if (tempExternrefs) temps = tempExternrefs;\n        else parentFunction.tempExternrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Eqref: {\n        let tempEqrefs = parentFunction.tempEqrefs;\n        if (tempEqrefs) temps = tempEqrefs;\n        else parentFunction.tempEqrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.I31ref: {\n        let tempI31refs = parentFunction.tempI31refs;\n        if (tempI31refs) temps = tempI31refs;\n        else parentFunction.tempI31refs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Dataref: {\n        let tempDatarefs = parentFunction.tempDatarefs;\n        if (tempDatarefs) temps = tempDatarefs;\n        else parentFunction.tempDatarefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    scopedLocal.setTemporaryName(name);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped dummy local of the specified name. */\n  addScopedDummyLocal(name: string, type: Type): Local {\n    var scopedDummy = new Local(name, -1, type, this.parentFunction);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedDummy.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedDummy);\n    return scopedDummy;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) {\n      this.scopedLocals = scopedLocals = new Map();\n    } else if (scopedLocals.has(name)) {\n      let existingLocal = assert(scopedLocals.get(name));\n      if (reportNode) {\n        if (!existingLocal.declaration.range.source.isNative) {\n          this.parentFunction.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range,\n            existingLocal.declaration.name.range,\n            name\n          );\n        } else {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range, name\n          );\n        }\n      }\n      return existingLocal;\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees a single scoped local by its name. */\n  freeScopedDummyLocal(name: string): void {\n    var scopedLocals = assert(this.scopedLocals);\n    assert(scopedLocals.has(name));\n    let local = assert(scopedLocals.get(name));\n    assert(local.index == -1);\n    scopedLocals.delete(name);\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Initializes `this` field flags. */\n  initThisFieldFlags(): void {\n    var actualFunction = this.actualFunction;\n    assert(actualFunction.is(CommonFlags.CONSTRUCTOR));\n    var actualParent = actualFunction.parent;\n    assert(actualParent.kind == ElementKind.CLASS);\n    var actualClass = <Class>actualParent;\n    this.thisFieldFlags = new Map();\n    var members = actualClass.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = _values[i];\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          if (\n            // guaranteed by super\n            field.parent != actualClass ||\n            // has field initializer\n            field.initializerNode !== null ||\n            // is initialized as a ctor parameter\n            field.prototype.parameterIndex != -1 ||\n            // is safe to initialize with zero\n            field.type.isAny(TypeFlags.VALUE | TypeFlags.NULLABLE)\n          ) {\n            this.setThisFieldFlag(field, FieldFlags.INITIALIZED);\n          }\n        }\n      }\n    }\n  }\n\n  /** Tests if the specified `this` field has the specified flag or flags. */\n  isThisFieldFlag(field: Field, flag: FieldFlags): bool {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags != null && fieldFlags.has(field)) {\n      return (changetype<FieldFlags>(fieldFlags.get(field)) & flag) == flag;\n    }\n    return false;\n  }\n\n  /** Sets the specified flag or flags on the given `this` field. */\n  setThisFieldFlag(field: Field, flag: FieldFlags): void {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      assert(this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n      if (fieldFlags.has(field)) {\n        let flags = changetype<FieldFlags>(fieldFlags.get(field));\n        fieldFlags.set(field, flags | flag);\n      } else {\n        fieldFlags.set(field, flag);\n      }\n    } else {\n      assert(!this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n    }\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n    this.thisFieldFlags = other.thisFieldFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      thisLocalFlags[i] = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n    }\n\n    // field flags do not matter here since there's only INITIALIZED, which can\n    // only be set if it has been observed prior to entering the branch.\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        thisLocalFlags[i] = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n      }\n    }\n\n    // field flags (currently only INITIALIZED, so can simplify)\n    var leftFieldFlags = left.thisFieldFlags;\n    if (leftFieldFlags) {\n      let newFieldFlags = new Map<Field,FieldFlags>();\n      let rightFieldFlags = assert(right.thisFieldFlags);\n      for (let _keys = Map_keys(leftFieldFlags), i = 0, k = _keys.length; i < k; ++i) {\n        let key = _keys[i];\n        let leftFlags = changetype<FieldFlags>(leftFieldFlags.get(key));\n        if (\n          (leftFlags & FieldFlags.INITIALIZED) != 0 && rightFieldFlags.has(key) && \n          (changetype<FieldFlags>(rightFieldFlags.get(key)) & FieldFlags.INITIALIZED)\n        ) {\n          newFieldFlags.set(key, FieldFlags.INITIALIZED);\n        }\n      }\n      this.thisFieldFlags = newFieldFlags;\n    } else {\n      assert(!right.thisFieldFlags);\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.isShortIntegerValue) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.isNullableReference) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.isNullableReference) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.isShortIntegerValue) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.isSignedIntegerValue\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChildAt(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return toType.isShortIntegerValue && (\n    !fromType.isIntegerValue ||                                    // i.e. float to small int\n    fromType.size > toType.size ||                                 // larger int to small int\n    fromType.isSignedIntegerValue != toType.isSignedIntegerValue   // signedness mismatch\n  );\n}\n\nexport { findUsedLocals } from \"./passes/findusedlocals\";\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sets the `exportRuntime` option. */\nexport function setExportRuntime(options: Options, exportRuntime: bool): void {\n  options.exportRuntime = exportRuntime;\n}\n\n/** Default stack size. */\nexport const DEFAULT_STACK_SIZE = 16384;\n\n/** Sets the `stackSize` option. */\nexport function setStackSize(options: Options, stackSize: i32): void {\n  options.stackSize = stackSize;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n/** Garbage collection. */\nexport const FEATURE_GC = Feature.GC;\n/** Memory64. */\nexport const FEATURE_MEMORY64 = Feature.MEMORY64;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file, or `null` to indicate not found. */\n  text: string | null,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { BuiltinNames } from \"./builtins\";\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\nexport type CString = usize;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Externref: NativeType = 8 /* _BinaryenTypeExternref */;\n  export const Anyref: NativeType = 9 /* _BinaryenTypeAnyref */;\n  export const Eqref: NativeType = 10 /* _BinaryenTypeEqref */;\n  export const I31ref: NativeType = 11 /* _BinaryenTypeI31ref */;\n  export const Dataref: NativeType = 12 /* _BinaryenTypeDataref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  GC = 1024 /* _BinaryenFeatureGC */,\n  Memory64 = 2048 /* _BinaryenFeatureMemory64 */,\n  TypedFunctionReferences  = 4096, /* _BinaryenTypedFunctionReferences */\n  All = 8191 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  MemorySize = 20 /* _BinaryenMemorySizeId */,\n  MemoryGrow = 21 /* _BinaryenMemoryGrowId */,\n  Nop = 22 /* _BinaryenNopId */,\n  // Prefetch (obsolete)\n  Unreachable = 24 /* _BinaryenUnreachableId */,\n  AtomicRMW = 25 /* _BinaryenAtomicRMWId */,\n  AtomicCmpxchg = 26 /* _BinaryenAtomicCmpxchgId */,\n  AtomicWait = 27 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 28 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 29 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 30 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 31 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 32 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 33 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 34 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 35 /* _BinaryenSIMDLoadId */,\n  SIMDLoadStoreLane = 36 /* _BinaryenSIMDLoadStoreLaneId */,\n  SIMDWiden = 37 /* _BinaryenSIMDWidenId */,\n  MemoryInit = 38 /* _BinaryenMemoryInitId */,\n  DataDrop = 39 /* _BinaryenDataDropId */,\n  MemoryCopy = 40 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 41 /* _BinaryenMemoryFillId */,\n  Pop = 42 /* _BinaryenPopId */,\n  RefNull = 43 /* _BinaryenRefNullId */,\n  RefIs = 44 /* _BinaryenRefIsId */,\n  RefFunc = 45 /* _BinaryenRefFuncId */,\n  RefEq = 46 /* _BinaryenRefEqId */,\n  Try = 47 /* _BinaryenTryId */,\n  Throw = 48 /* _BinaryenThrowId */,\n  Rethrow = 49 /* _BinaryenRethrowId */,\n  TupleMake = 50 /* _BinaryenTupleMakeId */,\n  TupleExtract = 51 /* _BinaryenTupleExtractId */,\n  I31New = 52 /* _BinaryenI31NewId */,\n  I31Get = 53 /* _BinaryenI31GetId */,\n  CallRef = 54 /* _BinaryenCallRefId */,\n  RefTest = 55 /* _BinaryenRefTestId */,\n  RefCast = 56 /* _BinaryenRefCastId */,\n  BrOn = 57 /* _BinaryenBrOnId */,\n  RttCanon = 58 /* _BinaryenRttCanonId */,\n  RttSub = 59 /* _BinaryenRttSubId */,\n  StructNew = 60 /* _BinaryenStructNewId */,\n  StructGet = 61 /* _BinaryenStructGetId */,\n  StructSet = 62 /* _BinaryenStructSetId */,\n  ArrayNew = 63 /* _BinaryenArrayNewId */,\n  ArrayGet = 64 /* _BinaryenArrayGetId */,\n  ArraySet = 65 /* _BinaryenArraySetId */,\n  ArrayLen = 66 /* _BinaryenArrayLenId */,\n  RefAs = 67 /* _BinaryenRefAsId */\n}\n\nexport enum ExternalKind {\n  Function = 0, /* _BinaryenExternalFunction */\n  Table = 1, /* _BinaryenExternalTable */\n  Memory = 2, /* _BinaryenExternalMemory */\n  Global = 3, /* _BinaryenExternalGlobal */\n  Event = 4 /* _BinaryenExternalEvent */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  AbsI8x16 = 67 /* _BinaryenAbsVecI8x16 */,\n  NegI8x16 = 68 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 69 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  BitmaskI8x16 = 71 /* _BinaryenBitmaskVecI8x16 */,\n  PopcntI8x16 = 72 /* TODO_BinaryenPopcntVecI8x16 */,\n  AbsI16x8 = 73 /* _BinaryenAbsVecI16x8 */,\n  NegI16x8 = 74 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 75 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 76 /* _BinaryenAllTrueVecI16x8 */,\n  BitmaskI16x8 = 77 /* _BinaryenBitmaskVecI16x8 */,\n  AbsI32x4 = 78 /* _BinaryenAbsVecI32x4 */,\n  NegI32x4 = 79 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 80 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 81 /* _BinaryenAllTrueVecI32x4 */,\n  BitmaskI32x4 = 82 /* _BinaryenBitmaskVecI32x4 */,\n  NegI64x2 = 83 /* _BinaryenNegVecI64x2 */,\n  AllTrueI64x2 = 81 /* TODO_BinaryenAllTrueVecI64x2 */, // FIXME: missing opcode in binaryen\n  BitmaskI64x2 = 84 /* TODO_BinaryenBitmaskVecI64x2 */,\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  CeilF32x4 = 88 /* _BinaryenCeilVecF32x4 */,\n  FloorF32x4 = 89 /* _BinaryenFloorVecF32x4 */,\n  TruncF32x4 = 90 /* BinaryenTruncVecF32x4 */,\n  NearestF32x4 = 91 /* BinaryenNearestVecF32x4 */,\n  AbsF64x2 = 92 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 93 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 94 /* _BinaryenSqrtVecF64x2 */,\n  CeilF64x2 = 95 /* _BinaryenCeilVecF64x2 */,\n  FloorF64x2 = 96 /* _BinaryenFloorVecF64x2 */,\n  TruncF64x2 = 97 /* _BinaryenTruncVecF64x2 */,\n  NearestF64x2 = 98 /* _BinaryenNearestVecF64x2 */,\n  ExtAddPairwiseI8x16ToI16x8 = 99 /* TODO_BinaryenExtAddPairwiseSVecI8x16ToI16x8 */,\n  ExtAddPairwiseU8x16ToU16x8 = 100 /* TODO_BinaryenExtAddPairwiseUVecI8x16ToI16x8 */,\n  ExtAddPairwiseI16x8ToI32x4 = 101 /* TODO_BinaryenExtAddPairwiseSVecI16x8ToI32x4 */,\n  ExtAddPairwiseU16x8ToU32x4 = 102 /* TODO_BinaryenExtAddPairwiseUVecI16x8ToI32x4 */,\n  TruncSatF32x4ToI32x4 = 103 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 104 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 105 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 106 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 107 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 108 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 109 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 110 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  ExtendLowI8x16ToI16x8 = 111 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  ExtendHighI8x16ToI16x8 = 112 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  ExtendLowU8x16ToU16x8 = 113 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  ExtendHighU8x16ToU16x8 = 114 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  ExtendLowI16x8ToI32x4 = 115 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  ExtendHighI16x8ToI32x4 = 116 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  ExtendLowU16x8ToU32x4 = 117 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  ExtendHighU16x8ToU32x4 = 118 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */,\n  ExtendLowI32x4ToI64x2 = 119 /* TODO_BinaryenWidenLowSVecI32x4ToVecI64x2 */,\n  ExtendHighI32x4ToI64x2 = 120 /* TODO_BinaryenWidenHighSVecI32x4ToVecI64x2 */,\n  ExtendLowU32x4ToU64x2 = 121 /* TODO_BinaryenWidenLowUVecI32x4ToVecI64x2 */,\n  ExtendHighU32x4ToU64x2 = 122 /* TODO_BinaryenWidenHighUVecI32x4ToVecI64x2 */,\n  ConvertLowI32x4ToF64x2 = 123 /* TODO_BinaryenConvertLowSVecI32x4ToVecF64x2 */,\n  ConvertLowU32x4ToF64x2 = 124 /* TODO_BinaryenConvertLowUVecI32x4ToVecF64x2 */,\n  TruncSatZeroF64x2ToI32x4 = 125 /* TODO_BinaryenTruncSatZeroSVecF64x2ToVecI32x4 */,\n  TruncSatZeroF64x2ToU32x4 = 126 /* TODO_BinaryenTruncSatZeroUVecF64x2ToVecI32x4 */,\n  DemoteZeroF64x2ToF32x4 = 127 /* TODO_BinaryenDemoteZeroVecF64x2ToVecF32x4 */,\n  PromoteLowF32x4ToF64x2 = 128 /* TODO_BinaryenPromoteLowVecF32x4ToVecF64x2 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrI32 = 11 /* _BinaryenShrSInt32 */,\n  ShrU32 = 12 /* _BinaryenShrUInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrI64 = 36 /* _BinaryenShrSInt64 */,\n  ShrU64 = 37 /* _BinaryenShrUInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqI64x2 = 96 /* TODO_BinaryenEqVecI64x2 */, // FIXME: missing opcode in binaryen\n  NeI64x2 = 97 /* TODO_BinaryenNeVecI64x2 */, // FIXME: missing opcode in binaryen\n  LtI64x2 = 98 /* TODO_BinaryenLtSVecI64x2 */, // FIXME: missing opcode in binaryen\n  LtU64x2 = 99 /* TODO_BinaryenLtUVecI64x2 */, // FIXME: missing opcode in binaryen\n  GtI64x2 = 100 /* TODO_BinaryenGtSVecI64x2 */, // FIXME: missing opcode in binaryen\n  GtU64x2 = 101 /* TODO_BinaryenGtUVecI64x2 */, // FIXME: missing opcode in binaryen\n  LeI64x2 = 102 /* TODO_BinaryenLeSVecI64x2 */, // FIXME: missing opcode in binaryen\n  LeU64x2 = 103 /* TODO_BinaryenLeUVecI64x2 */, // FIXME: missing opcode in binaryen\n  GeI64x2 = 104 /* TODO_BinaryenGeSVecI64x2 */, // FIXME: missing opcode in binaryen\n  GeU64x2 = 105 /* TODO_BinaryenGeUVecI64x2 */, // FIXME: missing opcode in binaryen\n  // 106?\n  EqF32x4 = 107 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 108 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 109 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 110 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 111 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 112 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 113 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 114 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 115 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 116 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 117 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 118 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 119 /* _BinaryenAndVec128 */,\n  OrV128 = 120 /* _BinaryenOrVec128 */,\n  XorV128 = 121 /* _BinaryenXorVec128 */,\n  AndNotV128 = 122 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 123 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 124 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 125 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 126 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 127 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 128 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 129 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 130 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 131 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 132 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 133 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 134 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 135 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 136 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 137 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 138 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 139 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 140 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 141 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 142 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 143 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 144 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 145 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 146 /* _BinaryenAvgrUVecI16x8 */,\n  Q15MulrSatI16x8 = 147 /* TODO_BinaryenQ15MulrSatSVecI16x8 */,\n  ExtMulLowI16x8 = 148 /* TODO_BinaryenExtMulLowSVecI16x8 */,\n  ExtMulHighI16x8 = 149 /* TODO_BinaryenExtMulHighSVecI16x8 */,\n  ExtMulLowU16x8 = 150 /* TODO_BinaryenExtMulLowUVecI16x8 */,\n  ExtMulHighU16x8 = 151 /* TODO_BinaryenExtMulHighUVecI16x8 */,\n  AddI32x4 = 152 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 153 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 154 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 155 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 156 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 157 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 158 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 159 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 164 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 165 /* _BinaryenSubVecI64x2 */,\n  MulI64x2 = 166 /* _BinaryenMulVecI64x2 */,\n  ExtMulLowI64x2 = 167 /* TODO_BinaryenExtMulLowSVecI64x2 */,\n  ExtMulHighI64x2 = 168 /* TODO_BinaryenExtMulHighSVecI64x2 */,\n  ExtMulLowU64x2 = 169 /* TODO_BinaryenExtMulLowUVecI64x2 */,\n  ExtMulHighU64x2 = 170 /* TODO_BinaryenExtMulHighUVecI64x2 */,\n  AddF32x4 = 171 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 172 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 173 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 174 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 175 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 176 /* _BinaryenMaxVecF32x4 */,\n  PminF32x4 = 177 /* _BinaryenPMinVecF32x4 */,\n  PmaxF32x4 = 178 /* _BinaryenPMaxVecF32x4 */,\n  AddF64x2 = 179 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 180 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 181 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 182 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 183 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 184 /* _BinaryenMaxVecF64x2 */,\n  PminF64x2 = 185 /* _BinaryenPMinVecF64x2 */,\n  PmaxF64x2 = 186 /* _BinaryenPMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 187 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 188 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 189 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 190 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 191 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */,\n  SignSelectV8x16 = 5 /* TODO_BinaryenSignSelectVec8x16 */,\n  SignSelectV16x8 = 6 /* TODO_BinaryenSignSelectVec16x8 */,\n  SignSelectV32x4 = 7 /* TODO_BinaryenSignSelectVec32x4 */,\n  SignSelectV64x2 = 8 /* TODO_BinaryenSignSelectVec64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */,\n  Load32Zero = 10 /* TODO_BinaryenLoad32Zero */,\n  Load64Zero = 11 /* TODO_BinaryenLoad64Zero */\n}\n\nexport enum SIMDLoadStoreLaneOp {\n  LoadLaneV8x16 = 0 /* TODO_BinaryenLoadLaneVec8x16 */,\n  LoadLaneV16x8 = 1 /* TODO_BinaryenLoadLaneVec16x8 */,\n  LoadLaneV32x4 = 2 /* TODO_BinaryenLoadLaneVec32x4 */,\n  LoadLaneV64x2 = 3 /* TODO_BinaryenLoadLaneVec64x2 */,\n  StoreLaneV8x16 = 4 /* TODO_BinaryenStoreLaneVec8x16 */,\n  StoreLaneV16x8 = 5 /* TODO_BinaryenStoreLaneVec16x8 */,\n  StoreLaneV32x4 = 6 /* TODO_BinaryenStoreLaneVec32x4 */,\n  StoreLaneV64x2 = 7 /* TODO_BinaryenStoreLaneVec64x2 */\n}\n\n// TODO: Widen with lane immediate, did these make it?\nexport enum SIMDWidenOp {\n  WidenSVecI8x16ToVecI32x4 = 0 /* TODO_BinaryenWidenSVecI8x16ToVecI32x4 */,\n  WidenUVecI8x16ToVecI32x4 = 1 /* TODO_BinaryenWidenUVecI8x16ToVecI32x4 */\n}\n\nexport enum RefIsOp {\n  RefIsNull = 0 /* _BinaryenRefIsNull */,\n  RefIsFunc = 1 /* _BinaryenRefIsFunc */,\n  RefIsData = 2 /* _BinaryenRefIsData */,\n  RefIsI31 = 3 /* _BinaryenRefIsI31 */\n}\n\nexport enum RefAsOp {\n  RefAsNonNull = 0 /* _BinaryenRefAsNonNull */,\n  RefAsFunc = 1 /* _BinaryenRefAsFunc */,\n  RefAsData = 2 /* _BinaryenRefAsData */,\n  RefAsI31 = 3 /* _BinaryenRefAsI31 */\n}\n\nexport enum BrOnOp {\n  BrOnNull = 0 /* TODO_BinaryenBrOnNull */,\n  BrOnCast = 1 /* TODO_BinaryenBrOnCast */,\n  BrOnFunc = 2 /* TODO_BinaryenBrOnFunc */,\n  BrOnData = 3 /* TODO_BinaryenBrOnData */,\n  BrOnI31 = 4 /* TODO_BinaryenBrOnI31 */\n}\n\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef,\n    /** Whether a shadow stack is used. */\n    public useShadowStack: bool\n  ) {\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(useShadowStack: bool): Module {\n    return new Module(binaryen._BinaryenModuleCreate(), useShadowStack);\n  }\n\n  static createFrom(buffer: Uint8Array, useShadowStack: bool): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length), useShadowStack);\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) {\n      binaryen.__i32_store8(out + i, bytes[i]);\n    }\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(type: NativeType): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref, type);\n  }\n\n  ref_eq(left: ExpressionRef, right: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenRefEq(this.ref, left, right);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  memory_size(): ExpressionRef {\n    return binaryen._BinaryenMemorySize(this.ref);\n  }\n\n  memory_grow(delta: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenMemoryGrow(this.ref, delta);\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  tostack(value: ExpressionRef): ExpressionRef {\n    if (this.useShadowStack) {\n      let type = binaryen._BinaryenExpressionGetType(value);\n      assert(type == NativeType.I32 || type == NativeType.Unreachable);\n      return this.call(BuiltinNames.tostack, [ value ], type);\n    }\n    return value;\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    isManaged: bool,\n    type: NativeType = NativeType.Auto,\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    if (isManaged && this.useShadowStack) {\n      value = this.tostack(value);\n    }\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef,\n    isManaged: bool\n  ): ExpressionRef {\n    if (isManaged && this.useShadowStack) {\n      value = this.tostack(value);\n    }\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        )\n      : binaryen._BinaryenCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(\"0\"); // TODO: multiple tables\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(\n          this.ref, cStr, index, cArr, operands ? operands.length : 0, params, results\n        )\n      : binaryen._BinaryenCallIndirect(\n          this.ref, cStr, index, cArr, operands ? operands.length : 0, params, results\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  // try(\n  //   body: ExpressionRef,\n  //   catchEvents: string[],\n  //   catchBodies: ExpressionRef[]\n  // ): ExpressionRef {\n  //   var numCatchEvents = catchEvents.length;\n  //   var strs = new Array<usize>(numCatchEvents);\n  //   for (let i = 0; i < numCatchEvents; ++i) {\n  //     strs[i] = this.allocStringCached(catchEvents[i]);\n  //   }\n  //   var cArr1 = allocPtrArray(strs);\n  //   var cArr2 = allocPtrArray(catchBodies);\n  //   var ret = binaryen._BinaryenTry(this.ref, body, cArr1, numCatchEvents, cArr2, catchBodies.length);\n  //   binaryen._free(cArr2);\n  //   binaryen._free(cArr1);\n  //   return ret;\n  // }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    target: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    return binaryen._BinaryenRethrow(this.ref, cStr);\n  }\n\n  // multi value (pseudo instructions)\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types / gc\n\n  ref_is(\n    op: RefIsOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIs(this.ref, op, expr);\n  }\n\n  ref_as(\n    op: RefAsOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefAs(this.ref, op, expr);\n  }\n\n  ref_func(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr, type);\n  }\n\n  i31_new(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenI31New(this.ref, value);\n  }\n\n  i31_get(\n    expr: ExpressionRef,\n    signed: bool\n  ): ExpressionRef {\n    return binaryen._BinaryenI31Get(this.ref, expr, signed);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(\n      this.ref,\n      cStr,\n      params,\n      results,\n      cArr,\n      varTypes ? varTypes.length : 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  hasFunction(name: string): bool {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr) != 0;\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(\n    result: NativeType,\n    paramTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  hasExport(externalName: string): bool {\n    var cStr = this.allocStringCached(externalName);\n    return binaryen._BinaryenGetExport(this.ref, cStr) != 0;\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(\n      this.ref, cStr1, cStr2, cStr3, attribute, params, results\n    );\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let segment = segments[i];\n      let buffer = segment.buffer;\n      let offset = segment.offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(\n      this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared\n    );\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) {\n      binaryen._free(segs[i]);\n    }\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(\n      this.ref, initial, maximum, cArr, numNames, offset\n    );\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getFastMath(): bool {\n    return binaryen._BinaryenGetFastMath();\n  }\n\n  setFastMath(on: bool): void {\n    binaryen._BinaryenSetFastMath(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  getAllowInliningFunctionsWithLoops(): bool {\n    return binaryen._BinaryenGetAllowInliningFunctionsWithLoops();\n  }\n\n  setAllowInliningFunctionsWithLoops(enabled: bool): void {\n    binaryen._BinaryenSetAllowInliningFunctionsWithLoops(enabled);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPass(pass: string, func: FunctionRef = 0): void {\n    var cStr = allocString(pass);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n    }\n    binaryen._free(cStr);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames - 1; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(optimizeLevel: i32, shrinkLevel: i32, debugInfo: bool = false): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    this.setOptimizeLevel(optimizeLevel);\n    this.setShrinkLevel(shrinkLevel);\n    this.setDebugInfo(debugInfo);\n    this.setFastMath(true);\n    this.clearPassArguments();\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel == 0) {\n      this.setAlwaysInlineMaxSize(12);\n      this.setFlexibleInlineMaxSize(70);\n      this.setOneCallerInlineMaxSize(200);\n      this.setAllowInliningFunctionsWithLoops(optimizeLevel >= 3);\n    } else {\n      this.setAlwaysInlineMaxSize(\n        optimizeLevel <= 1 || shrinkLevel >= 2\n          ? 2\n          : 6\n      );\n      this.setFlexibleInlineMaxSize(65);\n      this.setOneCallerInlineMaxSize(80);\n      this.setAllowInliningFunctionsWithLoops(false);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n        passes.push(\"ssa-nomerge\");\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"merge-blocks\");\n        passes.push(\"precompute-propagate\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"flatten\");\n        passes.push(\"vacuum\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"merge-locals\");\n\n        passes.push(\"code-folding\");\n        passes.push(\"flatten\");\n        passes.push(\"vacuum\");\n        passes.push(\"local-cse\");\n        passes.push(\"reorder-locals\");\n      }\n      passes.push(\"optimize-instructions\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"dce\");\n      }\n      passes.push(\"remove-unused-names\");\n      passes.push(\"remove-unused-brs\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"inlining\");\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n        passes.push(\"licm\");\n      }\n      passes.push(\"simplify-locals-nostructure\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (this.getLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"precompute-propagate\");\n\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"inlining\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"coalesce-locals\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-nonfunction-module-elements\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return binary;\n  }\n\n  toText(watFormat: bool = true): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStringsToPointers: Map<string,usize> = new Map();\n  private cachedPointersToStrings: Map<usize,string | null> = new Map();\n\n  allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cached = this.cachedStringsToPointers;\n    if (cached.has(str)) return changetype<usize>(cached.get(str));\n    var ptr = allocString(str);\n    cached.set(str, ptr);\n    return ptr;\n  }\n\n  readStringCached(ptr: usize): string | null {\n    // Binaryen internalizes names, so using this method where it's safe can\n    // avoid quite a bit of unnecessary garbage.\n    if (ptr == 0) return null;\n    var cached = this.cachedPointersToStrings;\n    if (cached.has(ptr)) return changetype<string>(this.cachedPointersToStrings.get(ptr));\n    var str = readString(ptr);\n    cached.set(ptr, str);\n    return str;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStringsToPointers), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStringsToPointers.clear();\n    this.cachedPointersToStrings.clear();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an externref as it is opaque\n          case <u32>NativeType.Externref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(\n          this.ref, globalName, binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenUnary(\n          this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1\n        );\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenBinary(\n          this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2\n        );\n      }\n    }\n    return 0;\n  }\n\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(\n    expr: ExpressionRef,\n    flags: ExpressionRunnerFlags,\n    maxDepth: i32 = 50,\n    maxLoopIterations: i32 = 1\n  ): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function isConstZero(expr: ExpressionRef): bool {\n  if (getExpressionId(expr) != ExpressionId.Const) return false;\n  var type = getExpressionType(expr);\n  if (type == NativeType.I32) return getConstValueI32(expr) == 0;\n  if (type == NativeType.I64) return getConstValueI64Low(expr) == 0 && getConstValueI64High(expr) == 0;\n  if (type == NativeType.F32) return getConstValueF32(expr) == 0;\n  if (type == NativeType.F64) return getConstValueF64(expr) == 0;\n  return false;\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChildAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChildAt(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperandAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperandAt(expr, index);\n}\n\nexport function getMemoryGrowDelta(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenMemoryGrowGetDelta(expr);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition, false); // u32\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, NativeType.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  DanglingPop = 2048 /* _BinaryenSideEffectDanglingPop */,\n  Any = 4095 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var len = u8s.length;\n  var ptr = binaryen._malloc(len);\n  for (let i = 0; i < len; ++i) {\n    binaryen.__i32_store8(ptr + i, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var len = i32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var len = u32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nexport function allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var len = ptrs.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0, k = len; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      len += 1;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else {\n      len += 4;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1) >>> 0;\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      assert(u < 0x200000, \"Invalid Unicode code point during allocString\");\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, len: i32): Uint8Array {\n  var ret = new Uint8Array(len);\n  for (let i = 0; i < len; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        assert(false, \"Invalid UTF8 sequence during readString\");\n      }\n    }\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >>> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) {\n    return false;\n  }\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: {\n      return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    }\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return (\n          numChildren > 0 &&\n          needsExplicitUnreachable(binaryen._BinaryenBlockGetChildAt(expr, numChildren - 1))\n        );\n      }\n    }\n  }\n  return true;\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Represents a dependee. */\nclass Dependee {\n  constructor(\n    public source: Source,\n    public reportNode: Node\n  ) {}\n}\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Map of dependees being depended upon by a source, by path. */\n  dependees: Map<string, Dependee> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text: string | null,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(path);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // check if this is an error\n    if (text === null) {\n      let dependees = this.dependees;\n      let dependee: Dependee | null = null;\n      if (dependees.has(internalPath)) dependee = assert(dependees.get(internalPath));\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        dependee\n          ? dependee.reportNode.range\n          : null,\n        path\n      );\n      return;\n    }\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) {\n        statements.push(statement);\n      } else {\n        this.skipStatement(tn);\n      }\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart = 0;\n    var exportEnd = 0;\n    var defaultStart = 0;\n    var defaultEnd = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart = 0;\n    var declareEnd = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the path of the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var dependees = this.dependees;\n    if (dependees.has(dependent)) {\n      let dependee = assert(dependees.get(dependent));\n      return dependee.source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'null'\n    } else if (token == Token.NULL) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... | null\n    while (tn.skip(Token.BAR)) {\n      if (tn.skip(Token.NULL)) {\n        type.isNullable = true;\n      } else {\n        let notNullStart = tn.pos;\n        let notNull = this.parseType(tn, false, true);\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            notNull ? notNull.range : tn.range(notNullStart), \"null\"\n          );\n        }\n        return null;\n      }\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn, false);\n            if (!type) return null;\n            if (type.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                type.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>type;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITELY_ASSIGNED;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if (initializer !== null && (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>type;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>type;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, this.parseParametersThis, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    explicitThis: NamedTypeNode | null,\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      explicitThis,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let type = this.parseType(tn);\n      if (!type) return null;\n      if (type.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          type.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>type;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface && decorators !== null) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart = 0;\n    var readonlyEnd = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart = 0;\n    var getEnd = 0;\n    var isSetter = false;\n    var setStart = 0;\n    var setEnd = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var isGetterOrSetter = isGetter || isSetter;\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!isGetterOrSetter && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetterOrSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, isSetter || name.kind == NodeKind.CONSTRUCTOR);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!isInterface && !(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT))) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetterOrSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITELY_ASSIGNED;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if (\n        (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0 &&\n        (isInterface || initializer !== null || (flags & CommonFlags.STATIC) != 0)\n      ) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      if (path !== null) {\n        let internalPath = assert(ret.internalPath);\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(currentSource, path));\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, new Dependee(currentSource, path));\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN) ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            null,\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = Node.createOmittedExpression(tn.range(tn.pos));\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            null,\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        let value = tn.readInteger();\n        tn.checkForIdentifierStartAfterNumericLiteral();\n        return Node.createIntegerLiteralExpression(value, tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        let value = tn.readFloat();\n        tn.checkForIdentifierStartAfterNumericLiteral();\n        return Node.createFloatLiteralExpression(value, tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN) ||\n      potentiallyGeneric &&\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Utility to find all locals used in an expression.\n * @license Apache-2.0\n */\n\nimport {\n  Visitor\n} from \"./pass\";\n\nimport {\n  ExpressionRef\n} from \"../module\";\n\nimport {\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalSetGetIndex\n} from \"../glue/binaryen\";\n\nclass FindUsedLocalsVisitor extends Visitor {\n  used: Set<i32>;\n\n  constructor(used: Set<i32> = new Set()) {\n    super();\n    this.used = used;\n  }\n  \n  /** @override */\n  visitLocalGet(localGet: ExpressionRef): void {\n    this.used.add(<i32>_BinaryenLocalGetGetIndex(localGet));\n  }\n\n  /** @override */\n  visitLocalSet(localSet: ExpressionRef): void {\n    this.used.add(<i32>_BinaryenLocalSetGetIndex(localSet));\n  }\n}\n\nvar singleton: FindUsedLocalsVisitor | null = null;\n\n/** Finds the indexes of all locals used in the specified expression. */\nexport function findUsedLocals(\n  expr: ExpressionRef,\n  used: Set<i32> = new Set()\n): Set<i32> {\n  var visitor = singleton;\n  if (!visitor) singleton = visitor = new FindUsedLocalsVisitor(used);\n  else visitor.used = used;\n  visitor.visit(expr);\n  return used;\n}\n","/**\n * @fileoverview Infrastructure for custom Binaryen passes.\n * @license Apache-2.0\n */\n\nimport {\n  Module,\n  ExpressionId,\n  ExpressionRef,\n  FunctionRef,\n  GlobalRef,\n  Index,\n  CString\n} from \"../module\";\n\nimport {\n  _BinaryenExpressionGetId,\n  _BinaryenBlockGetNumChildren,\n  _BinaryenBlockGetChildAt,\n  _BinaryenIfGetCondition,\n  _BinaryenIfGetIfTrue,\n  _BinaryenIfGetIfFalse,\n  _BinaryenLoopGetBody,\n  _BinaryenBreakGetCondition,\n  _BinaryenBreakGetValue,\n  _BinaryenGetNumFunctions,\n  _BinaryenGetFunctionByIndex,\n  _BinaryenGetNumGlobals,\n  _BinaryenGetGlobalByIndex,\n  _BinaryenFunctionGetBody,\n  _BinaryenSwitchGetCondition,\n  _BinaryenSwitchGetValue,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenLocalSetGetValue,\n  _BinaryenGlobalSetGetValue,\n  _BinaryenGlobalGetInitExpr,\n  _BinaryenLoadGetPtr,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreGetValue,\n  _BinaryenUnaryGetValue,\n  _BinaryenBinaryGetLeft,\n  _BinaryenBinaryGetRight,\n  _BinaryenSelectGetIfTrue,\n  _BinaryenSelectGetIfFalse,\n  _BinaryenSelectGetCondition,\n  _BinaryenDropGetValue,\n  _BinaryenBlockSetChildAt,\n  _BinaryenCallIndirectGetTarget,\n  _BinaryenReturnGetValue,\n  _BinaryenMemoryGrowGetDelta,\n  _BinaryenAtomicRMWGetPtr,\n  _BinaryenAtomicRMWGetValue,\n  _BinaryenAtomicCmpxchgGetPtr,\n  _BinaryenAtomicCmpxchgGetExpected,\n  _BinaryenAtomicCmpxchgGetReplacement,\n  _BinaryenAtomicWaitGetPtr,\n  _BinaryenAtomicWaitGetExpected,\n  _BinaryenAtomicWaitGetTimeout,\n  _BinaryenAtomicNotifyGetPtr,\n  _BinaryenSIMDExtractGetVec,\n  _BinaryenSIMDReplaceGetVec,\n  _BinaryenSIMDReplaceGetValue,\n  _BinaryenSIMDShuffleGetLeft,\n  _BinaryenSIMDShuffleGetRight,\n  _BinaryenSIMDTernaryGetA,\n  _BinaryenSIMDTernaryGetB,\n  _BinaryenSIMDTernaryGetC,\n  _BinaryenSIMDShiftGetVec,\n  _BinaryenSIMDShiftGetShift,\n  _BinaryenSIMDLoadGetPtr,\n  _BinaryenMemoryInitGetDest,\n  _BinaryenMemoryInitGetOffset,\n  _BinaryenMemoryInitGetSize,\n  _BinaryenMemoryCopyGetDest,\n  _BinaryenMemoryCopyGetSource,\n  _BinaryenMemoryCopyGetSize,\n  _BinaryenMemoryFillGetDest,\n  _BinaryenMemoryFillGetValue,\n  _BinaryenMemoryFillGetSize,\n  _BinaryenRefIsGetValue,\n  _BinaryenTryGetBody,\n  _BinaryenTryGetNumCatchBodies,\n  _BinaryenTryGetCatchBodyAt,\n  _BinaryenThrowGetNumOperands,\n  _BinaryenThrowGetOperandAt,\n  _BinaryenTupleMakeGetOperandAt,\n  _BinaryenTupleMakeGetNumOperands,\n  _BinaryenIfSetCondition,\n  _BinaryenIfSetIfTrue,\n  _BinaryenIfSetIfFalse,\n  _BinaryenLoopSetBody,\n  _BinaryenBreakSetCondition,\n  _BinaryenBreakSetValue,\n  _BinaryenSwitchSetCondition,\n  _BinaryenSwitchSetValue,\n  _BinaryenCallSetOperandAt,\n  _BinaryenCallIndirectSetTarget,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenLocalSetSetValue,\n  _BinaryenGlobalSetSetValue,\n  _BinaryenLoadSetPtr,\n  _BinaryenStoreSetPtr,\n  _BinaryenStoreSetValue,\n  _BinaryenUnarySetValue,\n  _BinaryenExpressionFinalize,\n  _BinaryenBinarySetLeft,\n  _BinaryenBinarySetRight,\n  _BinaryenSelectSetIfTrue,\n  _BinaryenSelectSetIfFalse,\n  _BinaryenSelectSetCondition,\n  _BinaryenDropSetValue,\n  _BinaryenReturnSetValue,\n  _BinaryenMemoryGrowSetDelta,\n  _BinaryenAtomicRMWSetPtr,\n  _BinaryenAtomicRMWSetValue,\n  _BinaryenAtomicCmpxchgSetPtr,\n  _BinaryenAtomicCmpxchgSetExpected,\n  _BinaryenAtomicCmpxchgSetReplacement,\n  _BinaryenAtomicWaitSetPtr,\n  _BinaryenAtomicWaitSetExpected,\n  _BinaryenAtomicWaitSetTimeout,\n  _BinaryenAtomicNotifySetPtr,\n  _BinaryenSIMDExtractSetVec,\n  _BinaryenSIMDReplaceSetVec,\n  _BinaryenSIMDReplaceSetValue,\n  _BinaryenSIMDShuffleSetLeft,\n  _BinaryenSIMDShuffleSetRight,\n  _BinaryenSIMDTernarySetA,\n  _BinaryenSIMDTernarySetB,\n  _BinaryenSIMDTernarySetC,\n  _BinaryenSIMDShiftSetVec,\n  _BinaryenSIMDShiftSetShift,\n  _BinaryenSIMDLoadSetPtr,\n  _BinaryenMemoryInitSetDest,\n  _BinaryenMemoryInitSetOffset,\n  _BinaryenMemoryInitSetSize,\n  _BinaryenMemoryCopySetDest,\n  _BinaryenMemoryCopySetSource,\n  _BinaryenMemoryCopySetSize,\n  _BinaryenMemoryFillSetDest,\n  _BinaryenMemoryFillSetValue,\n  _BinaryenMemoryFillSetSize,\n  _BinaryenRefIsSetValue,\n  _BinaryenTrySetBody,\n  _BinaryenTrySetCatchBodyAt,\n  _BinaryenThrowSetOperandAt,\n  _BinaryenTupleMakeSetOperandAt,\n  _BinaryenBlockGetName,\n  _BinaryenLoopGetName,\n  _BinaryenBreakGetName,\n  _BinaryenSwitchGetDefaultName,\n  _BinaryenSwitchGetNumNames,\n  _BinaryenSwitchGetNameAt,\n  _BinaryenCallGetTarget,\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenGlobalGetGetName,\n  _BinaryenGlobalSetGetName,\n  _BinaryenAtomicNotifyGetNotifyCount,\n  _BinaryenAtomicNotifySetNotifyCount,\n  _BinaryenRefFuncGetFunc,\n  _BinaryenThrowGetEvent,\n  _BinaryenTupleExtractGetTuple,\n  _BinaryenTupleExtractSetTuple,\n  _BinaryenRefEqGetLeft,\n  _BinaryenRefEqGetRight,\n  _BinaryenRefEqSetLeft,\n  _BinaryenRefEqSetRight,\n  _BinaryenFunctionSetBody,\n  _BinaryenI31NewGetValue,\n  _BinaryenI31GetGetI31,\n  _BinaryenI31NewSetValue,\n  _BinaryenI31GetSetI31\n} from \"../glue/binaryen\";\n\n/** Base class of custom Binaryen visitors. */\nexport abstract class Visitor {\n  /** Expression stack. */\n  private stack: ExpressionRef[] = new Array<ExpressionRef>();\n\n  /** Gets the current expression being walked. */\n  get currentExpression(): ExpressionRef {\n    var currentExpression = this._currentExpression;\n    if (!currentExpression) throw new Error(\"not walking expressions\");\n    return currentExpression;\n  }\n  _currentExpression: ExpressionRef = 0;\n\n  /** Gets the parent expression of the current expression being walked. Returns zero if already the top-most expression. */\n  get parentExpressionOrNull(): ExpressionRef {\n    var stack = this.stack;\n    var length = stack.length;\n    return length ? stack[length - 1] : 0;\n  }\n\n  // Expressions\n\n  visitBlock(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitIf(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLoop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBreak(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSwitch(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallPre(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCall(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallIndirectPre(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallIndirect(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLocalGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLocalSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitGlobalGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitGlobalSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLoad(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStore(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitConst(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitUnary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBinary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSelect(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitDrop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitReturn(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemorySize(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryGrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitNop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitUnreachable(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicRMW(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicCmpxchg(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicWait(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicNotify(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicFence(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDExtract(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDReplace(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDShuffle(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDTernary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDShift(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDLoad(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryInit(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitDataDrop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryCopy(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryFill(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitPop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefNull(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefIs(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefFunc(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefEq(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTry(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitThrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRethrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTupleMake(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTupleExtract(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitI31New(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitI31Get(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallRef(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefTest(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefCast(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBrOn(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRttCanon(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRttSub(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructNew(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayNew(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArraySet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayLen(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefAs(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  // Immediates\n\n  visitName(name: CString): void {\n    // unimp\n  }\n\n  visitLabel(name: CString): void {\n    // unimp\n  }\n\n  visitIndex(index: Index): void {\n    // unimp\n  }\n\n  visitEvent(name: CString): void {\n    // unimp\n  }\n\n  // Delegate\n\n  /** Visits any expression, delegating to the respective visitor methods. */\n  visit(expr: ExpressionRef): void {\n    let previousExpression = this._currentExpression;\n    this._currentExpression = assert(expr);\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Block: {\n        this.stack.push(expr);\n        let name = _BinaryenBlockGetName(expr);\n        if (name) this.visitLabel(name);\n        for (let i: Index = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n          this.visit(_BinaryenBlockGetChildAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitBlock(expr);\n        break;\n      }\n      case ExpressionId.If: {\n        this.stack.push(expr);\n        this.visit(_BinaryenIfGetCondition(expr));\n        this.visit(_BinaryenIfGetIfTrue(expr));\n        let ifFalse = _BinaryenIfGetIfFalse(expr);\n        if (ifFalse) this.visit(ifFalse);\n        assert(this.stack.pop() == expr);\n        this.visitIf(expr);\n        break;\n      }\n      case ExpressionId.Loop: {\n        this.stack.push(expr);\n        let name = _BinaryenLoopGetName(expr);\n        if (name) this.visitLabel(name);\n        this.visit(_BinaryenLoopGetBody(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLoop(expr);\n        break;\n      }\n      case ExpressionId.Break: {\n        this.stack.push(expr);\n        this.visitLabel(_BinaryenBreakGetName(expr));\n        let condition = _BinaryenBreakGetCondition(expr);\n        if (condition) this.visit(condition);\n        let value = _BinaryenBreakGetValue(expr);\n        if (value) this.visit(value);\n        assert(this.stack.pop() == expr);\n        this.visitBreak(expr);\n        break;\n      }\n      case ExpressionId.Switch: {\n        this.stack.push(expr);\n        let defaultName = _BinaryenSwitchGetDefaultName(expr);\n        if (defaultName) this.visitLabel(defaultName);\n        let numNames = _BinaryenSwitchGetNumNames(expr);\n        for (let i: Index = 0; i < numNames; ++i) {\n          this.visitLabel(_BinaryenSwitchGetNameAt(expr, i));\n        }\n        this.visit(_BinaryenSwitchGetCondition(expr));\n        let value = _BinaryenSwitchGetValue(expr);\n        if (value) this.visit(value);\n        assert(this.stack.pop() == expr);\n        this.visitSwitch(expr);\n        break;\n      }\n      case ExpressionId.Call: {\n        this.visitCallPre(expr);\n        this.stack.push(expr);\n        this.visitName(_BinaryenCallGetTarget(expr));\n        let numOperands = _BinaryenCallGetNumOperands(expr);\n        for (let i: Index = 0; i < numOperands; ++i) {\n          this.visit(_BinaryenCallGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitCall(expr);\n        break;\n      }\n      case ExpressionId.CallIndirect: {\n        this.visitCallIndirectPre(expr);\n        this.stack.push(expr);\n        this.visit(_BinaryenCallIndirectGetTarget(expr));\n        for (let i: Index = 0, k = _BinaryenCallIndirectGetNumOperands(expr); i < k; ++i) {\n          this.visit(_BinaryenCallIndirectGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitCallIndirect(expr);\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        this.stack.push(expr);\n        this.visitIndex(_BinaryenLocalGetGetIndex(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLocalGet(expr);\n        break;\n      }\n      case ExpressionId.LocalSet: {\n        this.stack.push(expr);\n        this.visitIndex(_BinaryenLocalSetGetIndex(expr));\n        this.visit(_BinaryenLocalSetGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLocalSet(expr);\n        break;\n      }\n      case ExpressionId.GlobalGet: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenGlobalGetGetName(expr));\n        assert(this.stack.pop() == expr);\n        this.visitGlobalGet(expr);\n        break;\n      }\n      case ExpressionId.GlobalSet: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenGlobalSetGetName(expr));\n        this.visit(_BinaryenGlobalSetGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitGlobalSet(expr);\n        break;\n      }\n      case ExpressionId.Load: {\n        this.stack.push(expr);\n        this.visit(_BinaryenLoadGetPtr(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLoad(expr);\n        break;\n      }\n      case ExpressionId.Store: {\n        this.stack.push(expr);\n        this.visit(_BinaryenStoreGetPtr(expr));\n        this.visit(_BinaryenStoreGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitStore(expr);\n        break;\n      }\n      case ExpressionId.Const: {\n        this.visitConst(expr);\n        break;\n      }\n      case ExpressionId.Unary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenUnaryGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitUnary(expr);\n        break;\n      }\n      case ExpressionId.Binary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenBinaryGetLeft(expr));\n        this.visit(_BinaryenBinaryGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitBinary(expr);\n        break;\n      }\n      case ExpressionId.Select: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSelectGetIfTrue(expr));\n        this.visit(_BinaryenSelectGetIfFalse(expr));\n        this.visit(_BinaryenSelectGetCondition(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSelect(expr);\n        break;\n      }\n      case ExpressionId.Drop: {\n        this.stack.push(expr);\n        this.visit(_BinaryenDropGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitDrop(expr);\n        break;\n      }\n      case ExpressionId.Return: {\n        let value = _BinaryenReturnGetValue(expr);\n        if (value) {\n          this.stack.push(expr);\n          this.visit(value);\n          assert(this.stack.pop() == expr);\n        }\n        this.visitReturn(expr);\n        break;\n      }\n      case ExpressionId.MemorySize: {\n        this.visitMemorySize(expr);\n        break;\n      }\n      case ExpressionId.MemoryGrow: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryGrowGetDelta(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryGrow(expr);\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.visitNop(expr);\n        break;\n      }\n      case ExpressionId.Unreachable: {\n        this.visitUnreachable(expr);\n        break;\n      }\n      case ExpressionId.AtomicRMW: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicRMWGetPtr(expr));\n        this.visit(_BinaryenAtomicRMWGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicRMW(expr);\n        break;\n      }\n      case ExpressionId.AtomicCmpxchg: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicCmpxchgGetPtr(expr));\n        this.visit(_BinaryenAtomicCmpxchgGetExpected(expr));\n        this.visit(_BinaryenAtomicCmpxchgGetReplacement(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicCmpxchg(expr);\n        break;\n      }\n      case ExpressionId.AtomicWait: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicWaitGetPtr(expr));\n        this.visit(_BinaryenAtomicWaitGetExpected(expr));\n        this.visit(_BinaryenAtomicWaitGetTimeout(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicWait(expr);\n        break;\n      }\n      case ExpressionId.AtomicNotify: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicNotifyGetPtr(expr));\n        this.visit(_BinaryenAtomicNotifyGetNotifyCount(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicNotify(expr);\n        break;\n      }\n      case ExpressionId.AtomicFence: {\n        this.visitAtomicFence(expr);\n        break;\n      }\n      case ExpressionId.SIMDExtract: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDExtractGetVec(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDExtract(expr);\n        break;\n      }\n      case ExpressionId.SIMDReplace: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDReplaceGetVec(expr));\n        this.visit(_BinaryenSIMDReplaceGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDReplace(expr);\n        break;\n      }\n      case ExpressionId.SIMDShuffle: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDShuffleGetLeft(expr));\n        this.visit(_BinaryenSIMDShuffleGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDShuffle(expr);\n        break;\n      }\n      case ExpressionId.SIMDTernary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDTernaryGetA(expr));\n        this.visit(_BinaryenSIMDTernaryGetB(expr));\n        this.visit(_BinaryenSIMDTernaryGetC(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDTernary(expr);\n        break;\n      }\n      case ExpressionId.SIMDShift: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDShiftGetVec(expr));\n        this.visit(_BinaryenSIMDShiftGetShift(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDShift(expr);\n        break;\n      }\n      case ExpressionId.SIMDLoad: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDLoadGetPtr(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDLoad(expr);\n        break;\n      }\n      // TODO: SIMDLoadStoreLane\n      case ExpressionId.MemoryInit: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryInitGetDest(expr));\n        this.visit(_BinaryenMemoryInitGetOffset(expr));\n        this.visit(_BinaryenMemoryInitGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryInit(expr);\n        break;\n      }\n      case ExpressionId.DataDrop: {\n        this.visitDataDrop(expr);\n        break;\n      }\n      case ExpressionId.MemoryCopy: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryCopyGetDest(expr));\n        this.visit(_BinaryenMemoryCopyGetSource(expr));\n        this.visit(_BinaryenMemoryCopyGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryCopy(expr);\n        break;\n      }\n      case ExpressionId.MemoryFill: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryFillGetDest(expr));\n        this.visit(_BinaryenMemoryFillGetValue(expr));\n        this.visit(_BinaryenMemoryFillGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryFill(expr);\n        break;\n      }\n      case ExpressionId.Pop: {\n        this.visitPop(expr);\n        break;\n      }\n      case ExpressionId.RefNull: {\n        this.visitRefNull(expr);\n        break;\n      }\n      case ExpressionId.RefIs: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefIsGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefIs(expr);\n        break;\n      }\n      case ExpressionId.RefFunc: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenRefFuncGetFunc(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefFunc(expr);\n        break;\n      }\n      case ExpressionId.RefEq: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefEqGetLeft(expr));\n        this.visit(_BinaryenRefEqGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefEq(expr);\n        break;\n      }\n      case ExpressionId.Try: {\n        this.stack.push(expr);\n        this.visit(_BinaryenTryGetBody(expr));\n        let numCatchBodies = _BinaryenTryGetNumCatchBodies(expr);\n        for (let i: Index = 0; i < numCatchBodies; ++i) {\n          this.visit(_BinaryenTryGetCatchBodyAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitTry(expr);\n        break;\n      }\n      case ExpressionId.Throw: {\n        this.stack.push(expr);\n        this.visitEvent(_BinaryenThrowGetEvent(expr));\n        let numOperands = _BinaryenThrowGetNumOperands(expr);\n        for (let i: Index = 0; i < numOperands; ++i) {\n          this.visit(_BinaryenThrowGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitThrow(expr);\n        break;\n      }\n      case ExpressionId.Rethrow: {\n        this.visitRethrow(expr);\n        break;\n      }\n      case ExpressionId.TupleMake: {\n        let numOperands = _BinaryenTupleMakeGetNumOperands(expr);\n        if (numOperands) {\n          this.stack.push(expr);\n          for (let i: Index = 0; i < numOperands; ++i) {\n            this.visit(_BinaryenTupleMakeGetOperandAt(expr, i));\n          }\n          assert(this.stack.pop() == expr);\n        }\n        this.visitTupleMake(expr);\n        break;\n      }\n      case ExpressionId.TupleExtract: {\n        this.stack.push(expr);\n        this.visit(_BinaryenTupleExtractGetTuple(expr));\n        assert(this.stack.pop() == expr);\n        this.visitTupleExtract(expr);\n        break;\n      }\n      case ExpressionId.I31New: {\n        this.stack.push(expr);\n        this.visit(_BinaryenI31NewGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitI31New(expr);\n        break;\n      }\n      case ExpressionId.I31Get: {\n        this.stack.push(expr);\n        this.visit(_BinaryenI31GetGetI31(expr));\n        assert(this.stack.pop() == expr);\n        this.visitI31Get(expr);\n        break;\n      }\n      case ExpressionId.CallRef: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitCallRef(expr);\n        break;\n      }\n      case ExpressionId.RefTest: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefTest(expr);\n        break;\n      }\n      case ExpressionId.RefCast: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefCast(expr);\n        break;\n      }\n      case ExpressionId.BrOn: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitBrOn(expr);\n        break;\n      }\n      case ExpressionId.RttCanon: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRttCanon(expr);\n        break;\n      }\n      case ExpressionId.RttSub: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRttSub(expr);\n        break;\n      }\n      case ExpressionId.StructNew: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructNew(expr);\n        break;\n      }\n      case ExpressionId.StructGet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructGet(expr);\n        break;\n      }\n      case ExpressionId.StructSet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructSet(expr);\n        break;\n      }\n      case ExpressionId.ArrayNew: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayNew(expr);\n        break;\n      }\n      case ExpressionId.ArrayGet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayGet(expr);\n        break;\n      }\n      case ExpressionId.ArraySet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArraySet(expr);\n        break;\n      }\n      case ExpressionId.ArrayLen: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayLen(expr);\n        break;\n      }\n      case ExpressionId.RefAs: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefAs(expr);\n        break;\n      }\n      default: throw new Error(\"unexpected expression kind\");\n    }\n    this._currentExpression = previousExpression;\n  }\n}\n\n/** Base class of custom Binaryen passes. */\nexport abstract class Pass extends Visitor {\n\n  /** Gets the current function being walked. */\n  get currentFunction(): FunctionRef {\n    var currentFunction = this._currentFunction;\n    if (!currentFunction) throw new Error(\"not walking a function\");\n    return currentFunction;\n  }\n  private _currentFunction: FunctionRef = 0;\n\n  /** Gets the current global being walked. */\n  get currentGlobal(): GlobalRef {\n    var currentGlobal = this._currentGlobal;\n    if (!currentGlobal) throw new Error(\"not walking a global\");\n    return currentGlobal;\n  }\n  private _currentGlobal: GlobalRef = 0;\n\n  /** Constructs a new Binaryen pass. */\n  constructor(readonly module: Module) {\n    super();\n  }\n\n  // Walking\n\n  /** Walks the entire module. */\n  walkModule(): void {\n    this.walkFunctions();\n    this.walkGlobals();\n  }\n\n  /** Walks all functions. */\n  walkFunctions(): void {\n    var moduleRef = this.module.ref;\n    for (let i: Index = 0, k = _BinaryenGetNumFunctions(moduleRef); i < k; ++i) {\n      this.walkFunction(_BinaryenGetFunctionByIndex(moduleRef, i));\n    }\n  }\n\n  /** Walks a specific function. */\n  walkFunction(func: FunctionRef): void {\n    var body = _BinaryenFunctionGetBody(func);\n    if (body) {\n      this._currentFunction = func;\n      this.visit(body);\n      this._currentFunction = 0;\n    }\n  }\n\n  /** Walks all global variables. */\n  walkGlobals(): void {\n    var moduleRef = this.module.ref;\n    for (let i: Index = 0, k = _BinaryenGetNumGlobals(moduleRef); i < k; ++i) {\n      this.walkGlobal(_BinaryenGetGlobalByIndex(moduleRef, i));\n    }\n  }\n\n  /** Walks a specific global variable. */\n  walkGlobal(global: GlobalRef): void {\n    this._currentGlobal = global;\n    var init = _BinaryenGlobalGetInitExpr(global);\n    if (init) this.visit(init);\n    this._currentGlobal = 0;\n  }\n\n  // Utility\n\n  /** Replaces the current expression with the specified replacement. */\n  replaceCurrent(replacement: ExpressionRef): void {\n    var search = this.currentExpression;\n    var func = this.currentFunction;\n    var body = _BinaryenFunctionGetBody(func);\n    if (body == search) {\n      _BinaryenFunctionSetBody(func, replacement);\n    } else {\n      var parent = assert(this.parentExpressionOrNull);\n      var replaced = replaceChild(parent, search, replacement);\n      if (!replaced) throw Error(\"failed to replace expression\");\n      _BinaryenExpressionFinalize(parent);\n    }\n  }\n}\n\n/** Replaces an expression within a parent expression. Returns the replaced expression on success, otherwise `0`. */\nexport function replaceChild(\n  /** Parent expression containing `search`. */\n  parent: ExpressionRef,\n  /** Expression to replace. */\n  search: ExpressionRef,\n  /** Expression to replace `search` with. */\n  replacement: ExpressionRef\n): ExpressionRef {\n  switch (_BinaryenExpressionGetId(parent)) {\n    case ExpressionId.Block: {\n      let numChildren = _BinaryenBlockGetNumChildren(parent);\n      for (let i: Index = 0; i < numChildren; ++i) {\n        let child = _BinaryenBlockGetChildAt(parent, i);\n        if (child == search) {\n          _BinaryenBlockSetChildAt(parent, i, replacement);\n          return child;\n        }\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      let condition = _BinaryenIfGetCondition(parent);\n      if (condition == search) {\n        _BinaryenIfSetCondition(parent, replacement);\n        return condition;\n      }\n      let ifTrue = _BinaryenIfGetIfTrue(parent);\n      if (ifTrue == search) {\n        _BinaryenIfSetIfTrue(parent, replacement);\n        return ifTrue;\n      }\n      let ifFalse = _BinaryenIfGetIfFalse(parent);\n      if (ifFalse == search) {\n        _BinaryenIfSetIfFalse(parent, replacement);\n        return ifFalse;\n      }\n      break;\n    }\n    case ExpressionId.Loop: {\n      let body = _BinaryenLoopGetBody(parent);\n      if (body == search) {\n        _BinaryenLoopSetBody(parent, replacement);\n        return body;\n      }\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(parent);\n      if (condition == search) {\n        _BinaryenBreakSetCondition(parent, replacement);\n        return condition;\n      }\n      let value = _BinaryenBreakGetValue(parent);\n      if (value == search) {\n        _BinaryenBreakSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Switch: {\n      let condition = _BinaryenSwitchGetCondition(parent);\n      if (condition == search) {\n        _BinaryenSwitchSetCondition(parent, replacement);\n        return condition;\n      }\n      let value = _BinaryenSwitchGetValue(parent);\n      if (value == search) {\n        _BinaryenSwitchSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Call: {\n      let numOperands = _BinaryenCallGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenCallGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenCallSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      let target = _BinaryenCallIndirectGetTarget(parent);\n      if (target == search) {\n        _BinaryenCallIndirectSetTarget(parent, replacement);\n        return target;\n      }\n      let numOperands = _BinaryenCallIndirectGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenCallIndirectGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenCallIndirectSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      let value = _BinaryenLocalSetGetValue(parent);\n      if (value == search) {\n        _BinaryenLocalSetSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      let value = _BinaryenGlobalSetGetValue(parent);\n      if (value == search) {\n        _BinaryenGlobalSetSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Load: {\n      let ptr = _BinaryenLoadGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenLoadSetPtr(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.Store: {\n      let ptr = _BinaryenStoreGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenStoreSetPtr(parent, replacement);\n        return ptr;\n      }\n      let value = _BinaryenStoreGetValue(parent);\n      if (value == search) {\n        _BinaryenStoreSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      let value = _BinaryenUnaryGetValue(parent);\n      if (value == search) {\n        _BinaryenUnarySetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Binary: {\n      let left = _BinaryenBinaryGetLeft(parent);\n      if (left == search) {\n        _BinaryenBinarySetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenBinaryGetRight(parent);\n      if (right == search) {\n        _BinaryenBinarySetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.Select: {\n      let ifTrue = _BinaryenSelectGetIfTrue(parent);\n      if (ifTrue == search) {\n        _BinaryenSelectSetIfTrue(parent, replacement);\n        return ifTrue;\n      }\n      let ifFalse = _BinaryenSelectGetIfFalse(parent);\n      if (ifFalse == search) {\n        _BinaryenSelectSetIfFalse(parent, replacement);\n        return ifFalse;\n      }\n      let condition = _BinaryenSelectGetCondition(parent);\n      if (condition == search) {\n        _BinaryenSelectSetCondition(parent, replacement);\n        return condition;\n      }\n      break;\n    }\n    case ExpressionId.Drop: {\n      let value = _BinaryenDropGetValue(parent);\n      if (value == search) {\n        _BinaryenDropSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Return: {\n      let value = _BinaryenReturnGetValue(parent);\n      if (value == search) {\n        _BinaryenReturnSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.MemorySize: {\n      break;\n    }\n    case ExpressionId.MemoryGrow: {\n      let delta = _BinaryenMemoryGrowGetDelta(parent);\n      if (delta == search) {\n        _BinaryenMemoryGrowSetDelta(parent, replacement);\n        return delta;\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      let ptr = _BinaryenAtomicRMWGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicRMWSetPtr(parent, replacement);\n        return ptr;\n      }\n      let value = _BinaryenAtomicRMWGetValue(parent);\n      if (value == search) {\n        _BinaryenAtomicRMWSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      let ptr = _BinaryenAtomicCmpxchgGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicCmpxchgSetPtr(parent, replacement);\n        return ptr;\n      }\n      let expected = _BinaryenAtomicCmpxchgGetExpected(parent);\n      if (expected == search) {\n        _BinaryenAtomicCmpxchgSetExpected(parent, replacement);\n        return expected;\n      }\n      let repl = _BinaryenAtomicCmpxchgGetReplacement(parent);\n      if (repl == search) {\n        _BinaryenAtomicCmpxchgSetReplacement(parent, replacement);\n        return repl;\n      }\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      let ptr = _BinaryenAtomicWaitGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicWaitSetPtr(parent, replacement);\n        return ptr;\n      }\n      let expected = _BinaryenAtomicWaitGetExpected(parent);\n      if (expected == search) {\n        _BinaryenAtomicWaitSetExpected(parent, replacement);\n        return expected;\n      }\n      let timeout = _BinaryenAtomicWaitGetTimeout(parent);\n      if (timeout == search) {\n        _BinaryenAtomicWaitSetTimeout(parent, replacement);\n        return timeout;\n      }\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      let ptr = _BinaryenAtomicNotifyGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicNotifySetPtr(parent, replacement);\n        return ptr;\n      }\n      let notifyCount = _BinaryenAtomicNotifyGetNotifyCount(parent);\n      if (notifyCount == search) {\n        _BinaryenAtomicNotifySetNotifyCount(parent, replacement);\n        return notifyCount;\n      }\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      let vec = _BinaryenSIMDExtractGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDExtractSetVec(parent, replacement);\n        return vec;\n      }\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      let vec = _BinaryenSIMDReplaceGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDReplaceSetVec(parent, replacement);\n        return vec;\n      }\n      let value = _BinaryenSIMDReplaceGetValue(parent);\n      if (value == search) {\n        _BinaryenSIMDReplaceSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      let left = _BinaryenSIMDShuffleGetLeft(parent);\n      if (left == search) {\n        _BinaryenSIMDShuffleSetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenSIMDShuffleGetRight(parent);\n      if (right == search) {\n        _BinaryenSIMDShuffleSetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      let a = _BinaryenSIMDTernaryGetA(parent);\n      if (a == search) {\n        _BinaryenSIMDTernarySetA(parent, replacement);\n        return a;\n      }\n      let b = _BinaryenSIMDTernaryGetB(parent);\n      if (b == search) {\n        _BinaryenSIMDTernarySetB(parent, replacement);\n        return b;\n      }\n      let c = _BinaryenSIMDTernaryGetC(parent);\n      if (c == search) {\n        _BinaryenSIMDTernarySetC(parent, replacement);\n        return c;\n      }\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      let vec = _BinaryenSIMDShiftGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDShiftSetVec(parent, replacement);\n        return vec;\n      }\n      let shift = _BinaryenSIMDShiftGetShift(parent);\n      if (shift == search) {\n        _BinaryenSIMDShiftSetShift(parent, replacement);\n        return shift;\n      }\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      let ptr = _BinaryenSIMDLoadGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenSIMDLoadSetPtr(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    // TODO: SIMDLoadStoreLane\n    case ExpressionId.MemoryInit: {\n      let dest = _BinaryenMemoryInitGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryInitSetDest(parent, replacement);\n        return dest;\n      }\n      let offset = _BinaryenMemoryInitGetOffset(parent);\n      if (offset == search) {\n        _BinaryenMemoryInitSetOffset(parent, replacement);\n        return offset;\n      }\n      let size = _BinaryenMemoryInitGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryInitSetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      let dest = _BinaryenMemoryCopyGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryCopySetDest(parent, replacement);\n        return dest;\n      }\n      let source = _BinaryenMemoryCopyGetSource(parent);\n      if (source == search) {\n        _BinaryenMemoryCopySetSource(parent, replacement);\n        return source;\n      }\n      let size = _BinaryenMemoryCopyGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryCopySetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      let dest = _BinaryenMemoryFillGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryFillSetDest(parent, replacement);\n        return dest;\n      }\n      let value = _BinaryenMemoryFillGetValue(parent);\n      if (value == search) {\n        _BinaryenMemoryFillSetValue(parent, replacement);\n        return value;\n      }\n      let size = _BinaryenMemoryFillGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryFillSetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIs: {\n      let value = _BinaryenRefIsGetValue(parent);\n      if (value == search) {\n        _BinaryenRefIsSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.RefEq: {\n      let left = _BinaryenRefEqGetLeft(parent);\n      if (left == search) {\n        _BinaryenRefEqSetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenRefEqGetRight(parent);\n      if (right == search) {\n        _BinaryenRefEqSetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.Try: {\n      let body = _BinaryenTryGetBody(parent);\n      if (body == search) {\n        _BinaryenTrySetBody(parent, replacement);\n        return body;\n      }\n      let numCatchBodies = _BinaryenTryGetNumCatchBodies(parent);\n      for (let i: Index = 0; i < numCatchBodies; ++i) {\n        let catchBody = _BinaryenTryGetCatchBodyAt(parent, i);\n        if (catchBody == search) {\n          _BinaryenTrySetCatchBodyAt(parent, i, replacement);\n          return catchBody;\n        }\n      }\n      break;\n    }\n    case ExpressionId.Throw: {\n      let numOperands = _BinaryenThrowGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenThrowGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenThrowSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      let numOperands = _BinaryenTupleMakeGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenTupleMakeGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenTupleMakeSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      let tuple = _BinaryenTupleExtractGetTuple(parent);\n      if (tuple == search) {\n        _BinaryenTupleExtractSetTuple(parent, replacement);\n        return tuple;\n      }\n      break;\n    }\n    case ExpressionId.I31New: {\n      let value = _BinaryenI31NewGetValue(parent);\n      if (value == search) {\n        _BinaryenI31NewSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.I31Get: {\n      let i31Expr = _BinaryenI31GetGetI31(parent);\n      if (i31Expr == search) {\n        _BinaryenI31GetSetI31(parent, replacement);\n        return i31Expr;\n      }\n      break;\n    }\n    case ExpressionId.CallRef: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefTest: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefCast: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.BrOn: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RttCanon: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RttSub: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructNew: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructGet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructSet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayNew: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayGet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArraySet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayLen: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefAs: {\n      assert(false); // TODO\n      break;\n    }\n    default: throw new Error(\"unexpected expression id\");\n  }\n  return 0;\n}\n","/**\n * @fileoverview A lightweight store instrumentation pass.\n * \n * Can be used to find rogue stores to protected memory addresses like object\n * headers or similar, without going overboard with instrumentation. Also\n * passes a flag whether a store originates within the runtime or other code.\n * \n * @license Apache-2.0\n */\n\nimport {\n  Pass\n} from \"./pass\";\n\nimport {\n  Compiler\n} from \"../compiler\";\n\nimport {\n  createType,\n  ExpressionRef,\n  NativeType\n} from \"../module\";\n\nimport {\n  _BinaryenFunctionGetName,\n  _BinaryenStoreGetBytes,\n  _BinaryenStoreGetOffset,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreSetPtr\n} from \"../glue/binaryen\";\n\n/** Instruments stores to also call an import. */\nexport class RtraceMemory extends Pass {\n  /** Whether we've seen any stores. */\n  seenStores: bool = false;\n  /** Target pointer type. */\n  ptrType: NativeType;\n\n  constructor(compiler: Compiler) {\n    super(compiler.module);\n    this.ptrType = compiler.options.nativeSizeType;\n  }\n\n  checkRT(): bool {\n    var functionName = this.module.readStringCached(_BinaryenFunctionGetName(this.currentFunction))!;\n    return functionName.startsWith(\"~lib/rt/\");\n  }\n\n  /** @override */\n  visitStore(store: ExpressionRef): void {\n    var module = this.module;\n    var ptr = _BinaryenStoreGetPtr(store);\n    var offset = _BinaryenStoreGetOffset(store);\n    var bytes = _BinaryenStoreGetBytes(store);\n    // onstore(ptr: usize, offset: i32, bytes: i32, isRT: bool) -> ptr\n    _BinaryenStoreSetPtr(store,\n      module.call(\"~onstore\", [\n        ptr,\n        module.i32(offset),\n        module.i32(bytes),\n        module.i32(i32(this.checkRT()))\n      ], this.ptrType)\n    );\n    this.seenStores = true;\n  }\n\n  // TODO: MemoryFill, Atomics\n\n  /** @override */\n  walkModule(): void {\n    super.walkModule();\n    if (this.seenStores) {\n      this.module.addFunctionImport(\"~onstore\", \"rtrace\", \"onstore\",\n        createType([ this.ptrType, NativeType.I32, NativeType.I32, NativeType.I32 ]),\n        this.ptrType\n      );\n    }\n  }\n}\n","/**\n * @fileoverview Shadow stack instrumentation for a precise GC.\n * \n * Instruments function arguments and local assignments marked with a 'tostack'\n * call to also do stores to a shadow stack of managed values only.\n * \n * Consider a simple call to a function looking like the following, taking\n * managed arguments, plus assigning managed values to locals:\n * \n *   function foo(a: Obj, b: Obj): Obj {\n *     var c = __tostack(a) // slot 2\n *     __collect()\n *     return b\n *   }\n *   \n *   foo(__tostack(a), __tostack(b)) // slot 0, 1\n * \n * At the call to `__collect()` the 32-bit stack frame of the function is:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed argument 'a'\n *      4   | Second managed argument 'b'\n *   -------|----------------------------\n *      8   | First managed local 'c'\n * \n * We are splitting the frame in two halves as annotated since both halves are\n * only known separately for indirect calls, with the first half becoming an\n * extension of the calling function's stack frame by means of treating the\n * arguments as if these were locals beyond the caller's `numLocals`. Function\n * arguments stay a bit longer on the stack than usually, but we also don't have\n * to modify the stack pointer pre-call at all this way. The caller's amended\n * stack frame when assuming one managed local may look like this:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local '?'\n *      4   | Extended with first managed argument 'a'\n *      8   | Extended with second managed argument 'b'\n * \n * with the callee's stack frame becoming just:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local 'c'\n * \n * Instrumentation added below looks about like the following, with the stack\n * growing downwards and 't' and 'r' being new temporary locals:\n * \n *   // callee frameSize = 1 * sizeof<usize>()\n *   function foo(a: usize, b: usize): usize {\n *     memory.fill(__stack_pointer -= frameSize, 0, frameSize)\n *     store<usize>(__stack_pointer, c = a, 0 * sizeof<usize>())\n *     __collect()\n *     var r = b\n *     __stack_pointer += frameSize\n *     return r\n *   }\n * \n *   // caller frameSize = (numLocalSlots + 2 [by extension]) * sizeof<usize>()\n *   (\n *     r = foo(\n *       ( t = a,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 0) * sizeof<usize>()),\n *         t ),\n *       ( t = b,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 1) * sizeof<usize>()),\n *         t )\n *     ),\n *     r\n *   )\n * \n * Also note that we have to `memory.fill` the second half because the first\n * assignment to a local may happen at a later point within the function. The\n * invariant we need to maintain for a precise GC is that it only sees zeroes\n * or valid pointers, but never an invalid pointer left on the stack earlier.\n * Since most frames are small, we unroll a sequence of `store`s up to a frame\n * size of 16 bytes, and `memory.fill`, if available, beyond.\n * \n * @license Apache-2.0\n */\n\nimport {\n  Pass\n} from \"./pass\";\n\nimport {\n  _BinaryenAddFunction,\n  _BinaryenAddFunctionExport,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallGetTarget,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenCallSetOperandAt,\n  _BinaryenExportGetKind,\n  _BinaryenExportGetName,\n  _BinaryenExportGetValue,\n  _BinaryenExpressionGetId,\n  _BinaryenExpressionGetType,\n  _BinaryenFunctionGetBody,\n  _BinaryenFunctionGetName,\n  _BinaryenFunctionGetNumLocals,\n  _BinaryenFunctionGetNumVars,\n  _BinaryenFunctionGetParams,\n  _BinaryenFunctionGetResults,\n  _BinaryenFunctionGetVar,\n  _BinaryenFunctionSetBody,\n  _BinaryenGetExport,\n  _BinaryenGetFunction,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenLocalSetGetValue,\n  _BinaryenLocalSetIsTee,\n  _BinaryenLocalSetSetValue,\n  _BinaryenRemoveExport,\n  _BinaryenRemoveFunction,\n  _BinaryenReturnGetValue,\n  _BinaryenReturnSetValue,\n  _free\n} from \"../glue/binaryen\";\n\nimport {\n  ExpressionId,\n  ExpressionRef,\n  FunctionRef,\n  Index,\n  BinaryOp,\n  NativeType,\n  allocPtrArray,\n  Module,\n  ExternalKind,\n  ExportRef,\n  expandType,\n  isConstZero\n} from \"../module\";\n\nimport {\n  Compiler,\n  Options\n} from \"../compiler\";\n\nimport {\n  Feature\n} from \"../common\";\n\nimport {\n  BuiltinNames\n} from \"../builtins\";\n\ntype LocalIndex = Index;\ntype SlotIndex = Index;\ntype SlotMap = Map<LocalIndex,SlotIndex>;\ntype TempMap = Map<NativeType,LocalIndex>;\n\n/** Attempts to match the `__tostack(value)` pattern. Returns `value` if a match, otherwise `0`.  */\nfunction matchPattern(module: Module, expr: ExpressionRef): ExpressionRef {\n  if (_BinaryenExpressionGetId(expr) == ExpressionId.Call && module.readStringCached(_BinaryenCallGetTarget(expr)) == BuiltinNames.tostack) {\n    assert(_BinaryenCallGetNumOperands(expr) == 1);\n    return _BinaryenCallGetOperandAt(expr, 0);\n  }\n  return 0;\n}\n\n/** Tests whether a `value` matched by `matchTostack` needs a slot. */\nfunction needsSlot(module: Module, value: ExpressionRef): bool {\n  switch (_BinaryenExpressionGetId(value)) {\n    // no need to stack null pointers\n    case ExpressionId.Const: return !isConstZero(value);\n    // already kept in another slot\n    case ExpressionId.LocalGet:\n    case ExpressionId.LocalSet: return false; // tee\n  }\n  return true;\n}\n\n/** Instruments a module with a shadow stack for precise GC. */\nexport class ShadowStackPass extends Pass {\n  /** Stack frame slots, per function. */\n  slotMaps: Map<FunctionRef, SlotMap> = new Map();\n  /** Temporary locals, per function. */\n  tempMaps: Map<FunctionRef, TempMap> = new Map();\n  /** Exports (with managed operands) map. */\n  exportMap: Map<string,i32[]> = new Map();\n  /** Compiler reference. */\n  compiler: Compiler;\n\n  constructor(compiler: Compiler) {\n    super(compiler.module);\n    this.compiler = compiler;\n  }\n\n  /** Compiler options. */\n  get options(): Options { return this.compiler.options; }\n  /** Target pointer type. */\n  get ptrType(): NativeType { return this.options.nativeSizeType; }\n  /** Target pointer size. */\n  get ptrSize(): i32 { return this.ptrType == NativeType.I64 ? 8 : 4; }\n  /** Target pointer addition operation. */\n  get ptrBinaryAdd(): BinaryOp { return this.ptrType == NativeType.I64 ? BinaryOp.AddI64 : BinaryOp.AddI32; }\n  /** Target pointer subtraction operation. */\n  get ptrBinarySub(): BinaryOp { return this.ptrType == NativeType.I64 ? BinaryOp.SubI64 : BinaryOp.SubI32; }\n\n  /** Gets a constant with the specified value of the target pointer type. */\n  ptrConst(value: i32): ExpressionRef {\n    return this.ptrType == NativeType.I64\n      ? this.module.i64(value)\n      : this.module.i32(value);\n  }\n\n  /** Notes the presence of a slot for the specified (imaginary) local, returning the slot index. */\n  noteSlot(func: FunctionRef, localIndex: Index): i32 {\n    let slotMap: SlotMap;\n    if (this.slotMaps.has(func)) {\n      slotMap = changetype<SlotMap>(this.slotMaps.get(func));\n      if (slotMap.has(localIndex)) {\n        return changetype<i32>(slotMap.get(localIndex));\n      }\n    } else {\n      slotMap = new Map();\n      this.slotMaps.set(func, slotMap);\n    }\n    let slotIndex = slotMap.size;\n    slotMap.set(localIndex, slotIndex);\n    return slotIndex;\n  }\n\n  /** Notes the presence of an exported function taking managed operands. */\n  noteExport(name: string, managedOperandIndices: i32[]): void {\n    if (!managedOperandIndices.length) return;\n    this.exportMap.set(name, managedOperandIndices);\n  }\n\n  /** Gets a shared temporary local of the given type in the specified functions. */\n  getSharedTemp(func: FunctionRef, type: NativeType): Index {\n    let tempMap: TempMap;\n    if (this.tempMaps.has(func)) {\n      tempMap = changetype<TempMap>(this.tempMaps.get(func));\n      if (tempMap.has(type)) {\n        return changetype<Index>(tempMap.get(type));\n      }\n    } else {\n      tempMap = new Map();\n      this.tempMaps.set(func, tempMap);\n    }\n    let numLocals = _BinaryenFunctionGetNumLocals(func);\n    let localIndex = numLocals + tempMap.size;\n    tempMap.set(type, localIndex);\n    return localIndex;\n  }\n\n  /** Makes an expression modifying the stack pointer by the given offset. */\n  makeStackOffset(offset: i32): ExpressionRef {\n    assert(offset != 0);\n    var module = this.module;\n    var expr = module.global_set(BuiltinNames.stack_pointer,\n      module.binary(offset >= 0 ? this.ptrBinaryAdd : this.ptrBinarySub,\n        module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n        this.ptrConst(abs(offset))\n      )\n    );\n    if (offset > 0) return expr;\n    return module.block(null, [\n      expr,\n      this.makeStackCheck()\n    ], NativeType.None);\n  }\n\n  /** Makes a sequence of expressions zeroing the stack frame. */\n  makeStackFill(frameSize: i32, stmts: ExpressionRef[]): void {\n    assert(frameSize > 0);\n    var module = this.module;\n    if (this.options.hasFeature(Feature.BULK_MEMORY) && frameSize > 16) {\n      stmts.push(\n        module.memory_fill(\n          module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n          module.i32(0), // TODO: Wasm64 also i32?\n          this.ptrConst(frameSize)\n        )\n      );\n    } else {\n      let remain = frameSize;\n      while (remain >= 8) {\n        // store<i64>(__stack_pointer, 0, frameSize - remain)\n        stmts.push(\n          module.store(8,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.i64(0),\n            NativeType.I64,\n            frameSize - remain\n          )\n        );\n        remain -= 8;\n      }\n      if (remain) {\n        assert(remain == 4);\n        // store<i32>(__stack_pointer, 0, frameSize - remain)\n        stmts.push(\n          module.store(4,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.i32(0),\n            NativeType.I32,\n            frameSize - remain\n          )\n        );\n      }\n    }\n  }\n\n  private hasStackCheckFunction: bool = false;\n\n  /** Makes a check that the current stack pointer is valid. */\n  makeStackCheck(): ExpressionRef {\n    var module = this.module;\n    if (!this.hasStackCheckFunction) {\n      this.hasStackCheckFunction = true;\n      module.addFunction(\"~stack_check\", NativeType.None, NativeType.None, null,\n        module.if(\n          module.binary(BinaryOp.LtI32,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.global_get(BuiltinNames.data_end, this.ptrType)\n          ),\n          this.compiler.makeStaticAbort(this.compiler.ensureStaticString(\"stack overflow\"), this.compiler.program.nativeSource)\n        )\n      );\n    }\n    return module.call(\"~stack_check\", null, NativeType.None);\n  }\n\n  private updateCallOperands(operands: ExpressionRef[]): i32 {\n    var module = this.module;\n    var numSlots = 0;\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      let operand = operands[i];\n      let match = matchPattern(module, operand);\n      if (!match) continue;\n      if (!needsSlot(module, match)) {\n        operands[i] = match;\n        continue;\n      }\n      let currentFunction = this.currentFunction;\n      let numLocals = _BinaryenFunctionGetNumLocals(currentFunction);\n      let slotIndex = this.noteSlot(currentFunction, numLocals + this.callSlotOffset + i);\n      let temp = this.getSharedTemp(currentFunction, this.ptrType);\n      let stmts = new Array<ExpressionRef>();\n      // t = value\n      stmts.push(\n        module.local_set(temp, match, false)\n      );\n      // store<usize>(__stack_pointer, t, slotIndex * ptrSize)\n      stmts.push(\n        module.store(this.ptrSize,\n          module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n          module.local_get(temp, this.ptrType),\n          this.ptrType, slotIndex * this.ptrSize\n        )\n      );\n      // -> t\n      stmts.push(\n        module.local_get(temp, this.ptrType)\n      );\n      operands[i] = module.block(null, stmts, this.ptrType);\n      ++numSlots;\n    }\n    return numSlots;\n  }\n\n  /** Slot offset accounting for nested calls. */\n  private callSlotOffset: i32 = 0;\n  /** Slot offset stack in nested calls. */\n  private callSlotStack: i32[] = new Array();\n\n  /** @override */\n  visitCallPre(call: ExpressionRef): void {\n    var numOperands = _BinaryenCallGetNumOperands(call);\n    var operands = new Array<ExpressionRef>(numOperands);\n    for (let i: Index = 0; i < numOperands; ++i) {\n      operands[i] = _BinaryenCallGetOperandAt(call, i);\n    }\n    let numSlots = this.updateCallOperands(operands);\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      _BinaryenCallSetOperandAt(call, i, operands[i]);\n    }\n    if (numSlots) {\n      // Reserve these slots for us so nested calls use their own\n      this.callSlotOffset += numSlots;\n    }\n    this.callSlotStack.push(numSlots);\n  }\n\n  /** @override */\n  visitCall(call: ExpressionRef): void {\n    let numSlots = this.callSlotStack.pop();\n    if (numSlots) this.callSlotOffset -= numSlots;\n  }\n\n  /** @override */\n  visitCallIndirectPre(callIndirect: ExpressionRef): void {\n    let numOperands = _BinaryenCallIndirectGetNumOperands(callIndirect);\n    let operands = new Array<ExpressionRef>(numOperands);\n    for (let i: Index = 0; i < numOperands; ++i) {\n      operands[i] = _BinaryenCallIndirectGetOperandAt(callIndirect, i);\n    }\n    let numSlots = this.updateCallOperands(operands);\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      _BinaryenCallIndirectSetOperandAt(callIndirect, i, operands[i]);\n    }\n    if (numSlots) {\n      // Reserve these slots for us so nested calls use their own\n      this.callSlotOffset += numSlots;\n    }\n    this.callSlotStack.push(numSlots);\n  }\n\n  /** @override */\n  visitCallIndirect(callIndirect: ExpressionRef): void {\n    let numSlots = this.callSlotStack.pop();\n    if (numSlots) this.callSlotOffset -= numSlots;\n  }\n\n  /** @override */\n  visitLocalSet(localSet: ExpressionRef): void {\n    let module = this.module;\n    let value = _BinaryenLocalSetGetValue(localSet);\n    let match = matchPattern(module, value);\n    if (!match) return;\n    if (!needsSlot(module, match)) {\n      _BinaryenLocalSetSetValue(localSet, match);\n      return;\n    }\n    let index = _BinaryenLocalSetGetIndex(localSet);\n    let slotIndex = this.noteSlot(this.currentFunction, index);\n    let stmts = new Array<ExpressionRef>();\n    // store<usize>(__stack_pointer, local = match, slotIndex * ptrSize)\n    stmts.push(\n      module.store(this.ptrSize,\n        module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n        module.local_tee(index, match, false),\n        this.ptrType, slotIndex * this.ptrSize\n      )\n    );\n    if (_BinaryenLocalSetIsTee(localSet)) {\n      // -> local\n      stmts.push(\n        module.local_get(index, this.ptrType)\n      );\n      this.replaceCurrent(module.flatten(stmts, this.ptrType));\n    } else {\n      this.replaceCurrent(module.flatten(stmts, NativeType.None));\n    }\n  }\n\n  /** Updates a function with additional locals etc. */\n  updateFunction(funcRef: FunctionRef): void {\n    let name = _BinaryenFunctionGetName(funcRef);\n    let params = _BinaryenFunctionGetParams(funcRef);\n    let results = _BinaryenFunctionGetResults(funcRef);\n    let body = assert(_BinaryenFunctionGetBody(funcRef));\n    let numVars = _BinaryenFunctionGetNumVars(funcRef);\n    let vars = new Array<NativeType>();\n    for (let i: Index = 0; i < numVars; ++i) {\n      vars[i] = _BinaryenFunctionGetVar(funcRef, i);\n    }\n    let tempMaps = this.tempMaps;\n    if (tempMaps.has(funcRef)) {\n      let tempMap = changetype<TempMap>(tempMaps.get(funcRef));\n      for (let _keys = Map_keys(tempMap), i = 0, k = _keys.length; i < k; ++i) {\n        vars.push(_keys[i]);\n      }\n    }\n    let moduleRef = this.module.ref;\n    _BinaryenRemoveFunction(moduleRef, name);\n    let cArr = allocPtrArray(vars);\n    _BinaryenAddFunction(moduleRef, name, params, results, cArr, vars.length, body);\n    _free(cArr);\n  }\n\n  /** Updates a function export taking managed arguments. */\n  updateExport(exportRef: ExportRef, managedOperandIndices: i32[]): void {\n    var module = this.module;\n    var moduleRef = module.ref;\n    assert(_BinaryenExportGetKind(exportRef) == ExternalKind.Function);\n\n    var internalNameRef = _BinaryenExportGetValue(exportRef);\n    var internalName = module.readStringCached(internalNameRef)!;\n    var externalNameRef = _BinaryenExportGetName(exportRef);\n    var funcRef = _BinaryenGetFunction(moduleRef, internalNameRef);\n    var params = _BinaryenFunctionGetParams(funcRef);\n    var paramTypes = expandType(params);\n    var numParams = paramTypes.length;\n    var results = _BinaryenFunctionGetResults(funcRef);\n    var numLocals = numParams;\n    var vars = new Array<NativeType>();\n    var numSlots = assert(managedOperandIndices.length);\n    var frameSize = numSlots * this.ptrSize;\n    var wrapperName = \"export:\" + internalName;\n    var wrapperNameRef = module.allocStringCached(wrapperName);\n\n    if (_BinaryenGetFunction(moduleRef, wrapperNameRef) == 0) {\n      let stmts = new Array<ExpressionRef>();\n      // __stack_pointer -= frameSize\n      stmts.push(\n        this.makeStackOffset(-frameSize)\n      );\n      for (let slotIndex = 0; slotIndex < numSlots; ++slotIndex) {\n        // store<usize>(__stack_pointer, $local, slotIndex * ptrSize)\n        stmts.push(\n          module.store(this.ptrSize,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.local_get(managedOperandIndices[slotIndex], this.ptrType),\n            this.ptrType, slotIndex * this.ptrSize\n          )\n        );\n      }\n      let forwardedOperands = new Array<ExpressionRef>(numParams);\n      for (let i = 0; i < numParams; ++i) {\n        forwardedOperands[i] = module.local_get(i, paramTypes[i]);\n      }\n      if (results != NativeType.None) {\n        let tempIndex = numLocals++;\n        vars.push(results);\n        // t = original(...)\n        stmts.push(\n          module.local_set(tempIndex,\n            module.call(internalName, forwardedOperands, results),\n            false // internal\n          )\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n        // -> t\n        stmts.push(\n          module.local_get(tempIndex, results)\n        );\n      } else {\n        // original(...)\n        stmts.push(\n          module.call(internalName, forwardedOperands, results)\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n      }\n      let cArr = allocPtrArray(vars);\n      _BinaryenAddFunction(moduleRef, wrapperNameRef, params, results, cArr, vars.length,\n        module.block(null, stmts, results)\n      );\n      _free(cArr);\n    }\n    _BinaryenRemoveExport(moduleRef, externalNameRef);\n    _BinaryenAddFunctionExport(moduleRef, wrapperNameRef, externalNameRef);\n  }\n\n  /** @override */\n  walkModule(): void {\n    // Run the pass normally\n    super.walkModule();\n\n    // Instrument returns in functions utilizing stack slots\n    var module = this.module;\n    var instrumentReturns = new InstrumentReturns(this);\n    for (let _keys = Map_keys(this.slotMaps), i = 0, k = _keys.length; i < k; ++i) {\n      let func = _keys[i];\n      let slotMap = changetype<SlotMap>(this.slotMaps.get(func));\n      let frameSize = slotMap.size * this.ptrSize;\n\n      // Instrument function returns\n      instrumentReturns.frameSize = frameSize;\n      instrumentReturns.walkFunction(func);\n\n      // Instrument function entry\n      let stmts = new Array<ExpressionRef>();\n      // __stack_pointer -= frameSize\n      stmts.push(\n        this.makeStackOffset(-frameSize)\n      );\n      // memory.fill(__stack_pointer, 0, frameSize)\n      this.makeStackFill(frameSize, stmts);\n      \n      // Handle implicit return\n      let body = _BinaryenFunctionGetBody(func);\n      let bodyType = _BinaryenExpressionGetType(body);\n      if (bodyType == NativeType.Unreachable) {\n        // body\n        stmts.push(\n          body\n        );\n      } else if (bodyType == NativeType.None) {\n        // body\n        stmts.push(\n          body\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n      } else {\n        let temp = this.getSharedTemp(func, bodyType);\n        // t = body\n        stmts.push(\n          module.local_set(temp, body, false)\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n        // -> t\n        stmts.push(\n          module.local_get(temp, bodyType)\n        );\n      }\n      _BinaryenFunctionSetBody(func, module.flatten(stmts, bodyType));\n    }\n\n    // Update functions we added more locals to\n    // TODO: _BinaryenFunctionAddVar ?\n    for (let _keys = Map_keys(this.tempMaps), i = 0, k = _keys.length; i < k; ++i) {\n      this.updateFunction(_keys[i]);\n    }\n\n    // Update exports taking managed arguments\n    var exportMap = this.exportMap;\n    for (let _keys = Map_keys(exportMap), i = 0, k = _keys.length; i < k; ++i) {\n      let exportName = _keys[i];\n      let exportRef = _BinaryenGetExport(module.ref, module.allocStringCached(exportName));\n      let managedOperandIndices = changetype<i32[]>(exportMap.get(exportName));\n      this.updateExport(exportRef, managedOperandIndices);\n    }\n  }\n}\n\n/** Companion pass instrumenting `return` statements to restore the stack frame. */\nclass InstrumentReturns extends Pass {\n  /** Parent pass. */\n  parentPass: ShadowStackPass;\n  /** Frame size of the current function being processed. */\n  frameSize: i32 = 0;\n\n  constructor(shadowStack: ShadowStackPass) {\n    super(shadowStack.module);\n    this.parentPass = shadowStack;\n  }\n\n  /** @override */\n  visitReturn(ret: ExpressionRef): void {\n    assert(this.frameSize);\n    var module = this.module;\n    var value = _BinaryenReturnGetValue(ret);\n    var stmts = new Array<ExpressionRef>();\n    if (value) {\n      let returnType = _BinaryenExpressionGetType(value);\n      let temp = this.parentPass.getSharedTemp(this.currentFunction, returnType);\n      // t = value\n      stmts.push(\n        module.local_set(temp, value, false)\n      );\n      // __stack_pointer += frameSize\n      stmts.push(\n        this.parentPass.makeStackOffset(+this.frameSize)\n      );\n      // return t\n      _BinaryenReturnSetValue(ret, module.local_get(temp, returnType));\n    } else {\n      // __stack_pointer += frameSize\n      stmts.push(\n        this.parentPass.makeStackOffset(+this.frameSize)\n      );\n      // return\n    }\n    stmts.push(\n      ret\n    );\n    this.replaceCurrent(module.flatten(stmts, NativeType.Unreachable));\n  }\n}","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// └─File                     File, analogous to Source in the AST\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef,\n  MemorySegment\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  writeI64,\n  writeI32AsI64,\n  writeI64AsI32\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n// Memory manager constants\nconst AL_SIZE = 16;\nconst AL_MASK = AL_SIZE - 1;\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_SUBST + \".wasm\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver!: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile!: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Function` prototype. */\n  get functionPrototype(): ClassPrototype {\n    var cached = this._functionPrototype;\n    if (!cached) this._functionPrototype = cached = <ClassPrototype>this.require(CommonNames.Function, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _functionPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    var prototype = this.lookup(CommonNames.abort);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__new(size: usize, id: u32): usize` instance. */\n  get newInstance(): Function {\n    var cached = this._newInstance;\n    if (!cached) this._newInstance = cached = this.requireFunction(CommonNames.new_);\n    return cached;\n  }\n  private _newInstance: Function | null = null;\n\n  /** Gets the runtime `__renew(ptr: usize, size: usize): usize` instance. */\n  get renewInstance(): Function {\n    var cached = this._renewInstance;\n    if (!cached) this._renewInstance = cached = this.requireFunction(CommonNames.renew);\n    return cached;\n  }\n  private _renewInstance: Function | null = null;\n\n  /** Gets the runtime `__link(parentPtr: usize, childPtr: usize, expectMultiple: bool): void` instance. */\n  get linkInstance(): Function {\n    var cached = this._linkInstance;\n    if (!cached) this._linkInstance = cached = this.requireFunction(CommonNames.link);\n    return cached;\n  }\n  private _linkInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__newBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get newBufferInstance(): Function {\n    var cached = this._newBufferInstance;\n    if (!cached) this._newBufferInstance = cached = this.requireFunction(CommonNames.newBuffer);\n    return cached;\n  }\n  private _newBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__newArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get newArrayInstance(): Function {\n    var cached = this._newArrayInstance;\n    if (!cached) this._newArrayInstance = cached = this.requireFunction(CommonNames.newArray);\n    return cached;\n  }\n  private _newArrayInstance: Function | null = null;\n\n  /** Gets the runtime's internal `BLOCK` instance. */\n  get BLOCKInstance(): Class {\n    var cached = this._BLOCKInstance;\n    if (!cached) this._BLOCKInstance = cached = this.requireClass(CommonNames.BLOCK);\n    return cached;\n  }\n  private _BLOCKInstance: Class | null = null;\n\n  /** Gets the runtime's internal `OBJECT` instance. */\n  get OBJECTInstance(): Class {\n    var cached = this._OBJECTInstance;\n    if (!cached) this._OBJECTInstance = cached = this.requireClass(CommonNames.OBJECT);\n    return cached;\n  }\n  private _OBJECTInstance: Class | null = null;\n\n  // Utility\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Gets the overhead of a memory manager block. */\n  get blockOverhead(): i32 {\n    // BLOCK | data...\n    //       ^ 16b alignment\n    return this.BLOCKInstance.nextMemoryOffset;\n  }\n\n  /** Gets the overhead of a managed object, excl. block overhead, incl. alignment. */\n  get objectOverhead(): i32 {\n    // OBJECT+align | data...\n    //        └ 0 ┘ ^ 16b alignment\n    return (this.OBJECTInstance.nextMemoryOffset - this.blockOverhead + AL_MASK) & ~AL_MASK;\n  }\n\n  /** Gets the total overhead of a managed object, incl. block overhead. */\n  get totalOverhead(): i32 {\n    // BLOCK | OBJECT+align | data...\n    // └     = TOTAL      ┘ ^ 16b alignment\n    return this.blockOverhead + this.objectOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart(currentOffset: i32): i32 {\n    var blockOverhead = this.blockOverhead;\n    return ((currentOffset + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart64(currentOffset: i64): i64 {\n    var blockOverhead = i64_new(this.blockOverhead);\n    return i64_sub(i64_align(i64_add(currentOffset, blockOverhead), AL_SIZE), blockOverhead);\n  }\n\n  /** Computes the size of a memory manager block, excl. block overhead. */\n  computeBlockSize(payloadSize: i32, isManaged: bool): i32 {\n    // see: std/rt/tlsf.ts, computeSize; becomes mmInfo\n    if (isManaged) payloadSize += this.objectOverhead;\n    // we know that payload must be aligned, and that block sizes must be chosen\n    // so that blocks are adjacent with the next payload aligned. hence, block\n    // size is payloadSize rounded up to where the next block would start:\n    var blockSize = this.computeBlockStart(payloadSize);\n    // make sure that block size is valid according to TLSF requirements\n    var blockOverhead = this.blockOverhead;\n    var blockMinsize = ((3 * this.options.usizeType.byteSize + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n    if (blockSize < blockMinsize) blockSize = blockMinsize;\n    const blockMaxsize = 1 << 30; // 1 << (FL_BITS + SB_BITS - 1), exclusive\n    const tagsMask = 3;\n    if (blockSize >= blockMaxsize || (blockSize & tagsMask) != 0) {\n      throw new Error(\"invalid block size\");\n    }\n    return blockSize;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.funcref, Type.funcref);\n    this.registerNativeType(CommonNames.externref, Type.externref);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n    this.registerNativeType(CommonNames.eqref, Type.eqref);\n    this.registerNativeType(CommonNames.i31ref, Type.i31ref);\n    this.registerNativeType(CommonNames.dataref, Type.dataref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n    this.registerConstantInteger(CommonNames.ASC_EXPORT_RUNTIME, Type.bool,\n      i64_new(options.exportRuntime ? 1 : 0, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_GC, Type.bool,\n      i64_new(options.hasFeature(Feature.GC) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MEMORY64, Type.bool,\n      i64_new(options.hasFeature(Feature.MEMORY64) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports.\n    // note that imports may depend upon imports, so repeat until there's no more progress.\n    do {\n      let i = 0, madeProgress = false;\n      while (i < queuedImports.length) {\n        let queuedImport = queuedImports[i];\n        let localIdentifier = queuedImport.localIdentifier;\n        let foreignIdentifier = queuedImport.foreignIdentifier;\n        if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            foreignIdentifier.text,\n            queuedImport.foreignPath,\n            queuedImport.foreignPathAlt,\n            queuedExports\n          );\n          if (element) {\n            queuedImport.localFile.add(\n              localIdentifier.text,\n              element,\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n          }\n        } else { // i.e. import * as bar from \"./bar\"\n          let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n          if (foreignFile) {\n            let localFile = queuedImport.localFile;\n            let localName = localIdentifier.text;\n            localFile.add(\n              localName,\n              foreignFile.asAliasNamespace(\n                localName,\n                localFile,\n                localIdentifier\n              ),\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n            assert(false); // already reported by the parser not finding the file\n          }\n        }\n      }\n      if (!madeProgress) {\n        // report queued imports we were unable to resolve\n        for (let j = 0, l = queuedImports.length; j < l; ++j) {\n          let queuedImport = queuedImports[j];\n          let foreignIdentifier = queuedImport.foreignIdentifier;\n          if (foreignIdentifier) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n            );\n          }\n        }\n        break;\n      }\n    } while (true);\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookup(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) {\n      this.registerWrapperClass(Type.funcref, CommonNames.Funcref);\n      this.registerWrapperClass(Type.externref, CommonNames.Externref);\n      if (options.hasFeature(Feature.GC)) {\n        this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n        this.registerWrapperClass(Type.eqref, CommonNames.Eqref);\n        this.registerWrapperClass(Type.i31ref, CommonNames.I31ref);\n        this.registerWrapperClass(Type.dataref, CommonNames.Dataref);\n      }\n    }\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) {\n          this.elementsByName.delete(alias);\n          continue;\n        }\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookup(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookup(name);\n    if (!element) throw new Error(\"Missing standard library component: \" + name);\n    if (element.kind != kind) throw Error(\"Invalid standard library component kind: \" + name);\n    return element;\n  }\n\n  /** Requires that a global variable is present and returns it. */\n  requireGlobal(name: string): Global {\n    return <Global>this.require(name, ElementKind.GLOBAL);\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"Invalid standard library class: \" + name);\n    return resolved;\n  }\n\n  /** Requires that a global function is present and returns it. */\n  requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"Invalid standard library function: \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the wrapper class of a non-class type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.isInternalReference && !wrapperClasses.has(type));\n    var element = assert(this.lookup(className));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = assert(this.resolver.resolveClass(<ClassPrototype>element, null));\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.isIntegerInclReference);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.isFloatValue);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary || declaration.is(CommonFlags.EXPORT)) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // keep original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent!: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction!: Function;\n  /** Array of `import * as X` alias namespaces of this file. */\n  aliasNamespaces: Array<Namespace> = new Array<Namespace>();\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookup(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n\n    // Also, add to the namespaces that capture our exports\n    for(let i = 0; i < this.aliasNamespaces.length; i++) {\n      let ns = this.aliasNamespaces[i];\n      ns.add(name, element);\n    }\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asAliasNamespace(\n    name: string, \n    parent: Element, \n    localIdentifier: IdentifierExpression\n  ): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    // NOTE: Some exports are still queued, and can't yet be added here,\n    // so we remember all the alias namespaces and add to them as well\n    // when adding an element to the file.\n    this.aliasNamespaces.push(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.isIntegerInclReference);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.isFloatValue);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Original name of the (temporary) local. */\n  private originalName: string;\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.originalName = name;\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n\n  /** Sets the temporary name of this local. */\n  setTemporaryName(name: string): void {\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n\n  /** Resets the temporary name of this local. */\n  resetTemporaryName(): void {\n    var name = this.originalName;\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS ||\n           parent.kind == ElementKind.PROPERTY_PROTOTYPE && (\n             parent.parent.kind == ElementKind.CLASS ||\n             parent.parent.kind == ElementKind.INTERFACE\n           );\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow!: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n  /** Runtime memory segment, if created. */\n  memorySegment: MemorySegment | null = null;\n  /** Original function, if a stub. Otherwise `this`. */\n  original!: Function;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.original = this;\n    var program = prototype.program;\n    this.type = signature.type;\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          thisType,\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = this.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Gets the name of the parameter at the specified index. */\n  getParameterName(index: i32): string {\n    var parameters = (<FunctionDeclaration>this.declaration).signature.parameters;\n    return parameters.length > index\n      ? parameters[index].name.text\n      : getDefaultParameterName(index);\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.original.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.original = this.original;\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempFuncrefs: Local[] | null = null;\n  tempExternrefs: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempEqrefs: Local[] | null = null;\n  tempI31refs: Local[] | null = null;\n  tempDatarefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt() - 1 // source maps are 0-based\n        );\n      }\n    }\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the field's `this` type. */\n  get thisType(): Type {\n    var parent = this.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    return (<Class>parent).type;\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    var cached = this._internalGetterName;\n    if (cached === null) this._internalGetterName = cached = this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n    return cached;\n  }\n  private _internalGetterName: string | null = null;\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    var cached = this._internalSetterName;\n    if (cached === null) this._internalSetterName = cached = this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n    return cached;\n  }\n  private _internalSetterName: string | null = null;\n\n  /** Gets the signature of the respective getter function. */\n  get internalGetterSignature(): Signature {\n    var cached = this._internalGetterSignature;\n    if (!cached) this._internalGetterSignature = cached = new Signature(this.program, null, this.type, this.thisType);\n    return cached;\n  }\n  private _internalGetterSignature: Signature | null = null;\n\n  /** Gets the signature of the respective setter function. */\n  get internalSetterSignature(): Signature {\n    var cached = this._internalSetterSignature;\n    if (!cached) this._internalGetterSignature = cached = new Signature(this.program, [ this.type ], Type.void, this.thisType);\n    return cached;\n  }\n  private _internalSetterSignature: Signature | null = null;\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n  /** Whether the field initialization check has already been performed. */\n  didCheckFieldInitialization: bool = false;\n  /** Runtime visitor function reference. */\n  visitRef: FunctionRef = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    type.classReference = this;\n    this.setType(type);\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads != null && overloads.has(kind)) {\n        return assert(overloads.get(kind));\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Creates a buffer suitable to hold a runtime instance of this class. */\n  createBuffer(overhead: i32 = 0): Uint8Array {\n    var program = this.program;\n    var payloadSize = this.nextMemoryOffset + overhead;\n    var blockSize = program.computeBlockSize(payloadSize, true); // excl. overhead\n    var buffer = new Uint8Array(program.blockOverhead + blockSize);\n    var OBJECT = program.OBJECTInstance;\n    OBJECT.writeField(\"mmInfo\", blockSize, buffer, 0);\n    OBJECT.writeField(\"gcInfo\", 0, buffer, 0);\n    OBJECT.writeField(\"gcInfo2\", 0, buffer, 0);\n    OBJECT.writeField(\"rtId\", this.id, buffer, 0);\n    OBJECT.writeField(\"rtSize\", payloadSize, buffer, 0);\n    return buffer;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32 = this.program.totalOverhead): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      let typeKind = fieldInstance.type.kind;\n      switch (typeKind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          assert(!i64_is(value));\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          assert(!i64_is(value));\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          assert(!i64_is(value));\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (this.program.options.isWasm64) {\n            if (i64_is(value)) {\n              writeI64(value, buffer, offset);\n            } else {\n              writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.USIZE);\n            }\n            return 8;\n          } else {\n            if (i64_is(value)) {\n              writeI64AsI32(value, buffer, offset, typeKind == TypeKind.USIZE);\n            } else {\n              writeI32(i32(value), buffer, offset);\n            }\n            return 4;\n          }\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          if (i64_is(value)) {\n            writeI64(value, buffer, offset);\n          } else {\n            writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.U64);\n          }\n          return 8;\n        }\n        case TypeKind.F32: {\n          assert(!i64_is(value));\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          assert(!i64_is(value));\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is pointerfree. Useful to know for the GC. */\n  get isPointerfree(): bool {\n    var program = this.program;\n\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n\n      // Check that there are no managed instance fields\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.isManaged) return false;\n        }\n      }\n\n      // Check that this isn't a managed collection\n      if (instanceMembers.has(CommonNames.visit)) {\n        let prototype = this.prototype;\n        if (\n          prototype == program.arrayPrototype ||\n          prototype == program.staticArrayPrototype ||\n          prototype == program.setPrototype ||\n          prototype == program.mapPrototype\n        ) {\n          // Note that we cannot know for sure anymore as soon as the collection\n          // is extended, because user code may implement a custom visitor.\n          let typeArguments = assert(this.getTypeArgumentsTo(prototype));\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (typeArguments[i].isManaged) return false;\n          }\n          return true;\n        }\n        return false; // has a custom __visit\n      }\n    }\n    return true;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index];\n}\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  uniqueMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          uniqueMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = uniqueMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (type.isInternalReference) return type.asNullable();\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_cannot_be_nullable,\n            nameNode.range, nameNode.identifier.text\n          );\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.getClassOrWrapper(this.program);\n    if (classReference) {\n      let overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n      if (overload) return overload.signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.getSignature();\n    if (signatureReference) return signatureReference.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_has_no_call_signatures,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = uniqueMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, uniqueMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.getClassOrWrapper(this.program);\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    let classReference = type.getClassOrWrapper(this.program);\n    if (classReference) return classReference;\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    var outerFlow = ctxFlow.outer;\n    if (outerFlow) {\n      if (element = outerFlow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.getClass();\n        if (classReference) {\n          return classReference.type.asNullable();\n        } else {\n          let signatureReference = ctxType.getSignature();\n          if (signatureReference) {\n            return signatureReference.type.asNullable();\n          } else if (ctxType.isExternalReference) {\n            return ctxType; // TODO: nullable?\n          }\n        }\n        return this.program.options.usizeType;\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, uniqueMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, variableLikeElement.type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, returnType.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // Function with shadow type, i.e. function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        } else if (!target.is(CommonFlags.GENERIC)) {\n          // Inherit from 'Function' if not overridden, i.e. fn.call\n          let members = target.members;\n          if (!members || !members.has(propertyName)) {\n            let functionInstance = this.resolveFunction(<FunctionPrototype>target, null, uniqueMap<string,Type>(), ReportMode.SWALLOW);\n            if (functionInstance) {\n              let wrapper = functionInstance.type.getClassOrWrapper(this.program);\n              if (wrapper) target = wrapper;\n            }\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            let member = assert(members.get(propertyName));\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    let classReference = targetType.getClassOrWrapper(this.program);\n    if (classReference) {\n      do {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (ctxType.isValue) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is common type of LHS and RHS, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        return assert(intType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        return assert(fltType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.getClass();\n        if (classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.isInternalReference\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let varType = (<VariableLikeElement>target).type;\n        let varElement = this.getElementOfType(varType);\n        if (!varElement || varElement.kind != ElementKind.CLASS) {\n          break;\n        }\n        target = varElement;\n        // fall-through\n      }\n      case ElementKind.CLASS: {\n        let typeArguments = (<Class>target).getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          let signatureReference = assert(ftype.signatureReference);\n          return signatureReference.returnType;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    return assert(Type.bool.getClassOrWrapper(this.program));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      if (parameterType == Type.void) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      parameterTypes[i] = parameterType;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        uniqueMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          uniqueMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n              if (fieldType == Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldTypeNode.range\n                  );\n                }\n                break;\n              }\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  start: i32;\n  end: i32;\n  source!: Source;\n  debugInfoRef: usize = 0;\n\n  constructor(start: i32, end: i32) {\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    let range = new Range(\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n    range.source = a.source;\n    return range;\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    let range = new Range(this.start, this.start);\n    range.source = this.source;\n    return range;\n  }\n\n  get atEnd(): Range {\n    let range = new Range(this.end, this.end);\n    range.source = this.source;\n    return range;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n    this.source = source;\n\n    var text = source.text;\n    var end = text.length;\n    var pos = 0;\n    // skip bom\n    if (\n      pos < end &&\n      text.charCodeAt(pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++pos;\n    }\n\n    // skip shebang\n    if (\n      pos + 1 < end &&\n      text.charCodeAt(pos) == CharCode.HASH &&\n      text.charCodeAt(pos + 1) == CharCode.EXCLAMATION\n    ) {\n      pos += 2;\n      while (\n        pos < end &&\n        text.charCodeAt(pos) != CharCode.LINEFEED\n      ) {\n        ++pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n    this.pos = pos;\n    this.end = end;\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    while (pos < end) {\n      this.tokenPos = pos;\n      let c = text.charCodeAt(pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++pos < end &&\n            text.charCodeAt(pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            ++pos;\n            if (\n              maxTokenLength > 2 && pos < end &&\n              text.charCodeAt(pos) == CharCode.EQUALS\n            ) {\n              this.pos = pos + 1;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            this.pos = pos;\n            return Token.EXCLAMATION_EQUALS;\n          }\n          this.pos = pos;\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          this.pos = pos;\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.PERCENT_EQUALS;\n          }\n          this.pos = pos;\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.AMPERSAND) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          this.pos = pos + 1;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          this.pos = pos + 1;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++pos;\n              if (\n                maxTokenLength > 2 && pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              this.pos = pos;\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          this.pos = pos;\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.PLUS) {\n              this.pos = pos + 1;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          this.pos = pos + 1;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.MINUS) {\n              this.pos = pos + 1;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (isDecimalDigit(chr)) {\n              this.pos = pos - 1;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(pos + 1) == CharCode.DOT\n            ) {\n              this.pos = pos + 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          this.pos = pos;\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = pos;\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                pos + 1 < end &&\n                text.charCodeAt(pos + 1) == CharCode.SLASH\n              ) {\n                ++pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++pos < end) {\n                if (text.charCodeAt(pos) == CharCode.LINEFEED) {\n                  ++pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++pos < end) {\n                c = text.charCodeAt(pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  pos + 1 < end &&\n                  text.charCodeAt(pos + 1) == CharCode.SLASH\n                ) {\n                  pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          this.pos = pos;\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          this.pos = pos + 1;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          this.pos = pos + 1;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              this.pos = pos;\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              this.pos = pos;\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              this.pos = pos + 1;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          this.pos = pos;\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++pos;\n              if (maxTokenLength > 2 && pos < end) {\n                chr = text.charCodeAt(pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++pos;\n                  if (\n                    maxTokenLength > 3 && pos < end &&\n                    text.charCodeAt(pos) == CharCode.EQUALS\n                  ) {\n                    this.pos = pos + 1;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  this.pos = pos;\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  this.pos = pos + 1;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              this.pos = pos;\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          this.pos = pos + 1;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          this.pos = pos + 1;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.CARET_EQUALS;\n          }\n          this.pos = pos;\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          this.pos = pos + 1;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.BAR) {\n              this.pos = pos + 1;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.BAR_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          this.pos = pos + 1;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          this.pos = pos + 1;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = pos;\n              while (\n                ++pos < end &&\n                isIdentifierPart(c = text.charCodeAt(pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                this.pos = pos;\n                return keywordToken;\n              }\n              this.pos = pos = posBefore;\n            }\n            this.pos = pos;\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++pos;\n            break;\n          }\n          let start = pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && pos < end &&\n            ((text.charCodeAt(pos)) & 0xFC00) == 0xDC00\n          ) ++pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, pos)\n          );\n          this.pos = pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    this.pos = pos;\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    if (token == Token.GREATERTHAN) {  // where parsing type arguments\n      maxCompoundLength = 1;\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    let range = new Range(start, end);\n    range.source = this.source;\n    return range;\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var start = pos;\n    while (\n      ++pos < end &&\n      isIdentifierPart(text.charCodeAt(pos))\n    );\n    this.pos = pos;\n    return text.substring(start, pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var quote = text.charCodeAt(pos++);\n    var start = pos;\n    var result = \"\";\n\n    if (quote == CharCode.BACKTICK) {\n      this.warning(\n        DiagnosticCode.Not_implemented_0,\n        this.range(start - 1, end),\n        \"Template Literals can only be used for multi-line strings. Interpolation is not supported.\"\n      );\n    }\n\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(pos);\n      if (c == quote) {\n        result += text.substring(start, pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, pos);\n        this.pos = pos; // save\n        result += this.readEscapeSequence();\n        pos = this.pos; // restore\n        start = pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, pos)\n        );\n        break;\n      }\n      ++pos;\n    }\n    this.pos = pos;\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 2 < this.end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos = pos + 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos = pos + 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos = pos + 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(pos + 1))) {\n        let start = pos;\n        this.pos = pos + 1;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    let pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var text = this.source.text;\n    var end = this.end;\n    var start = this.pos;\n    var sepCount = this.readDecimalFloatPartial(false);\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      sepCount += this.readDecimalFloatPartial();\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        sepCount += this.readDecimalFloatPartial();\n      }\n    }\n    let result = text.substring(start, this.pos);\n    if (sepCount) result = result.replaceAll(\"_\", \"\");\n    return parseFloat(result);\n  }\n\n  /** Reads past one section of a decimal float literal. Returns the number of separators encountered. */\n  private readDecimalFloatPartial(allowLeadingZeroSep: bool = true): u32 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var start = pos;\n    var end = this.end;\n    var sepEnd = start;\n    var sepCount = 0;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n\n      if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (!allowLeadingZeroSep && pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n        ++sepCount;\n      } else if (!isDecimalDigit(c)) {\n        break;\n      }\n      ++pos;\n    }\n\n    if (pos != start && sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n\n    this.pos = pos;\n    return sepCount;\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    while (pos < end) {\n      let c = text.charCodeAt(pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(pos - 1, pos)\n        );\n        this.pos = pos;\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(pos)\n      );\n      this.pos = pos;\n      return \"\";\n    }\n    this.pos = pos;\n    return String.fromCharCode(value);\n  }\n\n  checkForIdentifierStartAfterNumericLiteral(): void {\n    // TODO: BigInt n\n    var pos = this.pos;\n    if (pos < this.end && isIdentifierStart(this.source.text.charCodeAt(pos))) {\n      this.error(\n        DiagnosticCode.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal,\n        this.range(pos)\n      );\n    }\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Function reference. */\n  FUNCREF,\n  /** External reference. */\n  EXTERNREF,\n  /** Any reference. */\n  ANYREF,\n  /** Equatable reference. */\n  EQREF,\n  /** 31-bit integer reference. */\n  I31REF,\n  /** Data reference. */\n  DATAREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a varying (in size) type. */\n  VARYING = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is an external type. */\n  EXTERNAL = 1 << 11,\n  /** Is a class. */\n  CLASS = 1 << 12,\n  /** Is a function. */\n  FUNCTION = 1 << 13\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  private _nonNullableType: Type | null = null;\n  /** Respective nullable type, if non-nullable. */\n  private _nullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    if (!(flags & TypeFlags.NULLABLE)) {\n      this._nonNullableType = this;\n    } else {\n      this._nullableType = this;\n    }\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this type represents a basic value. */\n  get isValue(): bool {\n    return this.is(TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer value. */\n  get isIntegerValue(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a small (< 32 bits) integer value. */\n  get isShortIntegerValue(): bool {\n    return this.is(TypeFlags.SHORT | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a long (> 32 bits) integer value. */\n  get isLongIntegerValue(): bool {\n    return this.is(TypeFlags.LONG | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a signed integer value. */\n  get isSignedIntegerValue(): bool {\n    return this.is(TypeFlags.SIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an unsigned integer value. */\n  get isUnsignedIntegerValue(): bool {\n    return this.is(TypeFlags.UNSIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a varying (in size) integer value. */\n  get isVaryingIntegerValue(): bool {\n    return this.is(TypeFlags.VARYING | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer, including references.  */\n  get isIntegerInclReference(): bool {\n    return this.is(TypeFlags.INTEGER);\n  }\n\n  /** Tests if this type represents a floating point value. */\n  get isFloatValue(): bool {\n    return this.is(TypeFlags.FLOAT | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents a numeric (integer or floating point) value. */\n  get isNumericValue(): bool {\n    return this.isIntegerValue || this.isFloatValue;\n  }\n\n  /** Tests if this type represents a boolean value. */\n  get isBooleanValue(): bool {\n    return this == Type.bool;\n  }\n\n  /** Tests if this type represents a vector value. */\n  get isVectorValue(): bool {\n    return this.is(TypeFlags.VECTOR | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents an internal or external reference. */\n  get isReference(): bool {\n    return this.is(TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a nullable internal or external reference. */\n  get isNullableReference(): bool {\n    return this.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an internal object. */\n  get isInternalReference(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an external object. */\n  get isExternalReference(): bool {\n    return this.is(TypeFlags.EXTERNAL | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a class. */\n  get isClass(): bool {\n    return this.isInternalReference\n      ? this.classReference !== null\n      : false;\n  }\n\n  /** Gets the underlying class of this type, if any. */\n  getClass(): Class | null {\n    return this.isInternalReference\n      ? this.classReference\n      : null;\n  }\n\n  /** Gets the underlying class or wrapper class of this type, if any. */\n  getClassOrWrapper(program: Program): Class | null {\n    let classReference = this.getClass();\n    if (classReference) {\n      // typical class\n      return classReference;\n    } else {\n      let signatureReference = this.getSignature();\n      if (signatureReference) {\n        // function wrapper\n        let type = signatureReference.type;\n        let wrapper = assert(program.resolver.resolveClass(program.functionPrototype, [ type ]));\n        wrapper.wrappedType = type;\n        return wrapper;\n      } else {\n        let wrapperClasses = program.wrapperClasses;\n        if (wrapperClasses.has(this)) {\n          // value wrapper\n          return assert(wrapperClasses.get(this));\n        }\n      }\n    }\n    return null;\n  }\n\n  /** Tests if this type represents a function. */\n  get isFunction(): bool {\n    return this.isInternalReference\n      ? this.signatureReference !== null\n      : false;\n  }\n\n  /** Gets the underlying function signature of this type, if any. */\n  getSignature(): Signature | null {\n    return this.isInternalReference\n      ? this.signatureReference\n      : null;\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.isInternalReference) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      return this.signatureReference !== null; // function references are managed\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Gets the corresponding non-nullable type. */\n  get nonNullableType(): Type {\n    if (this.isExternalReference) {\n      return this; // TODO\n    }\n    return assert(this._nonNullableType); // set either in ctor or asNullable\n  }\n\n  /** Gets the corresponding nullable type, if applicable. */\n  get nullableType(): Type | null {\n    return this._nullableType; // set either in ctor or asNullable\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.isInternalReference);\n    var nullableType = this._nullableType;\n    if (!nullableType) {\n      assert(!this.isNullableReference);\n      this._nullableType = nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      nullableType.classReference = this.classReference;         // either a class reference\n      nullableType.signatureReference = this.signatureReference; // or a function reference\n      nullableType._nonNullableType = this;\n    }\n    return nullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.isReference) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.isNullableReference == other.isNullableReference\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.isReference) {\n      if (target.isReference) {\n        if (!this.isNullableReference || target.isNullableReference) {\n          if (currentClass = this.getClass()) {\n            if (targetClass = target.getClass()) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.getSignature()) {\n            if (targetFunction = target.getSignature()) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.isExternalReference && (this.kind == target.kind || (target.kind == TypeKind.ANYREF && this.kind != TypeKind.EXTERNREF))) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.isReference) {\n      if (this.isIntegerValue) {\n        if (target.isIntegerValue) {\n          if (\n            !signednessIsRelevant ||\n            this.isBooleanValue || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.isSignedIntegerValue == target.isSignedIntegerValue\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.isFloatValue) {\n        if (target.isFloatValue) {\n          return this.size <= target.size;\n        }\n      } else if (this.isVectorValue) {\n        if (target.isVectorValue) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.isReference) return this.isAssignableTo(target);\n    else if (target.isReference) return false;\n    // not dealing with references from here on\n    if (this.isIntegerValue) {\n      return target.isIntegerValue && target.size == this.size && (\n        !signednessIsRelevant ||\n        this.isSignedIntegerValue == target.isSignedIntegerValue\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    // special in that it allows integer references as well\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(validWat: bool = false): string {\n    const nullablePostfix = validWat\n      ? \"|null\"\n      : \" | null\";\n    if (this.isReference) {\n      let classReference = this.getClass();\n      if (classReference) {\n        return this.isNullableReference\n          ? classReference.internalName + nullablePostfix\n          : classReference.internalName;\n      } else {\n        let signatureReference = this.getSignature();\n        if (signatureReference) {\n          return this.isNullableReference\n            ? \"(\" + signatureReference.toString(validWat) + \")\" + nullablePostfix\n            : signatureReference.toString(validWat);\n        }\n      }\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      case TypeKind.EQREF: return \"eqref\";\n      case TypeKind.I31REF: return \"i31ref\";\n      case TypeKind.DATAREF: return \"dataref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      // TODO: nullable/non-nullable refs have different native types\n      case TypeKind.FUNCREF: return NativeType.Funcref;\n      case TypeKind.EXTERNREF: return NativeType.Externref;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.EQREF: return NativeType.Eqref;\n      case TypeKind.I31REF: return NativeType.I31ref;\n      case TypeKind.DATAREF: return NativeType.Dataref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Function reference. */\n  static readonly funcref: Type = new Type(TypeKind.FUNCREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** External reference. */\n  static readonly externref: Type = new Type(TypeKind.EXTERNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Any reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Equatable reference. */\n  static readonly eqref: Type = new Type(TypeKind.EQREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** 31-bit integer reference. */\n  static readonly i31ref: Type = new Type(TypeKind.I31REF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Data reference. */\n  static readonly dataref: Type = new Type(TypeKind.DATAREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString(true);\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** Unique id representing this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    this.type = type;\n    type.signatureReference = this;\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Tests if this signature has at least one managed operand. */\n  get hasManagedOperands(): bool {\n    var thisType = this.thisType;\n    if (thisType) {\n      if (thisType.isManaged) return true;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (parameterTypes[i].isManaged) return true;\n    }\n    return false;\n  }\n\n  /** Gets the indices of all managed operands. */\n  getManagedOperandIndices(): i32[] {\n    var indices = new Array<i32>();\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (thisType.isManaged) {\n        indices.push(index);\n      }\n      ++index;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (parameterTypes[i].isManaged) {\n        indices.push(index);\n      }\n      ++index;\n    }\n    return indices;\n  }\n\n  /** Converts this signature to a string. */\n  toString(validWat: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(validWat ? \"%28\" : \"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(validWat ? \"this:\" : \"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString(validWat));\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(validWat ? \"%2C\" : \", \");\n        if (i == restIndex) sb.push(\"...\");\n        sb.push(parameters[i].toString(validWat));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?\");\n      }\n    }\n    sb.push(validWat ? \"%29=>\" : \") => \");\n    sb.push(this.returnType.toString(validWat));\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    return new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n  }\n}\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8\n       | i32(buffer[offset + 2]) << 16\n       | i32(buffer[offset + 3]) << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Writes a 32-bit integer as a 64-bit integer to the specified buffer. */\nexport function writeI32AsI64(value: i32, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  writeI32(value, buffer, offset);\n  writeI32(unsigned || value >= 0 ? 0 : -1, buffer, offset + 4);\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Writes a 64-bit integer as a 32-bit integer to the specified buffer. */\nexport function writeI64AsI32(value: i64, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  assert(unsigned ? i64_is_u32(value) : i64_is_i32(value));\n  writeI32(i64_low(value), buffer, offset);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\n/** Makes a unique map. Typically used to track contextual type arguemnts. */\nexport function uniqueMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./terminal\";\nexport * from \"./text\";\nexport * from \"./vector\";\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Terminal utility.\n * @license Apache-2.0\n */\n\n/** Gray terminal color code. */\nexport const COLOR_GRAY = \"\\u001b[90m\";\n/** Red terminal color code. */\nexport const COLOR_RED = \"\\u001b[91m\";\n/** Green terminal color code. */\nexport const COLOR_GREEN = \"\\u001b[92m\";\n/** Yellow terminal color code. */\nexport const COLOR_YELLOW = \"\\u001b[93m\";\n/** Blue terminal color code. */\nexport const COLOR_BLUE = \"\\u001b[94m\";\n/** Magenta terminal color code. */\nexport const COLOR_MAGENTA = \"\\u001b[95m\";\n/** Cyan terminal color code. */\nexport const COLOR_CYAN = \"\\u001b[96m\";\n/** White terminal color code. */\nexport const COLOR_WHITE = \"\\u001b[97m\";\n/** Terminal color reset code. */\nexport const COLOR_RESET = \"\\u001b[0m\";\n\n/** Whether terminal colors are enabled or not. */\nvar colorsEnabled = true;\n\n/** Checks whether terminal colors are enabled or not. */\nexport function isColorsEnabled(): bool {\n  return colorsEnabled;\n}\n\n/** Sets whether terminal colors are enabled or not. */\nexport function setColorsEnabled(isEnabled: bool): bool {\n  var wasEnabled = isEnabled;\n  colorsEnabled = isEnabled;\n  return wasEnabled;\n}\n\n/** Wraps the specified text in the specified terminal color code. */\nexport function colorize(text: string, color: string): string {\n  return colorsEnabled ? color + text + COLOR_RESET : text;\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Various vector utility.\n * @license Apache-2.0\n */\n\n/** v128 zero constant. */\nexport const v128_zero = new Uint8Array(16);\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9, // see: https://github.com/WebAssembly/multi-value\n  /** Garbage collection. */\n  GC = 1 << 10, // see: https://github.com/WebAssembly/gc\n  /** Memory64. */\n  MEMORY64 = 1 << 11 // see: https://github.com/WebAssembly/memory64\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n    case Feature.GC: return \"gc\";\n    case Feature.MEMORY64: return \"memory64\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** Portable. */\n  JS = 0,\n  /** WebAssembly with 32-bit pointers. */\n  WASM32 = 1,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64 = 2,\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type has no outgoing pointers. */\n  POINTERFREE = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function toText(watFormat = true) {\n  if (watFormat) {\n    // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n    // of unreachable statements not actually emitted by the compiler. Optimizing\n    // StackIR removes these again, but may also suppress useless code emitted by\n    // the compiler that's then no longer visible in tests. Both not ideal.\n    return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n  } else {\n    return binaryen.wrapModule(this.ref).emitText();\n  }\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n","/**\n * @fileoverview Floating point glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero    = Long.ZERO;\nglobal.i64_one     = Long.ONE;\nglobal.i64_neg_one = Long.fromInt(-1);\n\nglobal.i64_is = function i64_is(value) {\n  return Long.isLong(value);\n};\n\nglobal.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function i64_low(value) {\n  return value.low;\n};\n\nglobal.i64_high = function i64_high(value) {\n  return value.high;\n};\n\nglobal.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(global.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\nglobal.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function i64_not(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function i64_to_f32(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n  {\n    \"MIN_VALUE\": { value: -128, writable: false },\n    \"MAX_VALUE\": { value:  127, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n  {\n    \"MIN_VALUE\": { value: -32768, writable: false },\n    \"MAX_VALUE\": { value:  32767, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n  {\n    \"MIN_VALUE\": { value: -2147483648, writable: false },\n    \"MAX_VALUE\": { value:  2147483647, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n  {\n    \"MIN_VALUE\": { value:   0, writable: false },\n    \"MAX_VALUE\": { value: 255, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n  {\n    \"MIN_VALUE\": { value:     0, writable: false },\n    \"MAX_VALUE\": { value: 65535, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n  {\n    \"MIN_VALUE\": { value:          0, writable: false },\n    \"MAX_VALUE\": { value: 4294967295, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; },\n  {\n    \"MIN_VALUE\": { value: false, writable: false },\n    \"MAX_VALUE\": { value: true,  writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n  {\n    \"EPSILON\":   { value: 1.1920928955078125e-07, writable: false },\n    \"MIN_VALUE\": { value: 1.4012984643248170e-45, writable: false },\n    \"MAX_VALUE\": { value: 3.4028234663852886e+38, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  1.1754943508222875e-38, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; },\n  {\n    \"EPSILON\":   { value: 2.2204460492503131e-016, writable: false },\n    \"MIN_VALUE\": { value:                  5e-324, writable: false },\n    \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  2.2250738585072014e-308, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCharCode.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCharCode.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCodePoint.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCodePoint.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nif (!String.prototype.at) {\n  Object.defineProperty(String.prototype, \"at\", {\n    value: function at(index) {\n      return this.charAt(index >= 0 ? index : index + this.length);\n    },\n    configurable: true\n  });\n}\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    },\n    configurable: true\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\n[ Array,\n  Uint8ClampedArray,\n  Uint8Array, Int8Array,\n  Uint16Array, Int16Array,\n  Uint32Array, Int32Array,\n  Float32Array, Float64Array\n].forEach(Ctr => {\n  if (!Ctr.prototype.at) {\n    Object.defineProperty(Ctr.prototype, \"at\", {\n      value: function at(index) {\n        return this[index >= 0 ? index : index + this.length];\n      },\n      configurable: true\n    });\n  }\n});\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n};\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean(U64[1] >>> 31);\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() { /* nop */ };\n\nglobalScope[\"trace\"] = function(message, n) {\n  if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n  console.error(\"trace: \" + message);\n};\n\nObject.defineProperty(Int8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8ClampedArray, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8ClampedArray(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float64Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float64Array(buffer, byteOffset, length);\n  }\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE__911__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n__webpack_require__(308);\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(780);\n"],"sourceRoot":""}