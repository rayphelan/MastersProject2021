@article{Lehmann2019,
abstract = {WebAssembly is the new low-level language for the web and has now been implemented in all major browsers since over a year. To ensure the security, performance, and correctness of future web applications, there is a strong need for dynamic analysis tools for WebAssembly. However, building such tools from scratch requires knowledge of low-level details of the language and its runtime environment. This paper presents Wasabi, the first general-purpose framework for dynamically analyzingWebAssembly.Wasabi provides an easy-to-use, high-level API that supports heavyweight dynamic analyses. It is based on binary instrumentation, which inserts calls to analysis functions written in JavaScript into a WebAssembly binary. Dynamically analyzing WebAssembly comes with several unique challenges, such as the problem of tracing type-polymorphic instructions with analysis functions that have a fixed type, which we address through on-demand monomorphization. Our evaluation on compute-intensive benchmarks and real-world applications shows that Wasabi (i) faithfully preserves the original program behavior, (ii) imposes an overhead that is reasonable for heavyweight dynamic analysis, and (iii) makes it straightforward to implement various dynamic analyses, including instruction counting, call graph extraction, memory access tracing, and taint analysis.},
archivePrefix = {arXiv},
arxivId = {1808.10652},
author = {Lehmann, Daniel and Pradel, Michael},
doi = {10.1145/3297858.3304068},
eprint = {1808.10652},
file = {:C\:/Users/ray.phelan/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Lehmann, Pradel - 2019 - Wasabi A Framework for Dynamically Analyzing WebAssembly.pdf:pdf},
isbn = {9781450362405},
journal = {International Conference on Architectural Support for Programming Languages and Operating Systems - ASPLOS},
pages = {1045--1058},
title = {{Wasabi: A Framework for Dynamically Analyzing WebAssembly}},
year = {2019}
}
